'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/posts/owncast-0.1/','title':"Owncast v0.0.1",'section':"Posts",'content':"In honor of @mattdsteele and @JCake live streaming their wedding using Owncast tomorrow, here\u0026rsquo;s the first release version.\nWe\u0026rsquo;ve been testing, doing events and enjoying using Owncast, so I think it\u0026rsquo;s time to have a release version that others can start using as well.\nStill lots of exciting updates going on, but here\u0026rsquo;s finally something that you can start using. Feel free to reach out and let us know what you\u0026rsquo;re using Owncast for, or if you have any questions.\nThis release is also on Dockerhub if that\u0026rsquo;s convinient for you.\ndocker pull gabekangas/owncast:0.0.1 You can get the release from GitHub or on Docker Hub.\nCongratulations Matt and Jessica!\n"});index.add({'id':2,'href':'/docs/broadcasting/','title':"Broadcasting",'section':"Docs",'content':"Setting up your Broadcasting software #  Compatibility #  In general Owncast is compatible with any software that uses RTMP to broadcast to a remote server. RTMP is what all the major live streaming services use, so if you\u0026rsquo;re currently using one of those it\u0026rsquo;s likely that you can point your existing software at your Owncast instance instead.\nHowever, we haven\u0026rsquo;t tested with everything. So if you\u0026rsquo;re using something specific we\u0026rsquo;d love to hear what software you\u0026rsquo;re using and the results. If you\u0026rsquo;re finding yourself running into issues, we\u0026rsquo;d love to help troubleshoot.\nUsing with OBS / Streamlabs #  OBS is a pretty good piece of free software that will get you streaming from your own computer right away.\n Install OBS or Streamlabs OBS and get it working with your local setup. Open OBS Settings and go to \u0026ldquo;Stream\u0026rdquo;. Select \u0026ldquo;Custom\u0026hellip;\u0026rdquo; as the service. Enter the URL of the server running your streaming service in the format of rtmp://myserver.net/live. Enter your \u0026ldquo;Stream Key\u0026rdquo; that matches the key you put in your config.yaml file. Start the server. Press \u0026ldquo;Start Streaming\u0026rdquo; (OBS) or \u0026ldquo;Go Live\u0026rdquo; (Streamlabs) on OBS.  Using with Restream #  You must be a paid user of Restream to point to your Ownstream instance as a destination \u0026ldquo;channel\u0026rdquo;.\n  Login and go to the \u0026ldquo;Add Channel\u0026rdquo; screen.  \n  Select \u0026ldquo;Custom RTMP\u0026rdquo;  \n  Add your server information in the format of rtmp://myserver/live for the RTMP URL and the Stream Key that matches what is in your config.yaml file.  \n  "});index.add({'id':3,'href':'/docs/building/','title':"Building",'section':"Docs",'content':"Building from Source #   Ensure you have the gcc compiler configured. Install the Go toolchain. Clone the repo. git clone https://github.com/gabek/owncast Follow the above Getting Started instructions, making sure ffmpeg exists and your config file is set. Make any configuration changes. go run main.go on the first run will download the required packages needed for the application to build. It will start running the same as in the above Usage instructions and you can point OBS to your localhost instance of it.  Using Docker #   Download the code: git clone https://github.com/gabek/owncast Copy config-example.yaml to config.yaml Edit config.yaml with a file editor of your choice and change the path of ffmpeg by appending ffmpegPath: /usr/bin/ffmpeg at the top level of the yaml. Make any configuration changes. If you ever make any future config file changes you must rerun the docker build step otherwise you can just run the docker run step to run the service going forward. Run docker build -t owncast . and wait. It may take a few minutes to build depending on the speed of your server. Run docker run -p 8080:8080 -p 1935:1935 -it owncast to start the service.  "});index.add({'id':4,'href':'/docs/configuration/','title':"Configuration",'section':"Docs",'content':"Configuration #  The default config.yaml has a handful of values you can change. However, more can be customized if you need them to be. Some common changes to the config are:\n Your site name, logo, description and external links. The stream key to gain access to broadcasting to your stream. The path to your specific ffmpeg executable. Video quality settings. S3 file storage.  An example config file with additional features can be viewed below.\nVideo Quality #  Owncast supports HLS Adaptive bitrate streaming, or in other words, different video qualities will be used for different network conditions.\nYou can edit the config.yaml file and add as many stream variants as you like under the videoSettings block, like so:\nstreamQualities: - low: bitrate: 400 scaledWidth: 600 encoderPreset: superfast - medium: bitrate: 800 Please visit the Encoding document to learn about how the video pipeline with Owncast works and how you can tweak it for the best results with your specific hardware and video configurations.\nImportant caveats #  CPU Usage #  Each bitrate variant adds significant CPU usage and slows down the overall generation of video segments. If you have a slow server running Owncast you should probably only have one bitrate variant in play. If you add more and you notice that playback becomes choppy it\u0026rsquo;s likely that everything is running too slowly for consistent playback. Consider removing the additional variants and tweaking your single variant so it supports a wider variety of network conditions.\nDisk Usage #  More stream quality variants requires more disk space, since it\u0026rsquo;s another copy of the video on disk. If you\u0026rsquo;re serving video locally and you have enough disk space then it\u0026rsquo;s probably no big deal and files will rather quickly get rotated and cleaned up. If you\u0026rsquo;re using something like S3 for storage then files won\u0026rsquo;t get cleaned up until some point in the future, so you\u0026rsquo;ll have more remote storage use in play.\nExternal links #  socialHandles currently supports the following services by name:\n facebook twitter instagram snapchat tiktok soundcloud bandcamp patreon youtube spotify twitch paypal github linkedin discord mastodon  Update your tags in the config to display the topics type of content you want to call attention to.\nFull Example #  Below, you can see all config items:\npublicHLSPath: webroot/hls privateHLSPath: hls ffmpegPath: /usr/local/bin/ffmpeg webServerPort: 8080 instanceDetails: name: Owncast title: Owncast Demo Server logo: small: /img/logo128.png large: /img/logo128.png summary: \u0026#34;This is brief summary of whom you are or what your stream is. demo server for Owncast. You can read more about it at owncast.online. You can edit this description in your web config file.\\n\\nBlathers is an owl with brown feathers. His face is white and he has a yellow beak. His arms are wing shaped and he has yellow talons. His eyes are very big with small black irises. He also has big pink cheek circles on his cheeks. His belly appears to be checkered in diamonds with light brown and white squares, similar to an argyle vest, which is traditionally associated with academia. His green bowtie further alludes to his academic nature.\u0026#34; # This is relative to the webroot, not the project root. This is a markdown file that displays # extra content on below your video. Put whatever you want in here. extraUserInfoFileName: \u0026#34;/static/content.md\u0026#34; tags: - music - software - animal crossing # https://github.com/gabek/owncast/blob/master/doc/configuration.md#external-links # for full list of supported social links. All optional. socialHandles: - platform: github url: https://github.com/gabek/owncast - platform: instagram url: http://instagram.biz/owncast - platform: facebook url: http://facebook.gov/owncast - platform: tiktok url: http://tiktok.cn/owncast - platform: soundcloud url: http://soundcloud.com/owncast videoSettings: # The length of a single segment of video. chunkLengthInSeconds: 4 # Change this value and keep it secure. Treat it like a password to your live stream. streamingKey: abc123 # The \u0026#34;Stream is offline\u0026#34; content displayed when a stream ends. offlineContent: static/offline.m4v # Determine the bitrate of your stream variants. # See https://github.com/gabek/owncast/blob/master/doc/configuration.md#video-quality for details. streamQualities: - low: # Higher the bitrate, the better it looks, but it requires more bandwidth to consume. videoBitrate: 400 # Resize the width to something smaller. scaledHeight is also an option. Don\u0026#39;t use both at once # unless you want to chang the aspect ratio of your video. scaledWidth: 600 # Don\u0026#39;t re-encode the audio. audioPassthrough: true # The slower the preset the higher quality the video is. # Select a preset from https://trac.ffmpeg.org/wiki/Encode/H.264 # \u0026#34;superfast\u0026#34; and \u0026#34;ultrafast\u0026#34; are generally not recommended since they look bad. encoderPreset: veryfast - medium: videoBitrate: 800 encoderPreset: fast # Number of segments kept referenced in the HLS playlist files: maxNumberInPlaylist: 4 # Read https://github.com/gabek/owncast/blob/master/doc/S3.md for S3 config details. s3: enabled: false endpoint: https://s3.us-west-2.amazonaws.com servingEndpoint: https://yourcdn.example accessKey: ABC12342069 secret: lolomgqwtf49583949 region: us-west-2 bucket: myvideo "});index.add({'id':5,'href':'/docs/embed/','title':"Embed",'section':"Docs",'content':"Embedding video #  Owncast supports embedding your video stream directly into any other web site or source without having to setup a player.\nThe video-only URL to your stream content lives at: http://your.host/embed/video.\nHere\u0026rsquo;s some example HTML you can use.\n\u0026lt;iframe src=\u0026#34;http://your.host/embed/video\u0026#34; title=\u0026#34;Owncast\u0026#34; height=\u0026#34;350px\u0026#34; width=\u0026#34;550px\u0026#34; referrerpolicy=\u0026#34;origin\u0026#34; scrolling=\u0026#34;no\u0026#34; allowfullscreen\u0026gt; \u0026lt;/iframe\u0026gt; Embedding video was first supported in Owncast 0.0.2.  Embedding chat #  Owncast supports embedding your chat directly into any other web site or source.\nThe chat-only URL lives at: http://your.host/embed/chat.\nOne common use is adding the chat into your live stream.\nUsing OBS #    Click the + or right mouse click to add a new source. Choose Browser from the list.\n  For a new source, you will need to add the name. Type in \u0026ldquo;Chat\u0026rdquo;.\n  In the Browser Source settings, you will need to change the URL to your Owncast instance\u0026rsquo;s /embed/chat url.\n  You can use the Custom CSS to tweak how the browser shows in your video. The following example will add some space around the box, give it a semi-transparent dark background; and increase the overall font size to a base unit of 24px. You may change any of these settings to fit your presentation layout. Note that the overall message text color is white. html { margin: 0px; padding: 20px; background-color: rgba(0,0,0,0.5); font-size: 24px; }\n  Click ‘OK’ to save your chat settings and re-position the new chat source in your scene.\n  Embedding chat was first supported in Owncast 0.0.2.  "});index.add({'id':6,'href':'/docs/encoding/','title':"Encoding",'section':"Docs",'content':"Tuning the video encoding #  It\u0026rsquo;s hard to give specific settings that will give you the best quality and performance with Owncast because people have different servers and requirements. However, this document aims to outline what is being done to your content and the different knobs you can tweak to get the best output for your instance..\nBut first the basics.\nHow does an Owncast video stream work? #  Owncast takes your source stream and converts it to short, individual video segments. A list of these segments is created that your viewer\u0026rsquo;s player will continue to read and play all the segments in order. This is all using a specification called HLS or HTTP Live Streaming.\n  In this case Owncast works as the Media encoder, Stream segmenter, and distribution web server. However Owncast supports video being distributed via 3rd party storage as well, so in that case the video segments would be distributed from there, instead.\nMultiple playlists are supported, one for each specific stream quality you want to provide your users. Each one increases the amount of work being completed and can slow down everything else.\nThings to keep in mind. #   The more work you need done to convert the video from one size, quality or format to another the more it will slow everything else down. The slower things go the slower the stream is provided to the user. If stream is provided to the user slowly enough they\u0026rsquo;ll start seeing buffering and errors. Converting audio counts as work, too.  Here\u0026rsquo;s what knobs can be tweaked when trying to determine the quality or qualities you want to provide your user while balancing the amount of server resources you\u0026rsquo;re consuming.\nBitrate #  The bitrate is the amount of data you send when you stream. A higher bitrate takes up more available internet bandwidth and create larger sized segments of video, making it take longer for viewers to download. Increasing your bitrate can improve your video quality, but only up to a certain point.\nResolution #  Resolution refers to the size of a video on a screen. Like bitrates you can provide multiple different sizes for different cases, but asking to resize a video amounts in additional work that needs to be performed.\nIf you change both the width and the height you may be changing the aspect ratio of the video. For example if you take a 1080x720 video and resize it to 800x800 it\u0026rsquo;ll be the wrong aspect ratio and end up as a squashed square. It\u0026rsquo;s recommended if you have to change the size to only change the width or the height, and it\u0026rsquo;ll keep the aspect ratio for you.\nEncoder preset #  A preset is a collection of options that will provide a certain encoding speed to compression ratio. A slower preset will provide better compression and result in a better looking video for the size.\nIn short:\nYou get \u0026ldquo;more bang for your buck\u0026rdquo; the slower you go. But your server will be preforming more work the slower it is.\nIf you\u0026rsquo;re trying to get better quality and smaller files move to a slower encoding preset.\nIf you\u0026rsquo;re getting buffering, errors, or your server just can\u0026rsquo;t keep up try moving to a faster preset.\nThe default is veryfast but adjust as necessary.\nThe options are, in order from fastest to slowest:\n ultrafast superfast veryfast faster fast medium slow slower veryslow  From the ffmpeg h.264 encoding guide.\nAudio #  Any changes to audio when streaming is additional work in the encoding process. Luckily for most people what you\u0026rsquo;re sending from your broadcasting software is generally reasonable and additional work won\u0026rsquo;t be needed, even for low-bandwidth viewers. By default Owncast will not change the audio stream and instead just pass it along to the end users. However, if you need to change the audio bitrate for some reason, such as you want your low quality stream to have much lower quality audio, it\u0026rsquo;ll go through the transcoding process and become AAC encoded audio to your viewers. But by default it\u0026rsquo;s suggested to leave this as defaults and only change it if you need to.\nHow you configure your broadcasting software matters. #  The more you send to Owncast, the more work it has do to work with it. This means you should generally not stream to Owncast at a significantly higher or lower quality than you expect to give to your viewers. It makes no sense to stream to Owncast at 1080p if you\u0026rsquo;re resizing it and downsampling it to something way smaller, because your server has to do that work. On the other hand it makes no sense to stream to Owncast with a 1000k bitrate and then make it convert it to 2000k since it won\u0026rsquo;t look any better.\nSo in short: Try to reasonably figure out what you want to stream to your users and match that as best as possible when setting up your broadcasting software.\nIf you find yourself trying to squeeze better performance out of Owncast then try setting your broadcasting software to a lower quality as well as lowering the quality in your Owncast instance.\nExamples #  Armed with the above knowledge it can be put into action via the config.yaml file under videoSettings -\u0026gt; streamQualities.\nEach stream quality is given a name just for your own convinience so you can reference it by name. You can call it anything you want.\nA simple example would be to create a quality you call \u0026ldquo;medium\u0026rdquo; that has a bitrate of 800k:\n- medium: videoBitrate: 800 Or create a \u0026ldquo;high\u0026rdquo; quality at 2000k using the faster encoding preset.\n- high: videoBitrate: 2000 encoderPreset: faster Or a 1000k bitrate that\u0026rsquo;s resized to a width of 600, using the superfast preset. - resized: videoBitrate: 1000 encoderPreset: superfast scaledWidth: 600\n"});index.add({'id':7,'href':'/docs/faq/','title':"Faq",'section':"Docs",'content':"Frequently Asked Questions #  1. Who is this for? #  Owncast is for people who are live streamers, or who wants to host live streams for others. It\u0026rsquo;s a \u0026ldquo;one to many\u0026rdquo; broadcast much like Twitch, Facebook Live, YouTube Live, etc.\n2. Who or what is this not for? #  Owncast is not for video conferencing or any use case where multiple people are wanting to see video of each other. It\u0026rsquo;s also not a good choice if you have tight real-time requirements as HLS video has inherent delays.\n2. Why would I use this instead of Twitch, Facebook Live, or YouTube live? #  Owncast might be a good alternative if you\u0026rsquo;re somebody who doesn\u0026rsquo;t want to rely on the large companies or wants the ability to build something completely custom that is more in line with the experience they want to offer. As a bonus it allows you to offer a live streaming experience that is without tracking, invasive analytics or advertising.\n3. What can I customize? #  You can edit the included config file to specify your site name, logo and social networking links.\nAdditionally, out of the box there is a fully functional web site with built-in chat and a video player. It\u0026rsquo;s HTML + CSS + Javascript that you can edit directly. It\u0026rsquo;s yours. You could also disable included web interface completely and instead embed your stream into your existing web site. Build something cool!\n4. What kind of server do I need to run Owncast? #  You need a publicly accessible Linux or macOS server on the internet. Something like Linode or Digital Ocean are good options and start at $5/mo.\n5. When would I need a more powerful server? #  The more bitrates you support the more processing power is required. You can easily run three bitrates on something like a $10/mo dedicated server.\n6. What are bitrates? Why would I want more? #  Bitrates specify the quality of the video. The more bitrates you support the wider range of network conditions you can support. For example, a user on their broadband connection at home would want the full quality you have available. But if they\u0026rsquo;re on a slow wireless connection on their phone a lower bitrate would result in less buffering and a smoother experience. This would be a two bitrate configuration and allow for offering two distinct video qualities to your users.\nRead more on Wikipedia about adaptive bitrate streaming.\n"});index.add({'id':8,'href':'/docs/quickstart/','title':"Quickstart",'section':"Docs",'content':"Quickstart #  Prerequisites #    A computer that\u0026rsquo;s on the public internet to run it on. While crunching through video and serving it to viewers can be intensive from the computing side, you can get away with pretty meager resources on a simple setup. If you don\u0026rsquo;t already have a server to run it on you can get a Linode instance for $5/mo that runs it fine. If you worry that you\u0026rsquo;ll be maxing out the bandwidth or transfer limits allotted to you, then utilize S3 Storage very cheaply (or even free for a certain amount) to serve the files instead.\n  ffmpeg needs to be available on your machine (unless you\u0026rsquo;re using a Docker image, it\u0026rsquo;ll be installed for you in that case.)\n  There are two quick ways to get up and running, depending on your preference. One is to simply download the service and run it, and the other is through Docker, if Docker is your thing.\nOptions #  You can choose between downloading a zip file of Owncast, or using Docker.\nDownload and run a release #   Install ffmpeg if you haven\u0026rsquo;t. Make a directory to run the service from, and download a release from https://github.com/gabek/owncast/releases into that directory. Unzip the release\u0026rsquo;s archive for linux or macOS: unzip owncast-linux-x.x.x.zip. Edit config.yaml as detailed below. Specifically your stream key and ffmpeg location. Run ./owncast to start the service.  Use a Docker image #   Find the recent version on Docker by visiting Dockerhub. docker pull gabekangas/owncast:x.x.x replacing x.x.x with the tag Run docker run -p 8080:8080 -p 1935:1935 -it owncast to start the service.   Configure #   Edit config.yaml and change the path of ffmpeg to where your copy is. In this default configuration there will be a single video quality available, simply whatever is being sent to the server is being distributed to the viewers. The video is also going to be distributed from the server running the service in this case. Continue to edit the config file and customize with your own details, links and info. See More Configuration to find additional ways to configure video quality.  Test #   Point your broadcasting software at your new server using rtmp://yourserver/live and the stream key you set above and start your stream. Access your server in your web browser by visiting http://yourserver:8080.  That\u0026rsquo;s it! #  "});index.add({'id':9,'href':'/docs/s3/','title':"S3",'section':"Docs",'content':"Owncast with S3 Providers #  Instead of serving video directly from your personal server you can use a S3 compatible storage provider to offload the bandwidth and storage requirements elsewhere.\nChoose your storage provider of choice. Yours not listed? File an issue and we\u0026rsquo;ll test and write up some documentation for it.\n Linode Object Storage AWS S3 Wasabi  Linode Object Storage #  250 GB storage + 1 TB Outbound Transfer for $5/mo.\nLinode Object Storage is a good choice if you\u0026rsquo;re already using Linode to host your server. It should be fast to transfer your video from your server to their storage service, and their pricing will probably just be the flat $5/mo for you, so it\u0026rsquo;s easy to know what you\u0026rsquo;re paying.  \n Create a new bucket at the Linode Object Storage admin page. Edit your config file and change the S3 endpoint to match the hostname listed below your newly created bucket that looks something like myvideo.us-east-1.linodeobjects.com, the bucket name to match the one you just created and the S3 region to match the us-east-1 equivalent of the above hostname. Using the Linode Object Access Keys page create a new Access Key and add the Key and Secret to your config.yaml file.  In the following steps Linode requires you to interact with your bucket using the s3cmd tool. So install that on your terminal and configure it.\nRun s3cmd --configure and fill in the values with what is currently in your config file. It should look similar to this: Access Key: ABC12334 Secret Key: fj3kd83jdkh Default Region: US S3 Endpoint: us-east-1.linodeobjects.com DNS-style bucket+hostname:port template for accessing a bucket: us-east-1.linodeobjects.com Use HTTPS protocol: False\nAdd permissions to access video. #  This part sucks. But you only have to do it once per bucket. These are the full instructions but let me summarize.\n  Create a file called bucket_policy.json that has the following: { \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;AWS\u0026#34;: [ \u0026#34;*\u0026#34; ] }, \u0026#34;Action\u0026#34;: [ \u0026#34;s3:GetObject\u0026#34; ], \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:s3::MYBUCKETNAME/*\u0026#34; ] } ] }\n  Replace MYBUCKETNAME with your actual bucket name.\n  Run s3cmd setpolicy bucket_policy.json s3://MYBUCKETNAME replacing MYBUCKETNAME with your bucket name.\n  Run s3cmd info s3://MYBUCKETNAME to make sure the new policy saved.\n  Now files video saved to Linode Object Storage will be readable.\nMore details about how to get started using Linode Object Storage can be found on their documentation.\nFile expiration #  Make files older than one day expire and delete themselves so you don\u0026rsquo;t pay for storage of old video.\nFull details are in their documentation.\nCreate a file called lifecycle_policy.json with the following contents:\n\u0026lt;LifecycleConfiguration\u0026gt; \u0026lt;Rule\u0026gt; \u0026lt;ID\u0026gt;delete-all-objects\u0026lt;/ID\u0026gt; \u0026lt;Prefix\u0026gt;\u0026lt;/Prefix\u0026gt; \u0026lt;Status\u0026gt;Enabled\u0026lt;/Status\u0026gt; \u0026lt;Expiration\u0026gt; \u0026lt;Days\u0026gt;1\u0026lt;/Days\u0026gt; \u0026lt;/Expiration\u0026gt; \u0026lt;/Rule\u0026gt; \u0026lt;/LifecycleConfiguration\u0026gt;  Run s3cmd setlifecycle lifecycle_policy.xml s3://MYBUCKETNAME. Run s3cmd info s3://MYBUCKETNAME and you should now see  Expiration Rule: all objects in this bucket will expire in '1' day(s) after creation.  AWS S3 #  AWS S3 is a good choice if you\u0026rsquo;re already using AWS for your server or are comfortable using AWS for other things. If you\u0026rsquo;re brand new to object storage and not using AWS already I\u0026rsquo;m not sure I\u0026rsquo;d recommend jumping into it just for Owncast. There are other options.\nHere\u0026rsquo;s some example usage and pricing for AWS S3:  \nFile expiration #  You should expire old segments on your S3 bucket. Here are some instructions on how to do that.\n Once an object expires you won\u0026rsquo;t be charged for storage, even if the object isn\u0026rsquo;t deleted immediately. A one day object expiration lifecycle rule on objects is as low as you can go, so use that. Because AWS rounds the expiration to midnight of the next day you may have a lot of old video chunks sitting around. You can make the most of this by increasing the maxNumberInPlaylist value in your config file to something much higher, allowing users to rewind your stream back in time further. If the video is available then you might as well make it available to your users.  CORS #   Ugh. CORS. You will need to enable CORS on your bucket so the web player can access the video.  CDN #  AWS (and other S3 compatible providers) offer a feature to change the HTTP host to support CDNs. You can configure Owncast to serve media files from this host by setting the s3.servingEndpoint config to your CDNed host.\nWasabi cloud storage #  Most people would end up paying $5.99/mo with Wasabi, and there\u0026rsquo;s no additional costs for the amount of people or amount of times people access your video. So if you have a ton of viewers, this is probably a good option.\nCreate a user and access key. #   Create a new user on Wasabi for yourself. Create a new Access Key in the Users Panel. Update your Owncast config.json file with the above Access Key and Secret as well as the other required details.  Depending on the region where your bucket lives look up the service URL from this page.\n Endpoint: Is the \u0026ldquo;service URL\u0026rdquo; you looked up above. Likely  s3.wasabisys.com or similar. Bucket  Making files public #  Wasabi makes it easy to make a bucket public. Full documentation is here, but simply select the folder and choose \u0026ldquo;Make Public\u0026rdquo;.\nExpiration of old files on Wasabi #  Important note! Wasabi does NOT seem to have a way to set a policy for deleting old files like AWS and Linode does. You may have your own way of cleaning up old files, or some other solution. But it\u0026rsquo;s something to keep in mind in case you really start to build up a lot of old video files.\nIf anybody knows how to enable Lifecycle Policies on Wasabi, please file an issue with details.\nDigital Ocean Spaces #  Digital Ocean\u0026rsquo;s offering has been tested and works great as well. Details to be written in the future.\n"});index.add({'id':10,'href':'/docs/troubleshooting/','title':"Troubleshooting",'section':"Docs",'content':"CPU and RAM usage alerts #  If your hardware is being maxed out then your video may not be processed and delivered fast enough to keep up with the real-time requirements of live video.\nHere are some steps you can try taking to resolve this.\n You may have too many bitrates defined as separate video quality variants. Try removing one. Change to a faster encoder preset in your configuration. If you\u0026rsquo;re currently using veryfast, try superfast, for example. Try reducing the quality of the video you\u0026rsquo;re sending to Owncast from your broadcasting software. If you\u0026rsquo;ve gone down to a single bitrate, changed the encoder preset to the fastest, and experimented with different qualities in your broadcasting software, it\u0026rsquo;s possible the server you\u0026rsquo;re running Owncast is just not powerful enough for the task and you might need to try a different environment to run this on.  Buffering and video playback issues #  Many things can be responsible for buffering and issues with the video playback. Here are some things to look into.\n Make sure your hardware is not throwing errors as detailed above. Make sure your broadcasting computer is broadcasting live video reliably. If your own computer or network connection is having a hard time getting video to the internet then viewers will be stuck in a buffering state. Reduce the bitrate in your broadcasting software on your computer or mobile device if needed. Try increasing the values for chunkLengthInSeconds and maxNumberInPlaylist in the config file. This will start the user further behind live but give the client more playable video before it gets stuck waiting for the live edge. Change your video stream quality settings to a faster preset. Reduce your stream quality settings to a single variant and a lower bitrate. Experiment with increasing the bitrate and adding another optional stream quality once you find settings that work for you.  "});index.add({'id':11,'href':'/docs/website/','title':"Website",'section':"Docs",'content':"Web site with video player and chat #  Overview #  Owncast includes a web interface for your video with built-in chat that is available once you start the server. It shows online/offline states, viewer counts, stream duration, your instance\u0026rsquo;s description, images, links and more. You can just start using it without making any changes and it\u0026rsquo;ll reflect whatever you put in the config file.\nHowever, the web interface was specifically built to be editable by anybody comfortable tweaking a web page. It\u0026rsquo;s not bundled or transpiled into anything, it\u0026rsquo;s just HTML + Javascript + CSS that you can start editing. Feel free to add your own branding, links, change the colors in the CSS, fonts, layout, or anything else you could possibly want. No development environment is needed, just open the files in an editor and start tweaking.\nCustomization #  By setting your name, description and logo you can quickly update the contents of the website to reflect your stream.\nYou can add links to your profiles on other sites by simply setting socialHandles in the config file. socialHandles currently supports the following services by name:\n facebook twitter instagram snapchat tiktok soundcloud bandcamp patreon youtube spotify twitch paypal github linkedin discord mastodon  Here\u0026rsquo;s an example.\nsocialHandles: - platform: github url: https://github.com/gabek/owncast - platform: instagram url: https://www.instagram.com/owncast For adding additional content you can edit the /webroot/static/content.md file. Anything you put in this using markdown or HTML will display on the page without you having to touch the existing page. Some ideas here: Your Patreon or Paypal link to support donations, an embed of a Soundcloud track, some images, or an embedded social feed.\nChat #  Text Formatting #  The web chat supports some basic formatting using markdown:\nItalic: *your text*\nBold: **your text**\nStrikethrough: ~~your text~~\nCode blocks: `your text`Custom Emoji #  Place your own custom emoji images into /webroot/img/emoji/ and the next time you refresh the web site you\u0026rsquo;ll see your images in the emoji picker, available for use in chat.\nEmoji was first supported in Owncast 0.0.2.  "});index.add({'id':12,'href':'/menu/','title':"Menu",'section':"Home",'content':" Docs  Quickstart Configuration Web Site + Chat Broadcasting Software Encoding External Storage (S3) Building from Source   F.A.Q. Use Cases Blog Contribute Contact  "});index.add({'id':14,'href':'/contact/','title':"Contact",'section':"Home",'content':"Contact #   Gabe Kangas\nMastodon: @gabek@mastodon.socialEmail: gabek@real-ity.com\n Questions or bug reports #  We have a open discussion board for questions, bugs and feature requests. Just open an issue :)\nIssues on GitHub  For security incidents, please send an email to Gabe (see above).\n"});index.add({'id':15,'href':'/contribute/','title':"Contribute",'section':"Home",'content':"Contribute to Owncast #  We are open for new contributors to this project. If you have found issues or bugs, or would like to improve Owncast by sending your code, please visit our GitHub page:\nGitHub Repository  Contributor Covenant Code of Conduct #  Our Pledge #  In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\nOur Standards #  Examples of behavior that contributes to creating a positive environment include:\n Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members  Examples of unacceptable behavior by participants include:\n The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others\u0026rsquo; private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting  Our Responsibilities #  Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\nScope #  This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\nEnforcement #  Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at gabek@real-ity.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project\u0026rsquo;s leadership.\nAttribution #  This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\nFor answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq\n"});index.add({'id':16,'href':'/usecases/','title':"Use Cases",'section':"Home",'content':"Use cases #  One time events #  In the era of COVID-19 everything has to go online, so live stream your conference, meeting, concert, wedding, birthday, etc.\nRead about how Matt Steele streamed his wedding and why.\nIf you have a conference or event with multiple people talking via Zoom, you can even stream that so not everyone has to be logged into a conferencing platform, they can just visit the web site.\nContent creators #  Have your own website where your community can watch your live streams and you no longer have to worry about the arbitrary rules enforced on the mainstream streaming sites. Chat and custom emojis are supported so people can feel at home.\nChurch services #  Bring your service online and control how it\u0026rsquo;s streamed. Decide if you want to just embed the video into your existing site or use the included web interface.\nMusic streaming #  Want to DJ online but worried about getting your stream shut down due to copyright claims? Now you can play whatever you want.\nMovies with friends #  Get your friends together online to watch a movie. With chat you can still make comments about how bad the film is.\n"});})();