{"version":3,"file":"static/chunks/9713.70110fa9b534b8e7.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/sieve.js","webpack://_N_E/<anon>"],"sourcesContent":["function words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\n\nvar keywords = words(\"if elsif else stop require\");\nvar atoms = words(\"true false not\");\n\nfunction tokenBase(stream, state) {\n\n  var ch = stream.next();\n  if (ch == \"/\" && stream.eat(\"*\")) {\n    state.tokenize = tokenCComment;\n    return tokenCComment(stream, state);\n  }\n\n  if (ch === '#') {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n\n  if (ch == \"\\\"\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n\n  if (ch == \"(\") {\n    state._indent.push(\"(\");\n    // add virtual angel wings so that editor behaves...\n    // ...more sane incase of broken brackets\n    state._indent.push(\"{\");\n    return null;\n  }\n\n  if (ch === \"{\") {\n    state._indent.push(\"{\");\n    return null;\n  }\n\n  if (ch == \")\")  {\n    state._indent.pop();\n    state._indent.pop();\n  }\n\n  if (ch === \"}\") {\n    state._indent.pop();\n    return null;\n  }\n\n  if (ch == \",\")\n    return null;\n\n  if (ch == \";\")\n    return null;\n\n\n  if (/[{}\\(\\),;]/.test(ch))\n    return null;\n\n  // 1*DIGIT \"K\" / \"M\" / \"G\"\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\d]/);\n    stream.eat(/[KkMmGg]/);\n    return \"number\";\n  }\n\n  // \":\" (ALPHA / \"_\") *(ALPHA / DIGIT / \"_\")\n  if (ch == \":\") {\n    stream.eatWhile(/[a-zA-Z_]/);\n    stream.eatWhile(/[a-zA-Z0-9_]/);\n\n    return \"operator\";\n  }\n\n  stream.eatWhile(/\\w/);\n  var cur = stream.current();\n\n  // \"text:\" *(SP / HTAB) (hash-comment / CRLF)\n  // *(multiline-literal / multiline-dotstart)\n  // \".\" CRLF\n  if ((cur == \"text\") && stream.eat(\":\"))\n  {\n    state.tokenize = tokenMultiLineString;\n    return \"string\";\n  }\n\n  if (keywords.propertyIsEnumerable(cur))\n    return \"keyword\";\n\n  if (atoms.propertyIsEnumerable(cur))\n    return \"atom\";\n\n  return null;\n}\n\nfunction tokenMultiLineString(stream, state)\n{\n  state._multiLineString = true;\n  // the first line is special it may contain a comment\n  if (!stream.sol()) {\n    stream.eatSpace();\n\n    if (stream.peek() == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    stream.skipToEnd();\n    return \"string\";\n  }\n\n  if ((stream.next() == \".\")  && (stream.eol()))\n  {\n    state._multiLineString = false;\n    state.tokenize = tokenBase;\n  }\n\n  return \"string\";\n}\n\nfunction tokenCComment(stream, state) {\n  var maybeEnd = false, ch;\n  while ((ch = stream.next()) != null) {\n    if (maybeEnd && ch == \"/\") {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, ch;\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && !escaped)\n        break;\n      escaped = !escaped && ch == \"\\\\\";\n    }\n    if (!escaped) state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\n\nexport const sieve = {\n  name: \"sieve\",\n  startState: function(base) {\n    return {tokenize: tokenBase,\n            baseIndent: base || 0,\n            _indent: []};\n  },\n\n  token: function(stream, state) {\n    if (stream.eatSpace())\n      return null;\n\n    return (state.tokenize || tokenBase)(stream, state);\n  },\n\n  indent: function(state, _textAfter, cx) {\n    var length = state._indent.length;\n    if (_textAfter && (_textAfter[0] == \"}\"))\n      length--;\n\n    if (length <0)\n      length = 0;\n\n    return length * cx.unit;\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*\\}$/\n  }\n};\n"],"names":["words","str","obj","split","i","length","keywords","atoms","tokenBase","stream","state","ch","next","eat","tokenize","tokenCComment","skipToEnd","escaped","_indent","push","pop","test","eatWhile","cur","current","tokenMultiLineString","propertyIsEnumerable","_multiLineString","sol","eol","eatSpace","peek","maybeEnd","sieve","name","startState","base","baseIndent","token","indent","_textAfter","cx","unit","languageData","indentOnInput"],"sourceRoot":""}