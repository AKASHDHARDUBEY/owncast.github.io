{"version":3,"file":"static/chunks/7365.b5c5b811204218d3.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/r.js","webpack://_N_E/<anon>"],"sourcesContent":["function wordObj(words) {\n  var res = {};\n  for (var i = 0; i < words.length; ++i) res[words[i]] = true;\n  return res;\n}\nvar commonAtoms = [\"NULL\", \"NA\", \"Inf\", \"NaN\", \"NA_integer_\", \"NA_real_\", \"NA_complex_\", \"NA_character_\", \"TRUE\", \"FALSE\"];\nvar commonBuiltins = [\"list\", \"quote\", \"bquote\", \"eval\", \"return\", \"call\", \"parse\", \"deparse\"];\nvar commonKeywords = [\"if\", \"else\", \"repeat\", \"while\", \"function\", \"for\", \"in\", \"next\", \"break\"];\nvar commonBlockKeywords = [\"if\", \"else\", \"repeat\", \"while\", \"function\", \"for\"];\n\nvar atoms = wordObj(commonAtoms);\nvar builtins = wordObj(commonBuiltins);\nvar keywords = wordObj(commonKeywords);\nvar blockkeywords = wordObj(commonBlockKeywords);\nvar opChars = /[+\\-*\\/^<>=!&|~$:]/;\nvar curPunc;\n\nfunction tokenBase(stream, state) {\n  curPunc = null;\n  var ch = stream.next();\n  if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  } else if (ch == \"0\" && stream.eat(\"x\")) {\n    stream.eatWhile(/[\\da-f]/i);\n    return \"number\";\n  } else if (ch == \".\" && stream.eat(/\\d/)) {\n    stream.match(/\\d*(?:e[+\\-]?\\d+)?/);\n    return \"number\";\n  } else if (/\\d/.test(ch)) {\n    stream.match(/\\d*(?:\\.\\d+)?(?:e[+\\-]\\d+)?L?/);\n    return \"number\";\n  } else if (ch == \"'\" || ch == '\"') {\n    state.tokenize = tokenString(ch);\n    return \"string\";\n  } else if (ch == \"`\") {\n    stream.match(/[^`]+`/);\n    return \"string.special\";\n  } else if (ch == \".\" && stream.match(/.(?:[.]|\\d+)/)) {\n    return \"keyword\";\n  } else if (/[a-zA-Z\\.]/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    var word = stream.current();\n    if (atoms.propertyIsEnumerable(word)) return \"atom\";\n    if (keywords.propertyIsEnumerable(word)) {\n      // Block keywords start new blocks, except 'else if', which only starts\n      // one new block for the 'if', no block for the 'else'.\n      if (blockkeywords.propertyIsEnumerable(word) &&\n          !stream.match(/\\s*if(\\s+|$)/, false))\n        curPunc = \"block\";\n      return \"keyword\";\n    }\n    if (builtins.propertyIsEnumerable(word)) return \"builtin\";\n    return \"variable\";\n  } else if (ch == \"%\") {\n    if (stream.skipTo(\"%\")) stream.next();\n    return \"variableName.special\";\n  } else if (\n    (ch == \"<\" && stream.eat(\"-\")) ||\n      (ch == \"<\" && stream.match(\"<-\")) ||\n      (ch == \"-\" && stream.match(/>>?/))\n  ) {\n    return \"operator\";\n  } else if (ch == \"=\" && state.ctx.argList) {\n    return \"operator\";\n  } else if (opChars.test(ch)) {\n    if (ch == \"$\") return \"operator\";\n    stream.eatWhile(opChars);\n    return \"operator\";\n  } else if (/[\\(\\){}\\[\\];]/.test(ch)) {\n    curPunc = ch;\n    if (ch == \";\") return \"punctuation\";\n    return null;\n  } else {\n    return null;\n  }\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    if (stream.eat(\"\\\\\")) {\n      var ch = stream.next();\n      if (ch == \"x\") stream.match(/^[a-f0-9]{2}/i);\n      else if ((ch == \"u\" || ch == \"U\") && stream.eat(\"{\") && stream.skipTo(\"}\")) stream.next();\n      else if (ch == \"u\") stream.match(/^[a-f0-9]{4}/i);\n      else if (ch == \"U\") stream.match(/^[a-f0-9]{8}/i);\n      else if (/[0-7]/.test(ch)) stream.match(/^[0-7]{1,2}/);\n      return \"string.special\";\n    } else {\n      var next;\n      while ((next = stream.next()) != null) {\n        if (next == quote) { state.tokenize = tokenBase; break; }\n        if (next == \"\\\\\") { stream.backUp(1); break; }\n      }\n      return \"string\";\n    }\n  };\n}\n\nvar ALIGN_YES = 1, ALIGN_NO = 2, BRACELESS = 4\n\nfunction push(state, type, stream) {\n  state.ctx = {type: type,\n               indent: state.indent,\n               flags: 0,\n               column: stream.column(),\n               prev: state.ctx};\n}\nfunction setFlag(state, flag) {\n  var ctx = state.ctx\n  state.ctx = {type: ctx.type,\n               indent: ctx.indent,\n               flags: ctx.flags | flag,\n               column: ctx.column,\n               prev: ctx.prev}\n}\nfunction pop(state) {\n  state.indent = state.ctx.indent;\n  state.ctx = state.ctx.prev;\n}\n\nexport const r = {\n  name: \"r\",\n  startState: function(indentUnit) {\n    return {tokenize: tokenBase,\n            ctx: {type: \"top\",\n                  indent: -indentUnit,\n                  flags: ALIGN_NO},\n            indent: 0,\n            afterIdent: false};\n  },\n\n  token: function(stream, state) {\n    if (stream.sol()) {\n      if ((state.ctx.flags & 3) == 0) state.ctx.flags |= ALIGN_NO\n      if (state.ctx.flags & BRACELESS) pop(state)\n      state.indent = stream.indentation();\n    }\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n    if (style != \"comment\" && (state.ctx.flags & ALIGN_NO) == 0) setFlag(state, ALIGN_YES)\n\n    if ((curPunc == \";\" || curPunc == \"{\" || curPunc == \"}\") && state.ctx.type == \"block\") pop(state);\n    if (curPunc == \"{\") push(state, \"}\", stream);\n    else if (curPunc == \"(\") {\n      push(state, \")\", stream);\n      if (state.afterIdent) state.ctx.argList = true;\n    }\n    else if (curPunc == \"[\") push(state, \"]\", stream);\n    else if (curPunc == \"block\") push(state, \"block\", stream);\n    else if (curPunc == state.ctx.type) pop(state);\n    else if (state.ctx.type == \"block\" && style != \"comment\") setFlag(state, BRACELESS)\n    state.afterIdent = style == \"variable\" || style == \"keyword\";\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    if (state.tokenize != tokenBase) return 0;\n    var firstChar = textAfter && textAfter.charAt(0), ctx = state.ctx,\n        closing = firstChar == ctx.type;\n    if (ctx.flags & BRACELESS) ctx = ctx.prev\n    if (ctx.type == \"block\") return ctx.indent + (firstChar == \"{\" ? 0 : cx.unit);\n    else if (ctx.flags & ALIGN_YES) return ctx.column + (closing ? 0 : 1);\n    else return ctx.indent + (closing ? 0 : cx.unit);\n  },\n\n  languageData: {\n    wordChars: \".\",\n    commentTokens: {line: \"#\"},\n    autocomplete: commonAtoms.concat(commonBuiltins, commonKeywords)\n  }\n};\n"],"names":["wordObj","words","res","i","length","curPunc","commonAtoms","commonBuiltins","commonKeywords","atoms","builtins","keywords","blockkeywords","opChars","tokenBase","stream","state","ch","next","skipToEnd","eat","eatWhile","match","test","tokenize","skipTo","backUp","word","current","propertyIsEnumerable","ctx","argList","push","type","indent","flags","column","prev","setFlag","flag","pop","r","name","startState","indentUnit","afterIdent","token","sol","indentation","eatSpace","style","textAfter","cx","firstChar","charAt","closing","unit","languageData","wordChars","commentTokens","line","autocomplete","concat"],"sourceRoot":""}