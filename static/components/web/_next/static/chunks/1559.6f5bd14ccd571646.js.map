{"version":3,"file":"static/chunks/1559.6f5bd14ccd571646.js","mappings":"yLASO,IAAMA,EAAoC,GAA4C,IAA3C,CAAEC,cAAAA,CAAAA,CAAeC,oBAAAA,CAAAA,CAAqB,CAAAC,EAChF,CAACC,EAAaC,EAAe,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,EAAE,EAC3CC,EAAMC,CAAAA,EAAAA,EAAAA,MAAAA,IAENC,EAAiB,SAAY,CACjC,GAAI,CACF,IAAMC,EAAW,MAAMC,MAZJ,cAabC,EAAQ,MAAMF,EAASG,IAAI,GACjCR,EAAeO,EACjB,CAAE,MAAOE,EAAG,CACVC,QAAQC,KAAK,CAAC,4BAA6BF,EAC7C,CACF,EA+BA,MA5BAG,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,IAAM,CACdR,GACF,EAAG,EAAE,EAGLQ,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,IAAM,CACd,IAAMH,EAAIV,EAAYc,GAAG,CAACN,GAAU,EAClCA,MAAOA,EAAMO,IAAI,CACjBC,MAAOR,EAAMO,IAAI,CACjBE,IAAKT,EAAMS,GAAG,CAChB,GAEMC,EAASC,CAAAA,EAAAA,EAAAA,EAAAA,EAAa,CAC1BC,YAAajB,EAAIkB,OAAO,CACxBC,OAAQZ,EACRa,gBAAiB,SACjBC,YAAa,GACbC,YAAa,EACf,GACAP,EAAOQ,gBAAgB,CAAC,eAAgBC,GAAS,CAC3CA,EAAMV,GAAG,CACXnB,EAAoB6B,EAAMZ,IAAI,CAAEY,EAAMV,GAAG,EAEzCpB,EAAc8B,EAAMnB,KAAK,CAE7B,EACF,EAAG,CAACR,EAAY,EAET,GAAA4B,EAAAC,GAAA,EAACC,MAAAA,CAAI3B,IAAKA,GACnB","sources":["webpack://_N_E/./components/chat/ChatTextField/EmojiPicker.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import React, { FC, useEffect, useRef, useState } from 'react';\nimport { createPicker } from 'picmo';\n\nconst CUSTOM_EMOJI_URL = '/api/emoji';\nexport type EmojiPickerProps = {\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (name: string, url: string) => void;\n};\n\nexport const EmojiPicker: FC<EmojiPickerProps> = ({ onEmojiSelect, onCustomEmojiSelect }) => {\n  const [customEmoji, setCustomEmoji] = useState([]);\n  const ref = useRef();\n\n  const getCustomEmoji = async () => {\n    try {\n      const response = await fetch(CUSTOM_EMOJI_URL);\n      const emoji = await response.json();\n      setCustomEmoji(emoji);\n    } catch (e) {\n      console.error('cannot fetch custom emoji', e);\n    }\n  };\n\n  // Fetch the custom emoji on component mount.\n  useEffect(() => {\n    getCustomEmoji();\n  }, []);\n\n  // Recreate the emoji picker when the custom emoji changes.\n  useEffect(() => {\n    const e = customEmoji.map(emoji => ({\n      emoji: emoji.name,\n      label: emoji.name,\n      url: emoji.url,\n    }));\n\n    const picker = createPicker({\n      rootElement: ref.current,\n      custom: e,\n      initialCategory: 'custom',\n      showPreview: false,\n      showRecents: true,\n    });\n    picker.addEventListener('emoji:select', event => {\n      if (event.url) {\n        onCustomEmojiSelect(event.name, event.url);\n      } else {\n        onEmojiSelect(event.emoji);\n      }\n    });\n  }, [customEmoji]);\n\n  return <div ref={ref} />;\n};\n"],"names":["EmojiPicker","onEmojiSelect","onCustomEmojiSelect","param","customEmoji","setCustomEmoji","useState","ref","useRef","getCustomEmoji","response","fetch","emoji","json","e","console","error","useEffect","map","name","label","url","picker","createPicker","rootElement","current","custom","initialCategory","showPreview","showRecents","addEventListener","event","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","div"],"sourceRoot":""}