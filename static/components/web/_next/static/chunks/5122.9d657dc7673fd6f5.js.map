{"version":3,"file":"static/chunks/5122.9d657dc7673fd6f5.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@lezer/xml/dist/index.es.js","webpack://_N_E/./node_modules/@codemirror/lang-xml/dist/index.js","webpack://_N_E/<anon>"],"sourcesContent":["import { ContextTracker, ExternalTokenizer, LRParser } from '@lezer/lr';\nimport { styleTags, tags } from '@lezer/highlight';\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst StartTag = 1,\n  StartCloseTag = 2,\n  MissingCloseTag = 3,\n  mismatchedStartCloseTag = 4,\n  incompleteStartCloseTag = 5,\n  commentContent$1 = 35,\n  piContent$1 = 36,\n  cdataContent$1 = 37,\n  Element = 11,\n  OpenTag = 13;\n\n/* Hand-written tokenizer for XML tag matching. */\n\nfunction nameChar(ch) {\n  return ch == 45 || ch == 46 || ch == 58 || ch >= 65 && ch <= 90 || ch == 95 || ch >= 97 && ch <= 122 || ch >= 161\n}\n\nfunction isSpace(ch) {\n  return ch == 9 || ch == 10 || ch == 13 || ch == 32\n}\n\nlet cachedName = null, cachedInput = null, cachedPos = 0;\nfunction tagNameAfter(input, offset) {\n  let pos = input.pos + offset;\n  if (cachedInput == input && cachedPos == pos) return cachedName\n  while (isSpace(input.peek(offset))) offset++;\n  let name = \"\";\n  for (;;) {\n    let next = input.peek(offset);\n    if (!nameChar(next)) break\n    name += String.fromCharCode(next);\n    offset++;\n  }\n  cachedInput = input; cachedPos = pos;\n  return cachedName = name || null\n}\n\nfunction ElementContext(name, parent) {\n  this.name = name;\n  this.parent = parent;\n  this.hash = parent ? parent.hash : 0;\n  for (let i = 0; i < name.length; i++) this.hash += (this.hash << 4) + name.charCodeAt(i) + (name.charCodeAt(i) << 8);\n}\n\nconst elementContext = new ContextTracker({\n  start: null,\n  shift(context, term, stack, input) {\n    return term == StartTag ? new ElementContext(tagNameAfter(input, 1) || \"\", context) : context\n  },\n  reduce(context, term) {\n    return term == Element && context ? context.parent : context\n  },\n  reuse(context, node, _stack, input) {\n    let type = node.type.id;\n    return type == StartTag || type == OpenTag\n      ? new ElementContext(tagNameAfter(input, 1) || \"\", context) : context\n  },\n  hash(context) { return context ? context.hash : 0 },\n  strict: false\n});\n\nconst startTag = new ExternalTokenizer((input, stack) => {\n  if (input.next != 60 /* '<' */) return\n  input.advance();\n  if (input.next == 47 /* '/' */) {\n    input.advance();\n    let name = tagNameAfter(input, 0);\n    if (!name) return input.acceptToken(incompleteStartCloseTag)\n    if (stack.context && name == stack.context.name) return input.acceptToken(StartCloseTag)\n    for (let cx = stack.context; cx; cx = cx.parent) if (cx.name == name) return input.acceptToken(MissingCloseTag, -2)\n    input.acceptToken(mismatchedStartCloseTag);\n  } else if (input.next != 33 /* '!' */ && input.next != 63 /* '?' */) {\n    return input.acceptToken(StartTag)\n  }\n}, {contextual: true});\n\nfunction scanTo(type, end) {\n  return new ExternalTokenizer(input => {\n    for (let endPos = 0, len = 0;; len++) {\n      if (input.next < 0) {\n        if (len) input.acceptToken(type);\n        break\n      } \n      if (input.next == end.charCodeAt(endPos)) {\n        endPos++;\n        if (endPos == end.length) {\n          if (len >= end.length) input.acceptToken(type, 1 - end.length);\n          break\n        }\n      } else {\n        endPos = input.next == end.charCodeAt(0) ? 1 : 0;\n      }\n      input.advance();\n    }\n  })\n}\n\nconst commentContent = scanTo(commentContent$1, \"-->\");\nconst piContent = scanTo(piContent$1, \"?>\");\nconst cdataContent = scanTo(cdataContent$1, \"]]>\");\n\nconst xmlHighlighting = styleTags({\n  Text: tags.content,\n  \"StartTag StartCloseTag EndTag SelfCloseEndTag\": tags.angleBracket,\n  TagName: tags.tagName,\n  \"MismatchedCloseTag/Tagname\": [tags.tagName, tags.invalid],\n  AttributeName: tags.attributeName,\n  AttributeValue: tags.attributeValue,\n  Is: tags.definitionOperator,\n  \"EntityReference CharacterReference\": tags.character,\n  Comment: tags.blockComment,\n  ProcessingInst: tags.processingInstruction,\n  DoctypeDecl: tags.documentMeta,\n  Cdata: tags.special(tags.string)\n});\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst parser = LRParser.deserialize({\n  version: 14,\n  states: \",SOQOaOOOrOxO'#CfOzOpO'#CiO!tOaO'#CgOOOP'#Cg'#CgO!{OrO'#CrO#TOtO'#CsO#]OpO'#CtOOOP'#DS'#DSOOOP'#Cv'#CvQQOaOOOOOW'#Cw'#CwO#eOxO,59QOOOP,59Q,59QOOOO'#Cx'#CxO#mOpO,59TO#uO!bO,59TOOOP'#C{'#C{O$TOaO,59RO$[OpO'#CoOOOP,59R,59ROOOQ'#C|'#C|O$dOrO,59^OOOP,59^,59^OOOS'#C}'#C}O$lOtO,59_OOOP,59_,59_O$tOpO,59`O$|OpO,59`OOOP-E6t-E6tOOOW-E6u-E6uOOOP1G.l1G.lOOOO-E6v-E6vO%UO!bO1G.oO%UO!bO1G.oO%dOpO'#CkO%lO!bO'#CyO%zO!bO1G.oOOOP1G.o1G.oOOOP1G.w1G.wOOOP-E6y-E6yOOOP1G.m1G.mO&VOpO,59ZO&_OpO,59ZOOOQ-E6z-E6zOOOP1G.x1G.xOOOS-E6{-E6{OOOP1G.y1G.yO&gOpO1G.zO&gOpO1G.zOOOP1G.z1G.zO&oO!bO7+$ZO&}O!bO7+$ZOOOP7+$Z7+$ZOOOP7+$c7+$cO'YOpO,59VO'bOpO,59VO'jO!bO,59eOOOO-E6w-E6wO'xOpO1G.uO'xOpO1G.uOOOP1G.u1G.uO(QOpO7+$fOOOP7+$f7+$fO(YO!bO<<GuOOOP<<Gu<<GuOOOP<<G}<<G}O'bOpO1G.qO'bOpO1G.qO(eO#tO'#CnOOOO1G.q1G.qO(sOpO7+$aOOOP7+$a7+$aOOOP<<HQ<<HQOOOPAN=aAN=aOOOPAN=iAN=iO'bOpO7+$]OOOO7+$]7+$]OOOO'#Cz'#CzO({O#tO,59YOOOO,59Y,59YOOOP<<G{<<G{OOOO<<Gw<<GwOOOO-E6x-E6xOOOO1G.t1G.t\",\n  stateData: \")Z~OPQOSVOTWOVWOWWOXWOiXOxPO}TO!PUO~OuZOw]O~O^`Oy^O~OPQOQcOSVOTWOVWOWWOXWOxPO}TO!PUO~ORdO~P!SOseO|gO~OthO!OjO~O^lOy^O~OuZOwoO~O^qOy^O~O[vO`sOdwOy^O~ORyO~P!SO^{Oy^O~OseO|}O~OthO!O!PO~O^!QOy^O~O[!SOy^O~O[!VO`sOd!WOy^O~Oa!YOy^O~Oy^O[mX`mXdmX~O[!VO`sOd!WO~O^!]Oy^O~O[!_Oy^O~O[!aOy^O~O[!cO`sOd!dOy^O~O[!cO`sOd!dO~Oa!eOy^O~Oy^Oz!gO~Oy^O[ma`madma~O[!jOy^O~O[!kOy^O~O[!lO`sOd!mO~OW!pOX!pOz!rO{!pO~O[!sOy^O~OW!pOX!pOz!vO{!pO~O\",\n  goto: \"%[wPPPPPPPPPPxxP!OP!UPP!_!iP!oxxxP!u!{#R$Z$j$p$v$|PPPP%SXWORYbXRORYb_t`qru!T!U!bQ!h!YS!o!e!fR!t!nQdRRybXSORYbQYORmYQ[PRn[Q_QQkVjp_krz!R!T!X!Z!^!`!f!i!nQr`QzcQ!RlQ!TqQ!XsQ!ZtQ!^{Q!`!QQ!f!YQ!i!]R!n!eQu`S!UqrU![u!U!bR!b!TQ!q!gR!u!qQbRRxbQfTR|fQiUR!OiSXOYTaRb\",\n  nodeNames: \"⚠ StartTag StartCloseTag MissingCloseTag StartCloseTag StartCloseTag Document Text EntityReference CharacterReference Cdata Element EndTag OpenTag TagName Attribute AttributeName Is AttributeValue CloseTag SelfCloseEndTag SelfClosingTag Comment ProcessingInst MismatchedCloseTag DoctypeDecl\",\n  maxTerm: 47,\n  context: elementContext,\n  nodeProps: [\n    [\"closedBy\", 1,\"SelfCloseEndTag EndTag\",13,\"CloseTag MissingCloseTag\"],\n    [\"openedBy\", 12,\"StartTag StartCloseTag\",19,\"OpenTag\",20,\"StartTag\"]\n  ],\n  propSources: [xmlHighlighting],\n  skippedNodes: [0],\n  repeatNodeCount: 8,\n  tokenData: \"IX~R!XOX$nXY&kYZ&kZ]$n]^&k^p$npq&kqr$nrs'ssv$nvw(Zw}$n}!O*l!O!P$n!P!Q,{!Q![$n![!].e!]!^$n!^!_1v!_!`Cz!`!aDm!a!bE`!b!c$n!c!}.e!}#P$n#P#QFx#Q#R$n#R#S.e#S#T$n#T#o.e#o%W$n%W%o.e%o%p$n%p&a.e&a&b$n&b1p.e1p4U$n4U4d.e4d4e$n4e$IS.e$IS$I`$n$I`$Ib.e$Ib$Kh$n$Kh%#t.e%#t&/x$n&/x&Et.e&Et&FV$n&FV;'S.e;'S;:j1p;:j;=`&e<%l?&r$n?&r?Ah.e?Ah?BY$n?BY?Mn.e?MnO$nX$uWVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$nP%dTVPOv%_w!^%_!_;'S%_;'S;=`%s<%lO%_P%vP;=`<%l%_W&OT{WOr%ysv%yw;'S%y;'S;=`&_<%lO%yW&bP;=`<%l%yX&hP;=`<%l$n_&t_VP{WyUOX$nXY&kYZ&kZ]$n]^&k^p$npq&kqr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$nZ'zTzYVPOv%_w!^%_!_;'S%_;'S;=`%s<%lO%_~(^VOp(sqs(sst)ht!](s!^;'S(s;'S;=`)b<%lO(s~(vVOp(sqs(st!](s!]!^)]!^;'S(s;'S;=`)b<%lO(s~)bOW~~)eP;=`<%l(s~)kTOp)zq!])z!^;'S)z;'S;=`*f<%lO)z~)}UOp)zq!])z!]!^*a!^;'S)z;'S;=`*f<%lO)z~*fOX~~*iP;=`<%l)zZ*sYVP{WOr$nrs%_sv$nw}$n}!O+c!O!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$nZ+jYVP{WOr$nrs%_sv$nw!^$n!^!_%y!_!`$n!`!a,Y!a;'S$n;'S;=`&e<%lO$nZ,cW|QVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$n]-SYVP{WOr$nrs%_sv$nw!^$n!^!_%y!_!`$n!`!a-r!a;'S$n;'S;=`&e<%lO$n]-{WdSVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$n_.p!O`S^QVP{WOr$nrs%_sv$nw}$n}!O.e!O!P.e!P!Q$n!Q![.e![!].e!]!^$n!^!_%y!_!c$n!c!}.e!}#R$n#R#S.e#S#T$n#T#o.e#o$}$n$}%O.e%O%W$n%W%o.e%o%p$n%p&a.e&a&b$n&b1p.e1p4U.e4U4d.e4d4e$n4e$IS.e$IS$I`$n$I`$Ib.e$Ib$Je$n$Je$Jg.e$Jg$Kh$n$Kh%#t.e%#t&/x$n&/x&Et.e&Et&FV$n&FV;'S.e;'S;:j1p;:j;=`&e<%l?&r$n?&r?Ah.e?Ah?BY$n?BY?Mn.e?MnO$n_1sP;=`<%l.eX1{W{WOq%yqr2esv%yw!a%y!a!bCd!b;'S%y;'S;=`&_<%lO%yX2j]{WOr%ysv%yw}%y}!O3c!O!f%y!f!g4e!g!}%y!}#O9t#O#W%y#W#X@Q#X;'S%y;'S;=`&_<%lO%yX3hV{WOr%ysv%yw}%y}!O3}!O;'S%y;'S;=`&_<%lO%yX4UT}P{WOr%ysv%yw;'S%y;'S;=`&_<%lO%yX4jV{WOr%ysv%yw!q%y!q!r5P!r;'S%y;'S;=`&_<%lO%yX5UV{WOr%ysv%yw!e%y!e!f5k!f;'S%y;'S;=`&_<%lO%yX5pV{WOr%ysv%yw!v%y!v!w6V!w;'S%y;'S;=`&_<%lO%yX6[V{WOr%ysv%yw!{%y!{!|6q!|;'S%y;'S;=`&_<%lO%yX6vV{WOr%ysv%yw!r%y!r!s7]!s;'S%y;'S;=`&_<%lO%yX7bV{WOr%ysv%yw!g%y!g!h7w!h;'S%y;'S;=`&_<%lO%yX7|X{WOr7wrs8isv7wvw8iw!`7w!`!a9W!a;'S7w;'S;=`9n<%lO7wP8lTO!`8i!`!a8{!a;'S8i;'S;=`9Q<%lO8iP9QOiPP9TP;=`<%l8iX9_TiP{WOr%ysv%yw;'S%y;'S;=`&_<%lO%yX9qP;=`<%l7wX9yX{WOr%ysv%yw!e%y!e!f:f!f#V%y#V#W=t#W;'S%y;'S;=`&_<%lO%yX:kV{WOr%ysv%yw!f%y!f!g;Q!g;'S%y;'S;=`&_<%lO%yX;VV{WOr%ysv%yw!c%y!c!d;l!d;'S%y;'S;=`&_<%lO%yX;qV{WOr%ysv%yw!v%y!v!w<W!w;'S%y;'S;=`&_<%lO%yX<]V{WOr%ysv%yw!c%y!c!d<r!d;'S%y;'S;=`&_<%lO%yX<wV{WOr%ysv%yw!}%y!}#O=^#O;'S%y;'S;=`&_<%lO%yX=eT{WxPOr%ysv%yw;'S%y;'S;=`&_<%lO%yX=yV{WOr%ysv%yw#W%y#W#X>`#X;'S%y;'S;=`&_<%lO%yX>eV{WOr%ysv%yw#T%y#T#U>z#U;'S%y;'S;=`&_<%lO%yX?PV{WOr%ysv%yw#h%y#h#i?f#i;'S%y;'S;=`&_<%lO%yX?kV{WOr%ysv%yw#T%y#T#U<r#U;'S%y;'S;=`&_<%lO%yX@VV{WOr%ysv%yw#c%y#c#d@l#d;'S%y;'S;=`&_<%lO%yX@qV{WOr%ysv%yw#V%y#V#WAW#W;'S%y;'S;=`&_<%lO%yXA]V{WOr%ysv%yw#h%y#h#iAr#i;'S%y;'S;=`&_<%lO%yXAwV{WOr%ysv%yw#m%y#m#nB^#n;'S%y;'S;=`&_<%lO%yXBcV{WOr%ysv%yw#d%y#d#eBx#e;'S%y;'S;=`&_<%lO%yXB}V{WOr%ysv%yw#X%y#X#Y7w#Y;'S%y;'S;=`&_<%lO%yXCkT!PP{WOr%ysv%yw;'S%y;'S;=`&_<%lO%yZDTWaQVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$n_DvW[UVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$nZEgYVP{WOr$nrs%_sv$nw!^$n!^!_%y!_!`$n!`!aFV!a;'S$n;'S;=`&e<%lO$nZF`W!OQVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$nZGPYVP{WOr$nrs%_sv$nw!^$n!^!_%y!_#P$n#P#QGo#Q;'S$n;'S;=`&e<%lO$nZGvYVP{WOr$nrs%_sv$nw!^$n!^!_%y!_!`$n!`!aHf!a;'S$n;'S;=`&e<%lO$nZHoWwQVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$n\",\n  tokenizers: [startTag, commentContent, piContent, cdataContent, 0, 1, 2, 3],\n  topRules: {\"Document\":[0,6]},\n  tokenPrec: 0\n});\n\nexport { parser };\n","import { parser } from '@lezer/xml';\nimport { syntaxTree, LRLanguage, indentNodeProp, foldNodeProp, bracketMatchingHandle, LanguageSupport } from '@codemirror/language';\n\nfunction tagName(doc, tag) {\n    let name = tag && tag.getChild(\"TagName\");\n    return name ? doc.sliceString(name.from, name.to) : \"\";\n}\nfunction elementName(doc, tree) {\n    let tag = tree && tree.firstChild;\n    return !tag || tag.name != \"OpenTag\" ? \"\" : tagName(doc, tag);\n}\nfunction attrName(doc, tag, pos) {\n    let attr = tag && tag.getChildren(\"Attribute\").find(a => a.from <= pos && a.to >= pos);\n    let name = attr && attr.getChild(\"AttributeName\");\n    return name ? doc.sliceString(name.from, name.to) : \"\";\n}\nfunction findParentElement(tree) {\n    for (let cur = tree && tree.parent; cur; cur = cur.parent)\n        if (cur.name == \"Element\")\n            return cur;\n    return null;\n}\nfunction findLocation(state, pos) {\n    var _a;\n    let at = syntaxTree(state).resolveInner(pos, -1), inTag = null;\n    for (let cur = at; !inTag && cur.parent; cur = cur.parent)\n        if (cur.name == \"OpenTag\" || cur.name == \"CloseTag\" || cur.name == \"SelfClosingTag\" || cur.name == \"MismatchedCloseTag\")\n            inTag = cur;\n    if (inTag && (inTag.to > pos || inTag.lastChild.type.isError)) {\n        let elt = inTag.parent;\n        if (at.name == \"TagName\")\n            return inTag.name == \"CloseTag\" || inTag.name == \"MismatchedCloseTag\"\n                ? { type: \"closeTag\", from: at.from, context: elt }\n                : { type: \"openTag\", from: at.from, context: findParentElement(elt) };\n        if (at.name == \"AttributeName\")\n            return { type: \"attrName\", from: at.from, context: inTag };\n        if (at.name == \"AttributeValue\")\n            return { type: \"attrValue\", from: at.from, context: inTag };\n        let before = at == inTag || at.name == \"Attribute\" ? at.childBefore(pos) : at;\n        if ((before === null || before === void 0 ? void 0 : before.name) == \"StartTag\")\n            return { type: \"openTag\", from: pos, context: findParentElement(elt) };\n        if ((before === null || before === void 0 ? void 0 : before.name) == \"StartCloseTag\" && before.to <= pos)\n            return { type: \"closeTag\", from: pos, context: elt };\n        if ((before === null || before === void 0 ? void 0 : before.name) == \"Is\")\n            return { type: \"attrValue\", from: pos, context: inTag };\n        if (before)\n            return { type: \"attrName\", from: pos, context: inTag };\n        return null;\n    }\n    else if (at.name == \"StartCloseTag\") {\n        return { type: \"closeTag\", from: pos, context: at.parent };\n    }\n    while (at.parent && at.to == pos && !((_a = at.lastChild) === null || _a === void 0 ? void 0 : _a.type.isError))\n        at = at.parent;\n    if (at.name == \"Element\" || at.name == \"Text\" || at.name == \"Document\")\n        return { type: \"tag\", from: pos, context: at.name == \"Element\" ? at : findParentElement(at) };\n    return null;\n}\nclass Element {\n    constructor(spec, attrs, attrValues) {\n        this.attrs = attrs;\n        this.attrValues = attrValues;\n        this.children = [];\n        this.name = spec.name;\n        this.completion = Object.assign(Object.assign({ type: \"type\" }, spec.completion || {}), { label: this.name });\n        this.openCompletion = Object.assign(Object.assign({}, this.completion), { label: \"<\" + this.name });\n        this.closeCompletion = Object.assign(Object.assign({}, this.completion), { label: \"</\" + this.name + \">\", boost: 2 });\n        this.closeNameCompletion = Object.assign(Object.assign({}, this.completion), { label: this.name + \">\" });\n        this.text = spec.textContent ? spec.textContent.map(s => ({ label: s, type: \"text\" })) : [];\n    }\n}\nconst Identifier = /^[:\\-\\.\\w\\u00b7-\\uffff]*$/;\nfunction attrCompletion(spec) {\n    return Object.assign(Object.assign({ type: \"property\" }, spec.completion || {}), { label: spec.name });\n}\nfunction valueCompletion(spec) {\n    return typeof spec == \"string\" ? { label: `\"${spec}\"`, type: \"constant\" }\n        : /^\"/.test(spec.label) ? spec\n            : Object.assign(Object.assign({}, spec), { label: `\"${spec.label}\"` });\n}\n/**\nCreate a completion source for the given schema.\n*/\nfunction completeFromSchema(eltSpecs, attrSpecs) {\n    let allAttrs = [], globalAttrs = [];\n    let attrValues = Object.create(null);\n    for (let s of attrSpecs) {\n        let completion = attrCompletion(s);\n        allAttrs.push(completion);\n        if (s.global)\n            globalAttrs.push(completion);\n        if (s.values)\n            attrValues[s.name] = s.values.map(valueCompletion);\n    }\n    let allElements = [], topElements = [];\n    let byName = Object.create(null);\n    for (let s of eltSpecs) {\n        let attrs = globalAttrs, attrVals = attrValues;\n        if (s.attributes)\n            attrs = attrs.concat(s.attributes.map(s => {\n                if (typeof s == \"string\")\n                    return allAttrs.find(a => a.label == s) || { label: s, type: \"property\" };\n                if (s.values) {\n                    if (attrVals == attrValues)\n                        attrVals = Object.create(attrVals);\n                    attrVals[s.name] = s.values.map(valueCompletion);\n                }\n                return attrCompletion(s);\n            }));\n        let elt = new Element(s, attrs, attrVals);\n        byName[elt.name] = elt;\n        allElements.push(elt);\n        if (s.top)\n            topElements.push(elt);\n    }\n    if (!topElements.length)\n        topElements = allElements;\n    for (let i = 0; i < allElements.length; i++) {\n        let s = eltSpecs[i], elt = allElements[i];\n        if (s.children) {\n            for (let ch of s.children)\n                if (byName[ch])\n                    elt.children.push(byName[ch]);\n        }\n        else {\n            elt.children = allElements;\n        }\n    }\n    return cx => {\n        var _a;\n        let { doc } = cx.state, loc = findLocation(cx.state, cx.pos);\n        if (!loc || (loc.type == \"tag\" && !cx.explicit))\n            return null;\n        let { type, from, context } = loc;\n        if (type == \"openTag\") {\n            let children = topElements;\n            let parentName = elementName(doc, context);\n            if (parentName) {\n                let parent = byName[parentName];\n                children = (parent === null || parent === void 0 ? void 0 : parent.children) || allElements;\n            }\n            return {\n                from,\n                options: children.map(ch => ch.completion),\n                validFor: Identifier\n            };\n        }\n        else if (type == \"closeTag\") {\n            let parentName = elementName(doc, context);\n            return parentName ? {\n                from,\n                to: cx.pos + (doc.sliceString(cx.pos, cx.pos + 1) == \">\" ? 1 : 0),\n                options: [((_a = byName[parentName]) === null || _a === void 0 ? void 0 : _a.closeNameCompletion) || { label: parentName + \">\", type: \"type\" }],\n                validFor: Identifier\n            } : null;\n        }\n        else if (type == \"attrName\") {\n            let parent = byName[tagName(doc, context)];\n            return {\n                from,\n                options: (parent === null || parent === void 0 ? void 0 : parent.attrs) || globalAttrs,\n                validFor: Identifier\n            };\n        }\n        else if (type == \"attrValue\") {\n            let attr = attrName(doc, context, from);\n            if (!attr)\n                return null;\n            let parent = byName[tagName(doc, context)];\n            let values = ((parent === null || parent === void 0 ? void 0 : parent.attrValues) || attrValues)[attr];\n            if (!values || !values.length)\n                return null;\n            return {\n                from,\n                to: cx.pos + (doc.sliceString(cx.pos, cx.pos + 1) == '\"' ? 1 : 0),\n                options: values,\n                validFor: /^\"[^\"]*\"?$/\n            };\n        }\n        else if (type == \"tag\") {\n            let parentName = elementName(doc, context), parent = byName[parentName];\n            let closing = [], last = context && context.lastChild;\n            if (parentName && (!last || last.name != \"CloseTag\" || tagName(doc, last) != parentName))\n                closing.push(parent ? parent.closeCompletion : { label: \"</\" + parentName + \">\", type: \"type\", boost: 2 });\n            let options = closing.concat(((parent === null || parent === void 0 ? void 0 : parent.children) || (context ? allElements : topElements)).map(e => e.openCompletion));\n            if (context && (parent === null || parent === void 0 ? void 0 : parent.text.length)) {\n                let openTag = context.firstChild;\n                if (openTag.to > cx.pos - 20 && !/\\S/.test(cx.state.sliceDoc(openTag.to, cx.pos)))\n                    options = options.concat(parent.text);\n            }\n            return {\n                from,\n                options,\n                validFor: /^<\\/?[:\\-\\.\\w\\u00b7-\\uffff]*$/\n            };\n        }\n        else {\n            return null;\n        }\n    };\n}\n\n/**\nA language provider based on the [Lezer XML\nparser](https://github.com/lezer-parser/xml), extended with\nhighlighting and indentation information.\n*/\nconst xmlLanguage = /*@__PURE__*/LRLanguage.define({\n    name: \"xml\",\n    parser: /*@__PURE__*/parser.configure({\n        props: [\n            /*@__PURE__*/indentNodeProp.add({\n                Element(context) {\n                    let closed = /^\\s*<\\//.test(context.textAfter);\n                    return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);\n                },\n                \"OpenTag CloseTag SelfClosingTag\"(context) {\n                    return context.column(context.node.from) + context.unit;\n                }\n            }),\n            /*@__PURE__*/foldNodeProp.add({\n                Element(subtree) {\n                    let first = subtree.firstChild, last = subtree.lastChild;\n                    if (!first || first.name != \"OpenTag\")\n                        return null;\n                    return { from: first.to, to: last.name == \"CloseTag\" ? last.from : subtree.to };\n                }\n            }),\n            /*@__PURE__*/bracketMatchingHandle.add({\n                \"OpenTag CloseTag\": node => node.getChild(\"TagName\")\n            })\n        ]\n    }),\n    languageData: {\n        commentTokens: { block: { open: \"<!--\", close: \"-->\" } },\n        indentOnInput: /^\\s*<\\/$/\n    }\n});\n/**\nXML language support. Includes schema-based autocompletion when\nconfigured.\n*/\nfunction xml(conf = {}) {\n    return new LanguageSupport(xmlLanguage, xmlLanguage.data.of({\n        autocomplete: completeFromSchema(conf.elements || [], conf.attributes || [])\n    }));\n}\n\nexport { completeFromSchema, xml, xmlLanguage };\n"],"names":["cachedName","cachedInput","cachedPos","tagNameAfter","input","offset","ch","pos","peek","name","next","String","fromCharCode","ElementContext","parent","hash","i","length","charCodeAt","elementContext","dist","IK","start","shift","context","term","stack","reduce","reuse","node","_stack","type","id","strict","startTag","Jq","advance","acceptToken","cx","contextual","scanTo","end","endPos","len","commentContent","piContent","cdataContent","xmlHighlighting","highlight_dist","Gv","Text","pJ","content","angleBracket","TagName","tagName","invalid","AttributeName","attributeName","AttributeValue","attributeValue","Is","definitionOperator","character","Comment","blockComment","ProcessingInst","processingInstruction","DoctypeDecl","documentMeta","Cdata","special","string","parser","WQ","deserialize","version","states","stateData","goto","nodeNames","maxTerm","nodeProps","propSources","skippedNodes","repeatNodeCount","tokenData","tokenizers","topRules","tokenPrec","doc","tag","getChild","sliceString","from","to","elementName","tree","firstChild","findParentElement","cur","dist_Element","constructor","spec","attrs","attrValues","children","completion","Object","assign","label","openCompletion","closeCompletion","boost","closeNameCompletion","text","textContent","map","s","Identifier","attrCompletion","valueCompletion","test","completeFromSchema","eltSpecs","attrSpecs","allAttrs","globalAttrs","create","push","global","values","allElements","topElements","byName","attrVals","attributes","concat","find","a","elt","top","_a","state","loc","findLocation","at","language_dist","qz","resolveInner","inTag","lastChild","isError","before","childBefore","explicit","parentName","options","validFor","attr","getChildren","closing","last","e","openTag","sliceDoc","xmlLanguage","qp","define","configure","props","uj","add","Element","closed","textAfter","lineIndent","unit","column","x0","subtree","first","a0","languageData","commentTokens","block","open","close","indentOnInput","xml","conf","ri","data","of","autocomplete","elements"],"sourceRoot":""}