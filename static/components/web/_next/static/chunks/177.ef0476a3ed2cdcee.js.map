{"version":3,"file":"static/chunks/177.ef0476a3ed2cdcee.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/textile.js","webpack://_N_E/<anon>"],"sourcesContent":["var TOKEN_STYLES = {\n  addition: \"inserted\",\n  attributes: \"propertyName\",\n  bold: \"strong\",\n  cite: \"keyword\",\n  code: \"monospace\",\n  definitionList: \"list\",\n  deletion: \"deleted\",\n  div: \"punctuation\",\n  em: \"emphasis\",\n  footnote: \"variable\",\n  footCite: \"qualifier\",\n  header: \"heading\",\n  html: \"comment\",\n  image: \"atom\",\n  italic: \"emphasis\",\n  link: \"link\",\n  linkDefinition: \"link\",\n  list1: \"list\",\n  list2: \"list.special\",\n  list3: \"list\",\n  notextile: \"string.special\",\n  pre: \"operator\",\n  p: \"content\",\n  quote: \"bracket\",\n  span: \"quote\",\n  specialChar: \"character\",\n  strong: \"strong\",\n  sub: \"content.special\",\n  sup: \"content.special\",\n  table: \"variableName.special\",\n  tableHeading: \"operator\"\n};\n\nfunction startNewLine(stream, state) {\n  state.mode = Modes.newLayout;\n  state.tableHeading = false;\n\n  if (state.layoutType === \"definitionList\" && state.spanningLayout &&\n      stream.match(RE(\"definitionListEnd\"), false))\n    state.spanningLayout = false;\n}\n\nfunction handlePhraseModifier(stream, state, ch) {\n  if (ch === \"_\") {\n    if (stream.eat(\"_\"))\n      return togglePhraseModifier(stream, state, \"italic\", /__/, 2);\n    else\n      return togglePhraseModifier(stream, state, \"em\", /_/, 1);\n  }\n\n  if (ch === \"*\") {\n    if (stream.eat(\"*\")) {\n      return togglePhraseModifier(stream, state, \"bold\", /\\*\\*/, 2);\n    }\n    return togglePhraseModifier(stream, state, \"strong\", /\\*/, 1);\n  }\n\n  if (ch === \"[\") {\n    if (stream.match(/\\d+\\]/)) state.footCite = true;\n    return tokenStyles(state);\n  }\n\n  if (ch === \"(\") {\n    var spec = stream.match(/^(r|tm|c)\\)/);\n    if (spec)\n      return TOKEN_STYLES.specialChar\n  }\n\n  if (ch === \"<\" && stream.match(/(\\w+)[^>]+>[^<]+<\\/\\1>/))\n    return TOKEN_STYLES.html\n\n  if (ch === \"?\" && stream.eat(\"?\"))\n    return togglePhraseModifier(stream, state, \"cite\", /\\?\\?/, 2);\n\n  if (ch === \"=\" && stream.eat(\"=\"))\n    return togglePhraseModifier(stream, state, \"notextile\", /==/, 2);\n\n  if (ch === \"-\" && !stream.eat(\"-\"))\n    return togglePhraseModifier(stream, state, \"deletion\", /-/, 1);\n\n  if (ch === \"+\")\n    return togglePhraseModifier(stream, state, \"addition\", /\\+/, 1);\n\n  if (ch === \"~\")\n    return togglePhraseModifier(stream, state, \"sub\", /~/, 1);\n\n  if (ch === \"^\")\n    return togglePhraseModifier(stream, state, \"sup\", /\\^/, 1);\n\n  if (ch === \"%\")\n    return togglePhraseModifier(stream, state, \"span\", /%/, 1);\n\n  if (ch === \"@\")\n    return togglePhraseModifier(stream, state, \"code\", /@/, 1);\n\n  if (ch === \"!\") {\n    var type = togglePhraseModifier(stream, state, \"image\", /(?:\\([^\\)]+\\))?!/, 1);\n    stream.match(/^:\\S+/); // optional Url portion\n    return type;\n  }\n  return tokenStyles(state);\n}\n\nfunction togglePhraseModifier(stream, state, phraseModifier, closeRE, openSize) {\n  var charBefore = stream.pos > openSize ? stream.string.charAt(stream.pos - openSize - 1) : null;\n  var charAfter = stream.peek();\n  if (state[phraseModifier]) {\n    if ((!charAfter || /\\W/.test(charAfter)) && charBefore && /\\S/.test(charBefore)) {\n      var type = tokenStyles(state);\n      state[phraseModifier] = false;\n      return type;\n    }\n  } else if ((!charBefore || /\\W/.test(charBefore)) && charAfter && /\\S/.test(charAfter) &&\n             stream.match(new RegExp(\"^.*\\\\S\" + closeRE.source + \"(?:\\\\W|$)\"), false)) {\n    state[phraseModifier] = true;\n    state.mode = Modes.attributes;\n  }\n  return tokenStyles(state);\n};\n\nfunction tokenStyles(state) {\n  var disabled = textileDisabled(state);\n  if (disabled) return disabled;\n\n  var styles = [];\n  if (state.layoutType) styles.push(TOKEN_STYLES[state.layoutType]);\n\n  styles = styles.concat(activeStyles(\n    state, \"addition\", \"bold\", \"cite\", \"code\", \"deletion\", \"em\", \"footCite\",\n    \"image\", \"italic\", \"link\", \"span\", \"strong\", \"sub\", \"sup\", \"table\", \"tableHeading\"));\n\n  if (state.layoutType === \"header\")\n    styles.push(TOKEN_STYLES.header + \"-\" + state.header);\n\n  return styles.length ? styles.join(\" \") : null;\n}\n\nfunction textileDisabled(state) {\n  var type = state.layoutType;\n\n  switch(type) {\n  case \"notextile\":\n  case \"code\":\n  case \"pre\":\n    return TOKEN_STYLES[type];\n  default:\n    if (state.notextile)\n      return TOKEN_STYLES.notextile + (type ? (\" \" + TOKEN_STYLES[type]) : \"\");\n    return null;\n  }\n}\n\nfunction activeStyles(state) {\n  var styles = [];\n  for (var i = 1; i < arguments.length; ++i) {\n    if (state[arguments[i]])\n      styles.push(TOKEN_STYLES[arguments[i]]);\n  }\n  return styles;\n}\n\nfunction blankLine(state) {\n  var spanningLayout = state.spanningLayout, type = state.layoutType;\n\n  for (var key in state) if (state.hasOwnProperty(key))\n    delete state[key];\n\n  state.mode = Modes.newLayout;\n  if (spanningLayout) {\n    state.layoutType = type;\n    state.spanningLayout = true;\n  }\n}\n\nvar REs = {\n  cache: {},\n  single: {\n    bc: \"bc\",\n    bq: \"bq\",\n    definitionList: /- .*?:=+/,\n    definitionListEnd: /.*=:\\s*$/,\n    div: \"div\",\n    drawTable: /\\|.*\\|/,\n    foot: /fn\\d+/,\n    header: /h[1-6]/,\n    html: /\\s*<(?:\\/)?(\\w+)(?:[^>]+)?>(?:[^<]+<\\/\\1>)?/,\n    link: /[^\"]+\":\\S/,\n    linkDefinition: /\\[[^\\s\\]]+\\]\\S+/,\n    list: /(?:#+|\\*+)/,\n    notextile: \"notextile\",\n    para: \"p\",\n    pre: \"pre\",\n    table: \"table\",\n    tableCellAttributes: /[\\/\\\\]\\d+/,\n    tableHeading: /\\|_\\./,\n    tableText: /[^\"_\\*\\[\\(\\?\\+~\\^%@|-]+/,\n    text: /[^!\"_=\\*\\[\\(<\\?\\+~\\^%@-]+/\n  },\n  attributes: {\n    align: /(?:<>|<|>|=)/,\n    selector: /\\([^\\(][^\\)]+\\)/,\n    lang: /\\[[^\\[\\]]+\\]/,\n    pad: /(?:\\(+|\\)+){1,2}/,\n    css: /\\{[^\\}]+\\}/\n  },\n  createRe: function(name) {\n    switch (name) {\n    case \"drawTable\":\n      return REs.makeRe(\"^\", REs.single.drawTable, \"$\");\n    case \"html\":\n      return REs.makeRe(\"^\", REs.single.html, \"(?:\", REs.single.html, \")*\", \"$\");\n    case \"linkDefinition\":\n      return REs.makeRe(\"^\", REs.single.linkDefinition, \"$\");\n    case \"listLayout\":\n      return REs.makeRe(\"^\", REs.single.list, RE(\"allAttributes\"), \"*\\\\s+\");\n    case \"tableCellAttributes\":\n      return REs.makeRe(\"^\", REs.choiceRe(REs.single.tableCellAttributes,\n                                          RE(\"allAttributes\")), \"+\\\\.\");\n    case \"type\":\n      return REs.makeRe(\"^\", RE(\"allTypes\"));\n    case \"typeLayout\":\n      return REs.makeRe(\"^\", RE(\"allTypes\"), RE(\"allAttributes\"),\n                        \"*\\\\.\\\\.?\", \"(\\\\s+|$)\");\n    case \"attributes\":\n      return REs.makeRe(\"^\", RE(\"allAttributes\"), \"+\");\n\n    case \"allTypes\":\n      return REs.choiceRe(REs.single.div, REs.single.foot,\n                          REs.single.header, REs.single.bc, REs.single.bq,\n                          REs.single.notextile, REs.single.pre, REs.single.table,\n                          REs.single.para);\n\n    case \"allAttributes\":\n      return REs.choiceRe(REs.attributes.selector, REs.attributes.css,\n                          REs.attributes.lang, REs.attributes.align, REs.attributes.pad);\n\n    default:\n      return REs.makeRe(\"^\", REs.single[name]);\n    }\n  },\n  makeRe: function() {\n    var pattern = \"\";\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      pattern += (typeof arg === \"string\") ? arg : arg.source;\n    }\n    return new RegExp(pattern);\n  },\n  choiceRe: function() {\n    var parts = [arguments[0]];\n    for (var i = 1; i < arguments.length; ++i) {\n      parts[i * 2 - 1] = \"|\";\n      parts[i * 2] = arguments[i];\n    }\n\n    parts.unshift(\"(?:\");\n    parts.push(\")\");\n    return REs.makeRe.apply(null, parts);\n  }\n};\n\nfunction RE(name) {\n  return (REs.cache[name] || (REs.cache[name] = REs.createRe(name)));\n}\n\nvar Modes = {\n  newLayout: function(stream, state) {\n    if (stream.match(RE(\"typeLayout\"), false)) {\n      state.spanningLayout = false;\n      return (state.mode = Modes.blockType)(stream, state);\n    }\n    var newMode;\n    if (!textileDisabled(state)) {\n      if (stream.match(RE(\"listLayout\"), false))\n        newMode = Modes.list;\n      else if (stream.match(RE(\"drawTable\"), false))\n        newMode = Modes.table;\n      else if (stream.match(RE(\"linkDefinition\"), false))\n        newMode = Modes.linkDefinition;\n      else if (stream.match(RE(\"definitionList\")))\n        newMode = Modes.definitionList;\n      else if (stream.match(RE(\"html\"), false))\n        newMode = Modes.html;\n    }\n    return (state.mode = (newMode || Modes.text))(stream, state);\n  },\n\n  blockType: function(stream, state) {\n    var match, type;\n    state.layoutType = null;\n\n    if (match = stream.match(RE(\"type\")))\n      type = match[0];\n    else\n      return (state.mode = Modes.text)(stream, state);\n\n    if (match = type.match(RE(\"header\"))) {\n      state.layoutType = \"header\";\n      state.header = parseInt(match[0][1]);\n    } else if (type.match(RE(\"bq\"))) {\n      state.layoutType = \"quote\";\n    } else if (type.match(RE(\"bc\"))) {\n      state.layoutType = \"code\";\n    } else if (type.match(RE(\"foot\"))) {\n      state.layoutType = \"footnote\";\n    } else if (type.match(RE(\"notextile\"))) {\n      state.layoutType = \"notextile\";\n    } else if (type.match(RE(\"pre\"))) {\n      state.layoutType = \"pre\";\n    } else if (type.match(RE(\"div\"))) {\n      state.layoutType = \"div\";\n    } else if (type.match(RE(\"table\"))) {\n      state.layoutType = \"table\";\n    }\n\n    state.mode = Modes.attributes;\n    return tokenStyles(state);\n  },\n\n  text: function(stream, state) {\n    if (stream.match(RE(\"text\"))) return tokenStyles(state);\n\n    var ch = stream.next();\n    if (ch === '\"')\n      return (state.mode = Modes.link)(stream, state);\n    return handlePhraseModifier(stream, state, ch);\n  },\n\n  attributes: function(stream, state) {\n    state.mode = Modes.layoutLength;\n\n    if (stream.match(RE(\"attributes\")))\n      return TOKEN_STYLES.attributes\n    else\n      return tokenStyles(state);\n  },\n\n  layoutLength: function(stream, state) {\n    if (stream.eat(\".\") && stream.eat(\".\"))\n      state.spanningLayout = true;\n\n    state.mode = Modes.text;\n    return tokenStyles(state);\n  },\n\n  list: function(stream, state) {\n    var match = stream.match(RE(\"list\"));\n    state.listDepth = match[0].length;\n    var listMod = (state.listDepth - 1) % 3;\n    if (!listMod)\n      state.layoutType = \"list1\";\n    else if (listMod === 1)\n      state.layoutType = \"list2\";\n    else\n      state.layoutType = \"list3\";\n\n    state.mode = Modes.attributes;\n    return tokenStyles(state);\n  },\n\n  link: function(stream, state) {\n    state.mode = Modes.text;\n    if (stream.match(RE(\"link\"))) {\n      stream.match(/\\S+/);\n      return TOKEN_STYLES.link\n    }\n    return tokenStyles(state);\n  },\n\n  linkDefinition: function(stream) {\n    stream.skipToEnd();\n    return TOKEN_STYLES.linkDefinition\n  },\n\n  definitionList: function(stream, state) {\n    stream.match(RE(\"definitionList\"));\n\n    state.layoutType = \"definitionList\";\n\n    if (stream.match(/\\s*$/))\n      state.spanningLayout = true;\n    else\n      state.mode = Modes.attributes;\n\n    return tokenStyles(state);\n  },\n\n  html: function(stream) {\n    stream.skipToEnd();\n    return TOKEN_STYLES.html\n  },\n\n  table: function(stream, state) {\n    state.layoutType = \"table\";\n    return (state.mode = Modes.tableCell)(stream, state);\n  },\n\n  tableCell: function(stream, state) {\n    if (stream.match(RE(\"tableHeading\")))\n      state.tableHeading = true;\n    else\n      stream.eat(\"|\");\n\n    state.mode = Modes.tableCellAttributes;\n    return tokenStyles(state);\n  },\n\n  tableCellAttributes: function(stream, state) {\n    state.mode = Modes.tableText;\n\n    if (stream.match(RE(\"tableCellAttributes\")))\n      return TOKEN_STYLES.attributes\n    else\n      return tokenStyles(state);\n  },\n\n  tableText: function(stream, state) {\n    if (stream.match(RE(\"tableText\")))\n      return tokenStyles(state);\n\n    if (stream.peek() === \"|\") { // end of cell\n      state.mode = Modes.tableCell;\n      return tokenStyles(state);\n    }\n    return handlePhraseModifier(stream, state, stream.next());\n  }\n};\n\nexport const textile = {\n  name: \"textile\",\n  startState: function() {\n    return { mode: Modes.newLayout };\n  },\n  token: function(stream, state) {\n    if (stream.sol()) startNewLine(stream, state);\n    return state.mode(stream, state);\n  },\n  blankLine: blankLine\n};\n"],"names":["TOKEN_STYLES","addition","attributes","bold","cite","code","definitionList","deletion","div","em","footnote","footCite","header","html","image","italic","link","linkDefinition","list1","list2","list3","notextile","pre","p","quote","span","specialChar","strong","sub","sup","table","tableHeading","handlePhraseModifier","stream","state","ch","eat","togglePhraseModifier","match","tokenStyles","type","phraseModifier","closeRE","openSize","charBefore","pos","string","charAt","charAfter","peek","test","source","mode","Modes","disabled","textileDisabled","styles","layoutType","push","concat","activeStyles","i","arguments","length","join","REs","cache","single","bc","bq","definitionListEnd","drawTable","foot","list","para","tableCellAttributes","tableText","text","align","selector","lang","pad","css","createRe","name","makeRe","RE","choiceRe","pattern","arg","parts","unshift","apply","newLayout","newMode","spanningLayout","blockType","parseInt","next","layoutLength","listDepth","listMod","skipToEnd","tableCell","textile","startState","token","sol","startNewLine","blankLine","key","hasOwnProperty"],"sourceRoot":""}