{"version":3,"file":"static/chunks/3283.6ab830108fc33843.js","mappings":"mGAAA,SAAAA,EAAAC,CAAA,EACA,oBAAAA,EAAAC,IAAA,gBACA,6CAEA,IAAAC,EAAA,uCACAC,EAAA,iCACAC,EAAA,oEACAC,EAAA,+DACAC,EAAA,yBACAC,EAAA,oBACAC,EAAA,8CAEAC,EAAAV,EAAA,CACA,2DACA,wEACA,yEACA,4EACA,gFACA,6EACA,uEACA,EAEAW,EAAAX,EAAA,CACA,qEACA,mFACA,sFACA,iBACA,EAIA,SAAAY,EAAAC,CAAA,CAAAC,CAAA,SACA,EAAAC,GAAA,IAAAF,MAAAA,EAAAG,IAAA,IAKAF,EAAAG,QAAA,CAAAC,EACAA,EAAAL,EAAAC,KALAD,EAAAM,IAAA,GACAL,EAAAG,QAAA,CAAAC,EACA,WACA,CAMA,SAAAE,EAAAP,CAAA,CAAAC,CAAA,SACA,EAAAO,KAAA,WACAP,EAAAG,QAAA,CAAAC,EACA,YAEAL,EAAAS,SAAA,GACA,UAFA,CAKA,SAAAJ,EAAAL,CAAA,CAAAC,CAAA,EAEA,GAAAD,EAAAU,QAAA,eAGA,GAAAV,EAAAQ,KAAA,OAGA,OAFAP,EAAAG,QAAA,CAAAG,EACAP,EAAAS,SAAA,GACA,SACA,CAEA,GAAAT,EAAAQ,KAAA,UAEA,OADAR,EAAAS,SAAA,GACA,SACA,CAGA,GAAAT,EAAAQ,KAAA,mBACA,GAAAR,EAAAQ,KAAA,8BAEA,OADAR,EAAAI,QAAA,CAAAC,EACA,SACA,GAAAL,EAAAQ,KAAA,0CACAR,EAAAQ,KAAA,oCADgE,eAEhE,GACAR,EAAAQ,KAAA,CAAArB,EAAA,4BAA6D,eAG7D,IAAAwB,EAAAX,EAAAQ,KAAA,yBAAAR,EAAAQ,KAAA,+BACA,EAAWG,CAAA,qBAGXX,EAAAQ,KAAA,CAAAV,GAAgC,UAChCE,EAAAQ,KAAA,CAAAX,GAAgC,UAChCG,EAAAQ,KAAA,CAAAZ,GAAmC,WAEnCI,EAAAQ,KAAA,CAAAlB,IAAAU,EAAAQ,KAAA,CAAAhB,GAAwE,WACxEQ,EAAAQ,KAAA,CAAAjB,IAAAS,EAAAQ,KAAA,CAAAf,IAAAO,EAAAQ,KAAA,CAAAd,GAA4G,KAE5GM,EAAAQ,KAAA,CAAAb,IACAM,EAAAG,QAAA,CAAAL,EACA,OAKAC,EAAAM,IAAA,GACA,QAlBW,CAsBJ,IAAAM,EAAA,CACPC,KAAA,SAEAC,WAAA,WACA,OACAV,SAAAC,CACA,CACA,EAEAU,MAAA,SAAAf,CAAA,CAAAC,CAAA,EACA,IAAAe,EAAAf,EAAAG,QAAA,CAAAJ,EAAAC,GAIA,MAHAe,CAAAA,WAAAA,GAAAA,aAAAA,CAAA,GACAf,CAAAA,EAAAG,QAAA,CAAAL,CAAA,EAEAiB,CACA,EAEAC,aAAA,CACAC,cAAA,CAAoBC,KAAA,IACpB,CACA","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/octave.js","webpack://_N_E/<anon>"],"sourcesContent":["function wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n}\n\nvar singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/&|\\\\^~<>!@'\\\\\\\\]\");\nvar singleDelimiters = new RegExp('^[\\\\(\\\\[\\\\{\\\\},:=;\\\\.]');\nvar doubleOperators = new RegExp(\"^((==)|(~=)|(<=)|(>=)|(<<)|(>>)|(\\\\.[\\\\+\\\\-\\\\*/\\\\^\\\\\\\\]))\");\nvar doubleDelimiters = new RegExp(\"^((!=)|(\\\\+=)|(\\\\-=)|(\\\\*=)|(/=)|(&=)|(\\\\|=)|(\\\\^=))\");\nvar tripleDelimiters = new RegExp(\"^((>>=)|(<<=))\");\nvar expressionEnd = new RegExp(\"^[\\\\]\\\\)]\");\nvar identifiers = new RegExp(\"^[_A-Za-z\\xa1-\\uffff][_A-Za-z0-9\\xa1-\\uffff]*\");\n\nvar builtins = wordRegexp([\n  'error', 'eval', 'function', 'abs', 'acos', 'atan', 'asin', 'cos',\n  'cosh', 'exp', 'log', 'prod', 'sum', 'log10', 'max', 'min', 'sign', 'sin', 'sinh',\n  'sqrt', 'tan', 'reshape', 'break', 'zeros', 'default', 'margin', 'round', 'ones',\n  'rand', 'syn', 'ceil', 'floor', 'size', 'clear', 'zeros', 'eye', 'mean', 'std', 'cov',\n  'det', 'eig', 'inv', 'norm', 'rank', 'trace', 'expm', 'logm', 'sqrtm', 'linspace', 'plot',\n  'title', 'xlabel', 'ylabel', 'legend', 'text', 'grid', 'meshgrid', 'mesh', 'num2str',\n  'fft', 'ifft', 'arrayfun', 'cellfun', 'input', 'fliplr', 'flipud', 'ismember'\n]);\n\nvar keywords = wordRegexp([\n  'return', 'case', 'switch', 'else', 'elseif', 'end', 'endif', 'endfunction',\n  'if', 'otherwise', 'do', 'for', 'while', 'try', 'catch', 'classdef', 'properties', 'events',\n  'methods', 'global', 'persistent', 'endfor', 'endwhile', 'printf', 'sprintf', 'disp', 'until',\n  'continue', 'pkg'\n]);\n\n\n// tokenizers\nfunction tokenTranspose(stream, state) {\n  if (!stream.sol() && stream.peek() === '\\'') {\n    stream.next();\n    state.tokenize = tokenBase;\n    return 'operator';\n  }\n  state.tokenize = tokenBase;\n  return tokenBase(stream, state);\n}\n\n\nfunction tokenComment(stream, state) {\n  if (stream.match(/^.*%}/)) {\n    state.tokenize = tokenBase;\n    return 'comment';\n  };\n  stream.skipToEnd();\n  return 'comment';\n}\n\nfunction tokenBase(stream, state) {\n  // whitespaces\n  if (stream.eatSpace()) return null;\n\n  // Handle one line Comments\n  if (stream.match('%{')){\n    state.tokenize = tokenComment;\n    stream.skipToEnd();\n    return 'comment';\n  }\n\n  if (stream.match(/^[%#]/)){\n    stream.skipToEnd();\n    return 'comment';\n  }\n\n  // Handle Number Literals\n  if (stream.match(/^[0-9\\.+-]/, false)) {\n    if (stream.match(/^[+-]?0x[0-9a-fA-F]+[ij]?/)) {\n      stream.tokenize = tokenBase;\n      return 'number'; };\n    if (stream.match(/^[+-]?\\d*\\.\\d+([EeDd][+-]?\\d+)?[ij]?/)) { return 'number'; };\n    if (stream.match(/^[+-]?\\d+([EeDd][+-]?\\d+)?[ij]?/)) { return 'number'; };\n  }\n  if (stream.match(wordRegexp(['nan','NaN','inf','Inf']))) { return 'number'; };\n\n  // Handle Strings\n  var m = stream.match(/^\"(?:[^\"]|\"\")*(\"|$)/) || stream.match(/^'(?:[^']|'')*('|$)/)\n  if (m) { return m[1] ? 'string' : \"error\"; }\n\n  // Handle words\n  if (stream.match(keywords)) { return 'keyword'; } ;\n  if (stream.match(builtins)) { return 'builtin'; } ;\n  if (stream.match(identifiers)) { return 'variable'; } ;\n\n  if (stream.match(singleOperators) || stream.match(doubleOperators)) { return 'operator'; };\n  if (stream.match(singleDelimiters) || stream.match(doubleDelimiters) || stream.match(tripleDelimiters)) { return null; };\n\n  if (stream.match(expressionEnd)) {\n    state.tokenize = tokenTranspose;\n    return null;\n  };\n\n\n  // Handle non-detected items\n  stream.next();\n  return 'error';\n};\n\n\nexport const octave = {\n  name: \"octave\",\n\n  startState: function() {\n    return {\n      tokenize: tokenBase\n    };\n  },\n\n  token: function(stream, state) {\n    var style = state.tokenize(stream, state);\n    if (style === 'number' || style === 'variable'){\n      state.tokenize = tokenTranspose;\n    }\n    return style;\n  },\n\n  languageData: {\n    commentTokens: {line: \"%\"}\n  }\n};\n\n"],"names":["wordRegexp","words","join","singleOperators","singleDelimiters","doubleOperators","doubleDelimiters","tripleDelimiters","expressionEnd","identifiers","builtins","keywords","tokenTranspose","stream","state","sol","peek","tokenize","tokenBase","next","tokenComment","match","skipToEnd","eatSpace","m","octave","name","startState","token","style","languageData","commentTokens","line"],"sourceRoot":""}