{"version":3,"file":"static/chunks/758.973c9ee5ebedd7c6.js","mappings":"kGAAA,SAAAA,EAAAC,CAAA,MA0EAC,EAzEA,OACAC,KAAA,SACAC,WAAAC,EACAC,UAAAC,EACAC,KAAA,EAqEAN,EArEAD,EAsEA,SAAAQ,CAAA,CAAAC,CAAA,EACA,GAAAD,EAAAE,KAAA,CAAAC,EAAAV,EAAAW,QAAA,SACA,eACA,CAEA,IAAAH,EAAAI,SAAA,EACA,GAAAL,EAAAE,KAAA,uBAEA,OADAD,EAAAI,SAAA,IACA,SACA,CACA,GAAAL,EAAAE,KAAA,CAAAC,EAAAV,EAAAa,aAAA,SAEA,OADAN,EAAAO,SAAA,GACA,SACA,CACA,GACAN,EAAAI,SAAA,CAKA,OAJAL,EAAAE,KAAA,uBACAD,EAAAI,SAAA,IAEAL,EAAAO,SAAA,GACA,SACA,CAEA,IAAAN,EAAAO,QAAA,EAAAR,EAAAE,KAAA,0BAEA,OADAD,EAAAO,QAAA,IACA,QACA,CACA,GAAAP,EAAAO,QAAA,CAKA,OAJAR,EAAAE,KAAA,mBACAD,EAAAO,QAAA,IAEAR,EAAAO,SAAA,GACA,QACA,CAEA,GAAAd,EAAAgB,QAAA,EAAAT,EAAAE,KAAA,CAAAQ,EAAAjB,EAAAgB,QAAA,UAGAT,EAAAE,KAAA,CAAAQ,EAAAjB,EAAAkB,OAAA,UAGAX,EAAAE,KAAA,CAAAQ,EAAAjB,EAAAmB,SAAA,UAGAZ,EAAAE,KAAA,CAAAC,EAAAV,EAAAoB,UAAA,SARA,gBAWA,KAAAC,SAAA,EAAAd,EAAAE,KAAA,CAAAC,EAAAV,EAAAqB,SAAA,SACA,iBAEA,KAAAC,SAAA,EAAAf,EAAAE,KAAA,CAAAC,EAAAV,EAAAsB,SAAA,SACA,iBAGA,IAAAtB,EAAAuB,eAAA,EAAAvB,EAAAwB,UAAA,EAAAjB,EAAAE,KAAA,YAEA,OADAT,EAAAuB,eAAA,IACA,SACA,CACA,GAAAvB,EAAAuB,eAAA,EACA,GAAAvB,IAAA,GAAAA,EAAAwB,UAAA,EAAAjB,EAAAE,KAAA,CAAAQ,EAAAjB,EAAAwB,UAAA,SACA,iBACA,CACA,GAAAjB,EAAAE,KAAA,YAEA,OADAT,EAAAuB,eAAA,IACA,SACA,CACA,OAEAhB,EAAAkB,IAAA,GACA,OA1IAC,aAAA,CACAC,cAAA,CAAsBC,KAAA,IAAAC,MAAA,CAAmBC,KAAA,KAAAC,MAAA,MACzC,CACA,CACA,kGAEO,IAAAC,EAAAlC,EAAA,CACP,iBACA,wDACA,sCACA,kOACA,gBAAoB,MAAO,CAC3B,uCACA,kKACA,yBACA,kBAGOmC,EAAAnC,EAAA,CACP,cACA,uFACA,6CACA,gBACA,gBAAoB,MAAO,CAC3B,wJACA,kKACA,yBACA,kBAGOoC,EAAApC,EAAA,CACP,sBACA,uFACA,6CACA,+QACA,gBAAoB,MAAO,CAC3B,wJACA,kKACA,yBACA,kBAGA,SAAAmB,EAAAkB,CAAA,EACA,sBAAAA,EAAAC,IAAA,iBACA,CAEA,SAAA1B,EAAAyB,CAAA,EACA,qBAAAA,EAAAC,IAAA,cACA,CAEA,SAAAjC,GAAA,CACA,OACAS,UAAA,GACAG,SAAA,GACAQ,gBAAA,GACAc,SAAA,EACA,CACA,CAEA,SAAAhC,EAAAG,CAAA,EACA,OACAI,UAAAJ,EAAAI,SAAA,CACAG,SAAAP,EAAAO,QAAA,CACAQ,gBAAAf,EAAAe,eAAA,CACAc,SAAA7B,EAAA6B,QAAA,CAEA","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/mscgen.js","webpack://_N_E/<anon>"],"sourcesContent":["function mkParser(lang) {\n  return {\n    name: \"mscgen\",\n    startState: startStateFn,\n    copyState: copyStateFn,\n    token: produceTokenFunction(lang),\n    languageData: {\n      commentTokens: {line: \"#\", block: {open: \"/*\", close: \"*/\"}}\n    }\n  }\n}\n\nexport const mscgen = mkParser({\n  \"keywords\" : [\"msc\"],\n  \"options\" : [\"hscale\", \"width\", \"arcgradient\", \"wordwraparcs\"],\n  \"constants\" : [\"true\", \"false\", \"on\", \"off\"],\n  \"attributes\" : [\"label\", \"idurl\", \"id\", \"url\", \"linecolor\", \"linecolour\", \"textcolor\", \"textcolour\", \"textbgcolor\", \"textbgcolour\", \"arclinecolor\", \"arclinecolour\", \"arctextcolor\", \"arctextcolour\", \"arctextbgcolor\", \"arctextbgcolour\", \"arcskip\"],\n  \"brackets\" : [\"\\\\{\", \"\\\\}\"], // [ and  ] are brackets too, but these get handled in with lists\n  \"arcsWords\" : [\"note\", \"abox\", \"rbox\", \"box\"],\n  \"arcsOthers\" : [\"\\\\|\\\\|\\\\|\", \"\\\\.\\\\.\\\\.\", \"---\", \"--\", \"<->\", \"==\", \"<<=>>\", \"<=>\", \"\\\\.\\\\.\", \"<<>>\", \"::\", \"<:>\", \"->\", \"=>>\", \"=>\", \">>\", \":>\", \"<-\", \"<<=\", \"<=\", \"<<\", \"<:\", \"x-\", \"-x\"],\n  \"singlecomment\" : [\"//\", \"#\"],\n  \"operators\" : [\"=\"]\n})\n\nexport const msgenny = mkParser({\n  \"keywords\" : null,\n  \"options\" : [\"hscale\", \"width\", \"arcgradient\", \"wordwraparcs\", \"wordwrapentities\", \"watermark\"],\n  \"constants\" : [\"true\", \"false\", \"on\", \"off\", \"auto\"],\n  \"attributes\" : null,\n  \"brackets\" : [\"\\\\{\", \"\\\\}\"],\n  \"arcsWords\" : [\"note\", \"abox\", \"rbox\", \"box\", \"alt\", \"else\", \"opt\", \"break\", \"par\", \"seq\", \"strict\", \"neg\", \"critical\", \"ignore\", \"consider\", \"assert\", \"loop\", \"ref\", \"exc\"],\n  \"arcsOthers\" : [\"\\\\|\\\\|\\\\|\", \"\\\\.\\\\.\\\\.\", \"---\", \"--\", \"<->\", \"==\", \"<<=>>\", \"<=>\", \"\\\\.\\\\.\", \"<<>>\", \"::\", \"<:>\", \"->\", \"=>>\", \"=>\", \">>\", \":>\", \"<-\", \"<<=\", \"<=\", \"<<\", \"<:\", \"x-\", \"-x\"],\n  \"singlecomment\" : [\"//\", \"#\"],\n  \"operators\" : [\"=\"]\n})\n\nexport const xu = mkParser({\n  \"keywords\" : [\"msc\", \"xu\"],\n  \"options\" : [\"hscale\", \"width\", \"arcgradient\", \"wordwraparcs\", \"wordwrapentities\", \"watermark\"],\n  \"constants\" : [\"true\", \"false\", \"on\", \"off\", \"auto\"],\n  \"attributes\" : [\"label\", \"idurl\", \"id\", \"url\", \"linecolor\", \"linecolour\", \"textcolor\", \"textcolour\", \"textbgcolor\", \"textbgcolour\", \"arclinecolor\", \"arclinecolour\", \"arctextcolor\", \"arctextcolour\", \"arctextbgcolor\", \"arctextbgcolour\", \"arcskip\", \"title\", \"deactivate\", \"activate\", \"activation\"],\n  \"brackets\" : [\"\\\\{\", \"\\\\}\"],  // [ and  ] are brackets too, but these get handled in with lists\n  \"arcsWords\" : [\"note\", \"abox\", \"rbox\", \"box\", \"alt\", \"else\", \"opt\", \"break\", \"par\", \"seq\", \"strict\", \"neg\", \"critical\", \"ignore\", \"consider\", \"assert\", \"loop\", \"ref\", \"exc\"],\n  \"arcsOthers\" : [\"\\\\|\\\\|\\\\|\", \"\\\\.\\\\.\\\\.\", \"---\", \"--\", \"<->\", \"==\", \"<<=>>\", \"<=>\", \"\\\\.\\\\.\", \"<<>>\", \"::\", \"<:>\", \"->\", \"=>>\", \"=>\", \">>\", \":>\", \"<-\", \"<<=\", \"<=\", \"<<\", \"<:\", \"x-\", \"-x\"],\n  \"singlecomment\" : [\"//\", \"#\"],\n  \"operators\" : [\"=\"]\n})\n\nfunction wordRegexpBoundary(pWords) {\n  return new RegExp(\"^\\\\b(\" + pWords.join(\"|\") + \")\\\\b\", \"i\");\n}\n\nfunction wordRegexp(pWords) {\n  return new RegExp(\"^(?:\" + pWords.join(\"|\") + \")\", \"i\");\n}\n\nfunction startStateFn() {\n  return {\n    inComment : false,\n    inString : false,\n    inAttributeList : false,\n    inScript : false\n  };\n}\n\nfunction copyStateFn(pState) {\n  return {\n    inComment : pState.inComment,\n    inString : pState.inString,\n    inAttributeList : pState.inAttributeList,\n    inScript : pState.inScript\n  };\n}\n\nfunction produceTokenFunction(pConfig) {\n  return function(pStream, pState) {\n    if (pStream.match(wordRegexp(pConfig.brackets), true, true)) {\n      return \"bracket\";\n    }\n    /* comments */\n    if (!pState.inComment) {\n      if (pStream.match(/\\/\\*[^\\*\\/]*/, true, true)) {\n        pState.inComment = true;\n        return \"comment\";\n      }\n      if (pStream.match(wordRegexp(pConfig.singlecomment), true, true)) {\n        pStream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (pState.inComment) {\n      if (pStream.match(/[^\\*\\/]*\\*\\//, true, true))\n        pState.inComment = false;\n      else\n        pStream.skipToEnd();\n      return \"comment\";\n    }\n    /* strings */\n    if (!pState.inString && pStream.match(/\\\"(\\\\\\\"|[^\\\"])*/, true, true)) {\n      pState.inString = true;\n      return \"string\";\n    }\n    if (pState.inString) {\n      if (pStream.match(/[^\\\"]*\\\"/, true, true))\n        pState.inString = false;\n      else\n        pStream.skipToEnd();\n      return \"string\";\n    }\n    /* keywords & operators */\n    if (!!pConfig.keywords && pStream.match(wordRegexpBoundary(pConfig.keywords), true, true))\n      return \"keyword\";\n\n    if (pStream.match(wordRegexpBoundary(pConfig.options), true, true))\n      return \"keyword\";\n\n    if (pStream.match(wordRegexpBoundary(pConfig.arcsWords), true, true))\n      return \"keyword\";\n\n    if (pStream.match(wordRegexp(pConfig.arcsOthers), true, true))\n      return \"keyword\";\n\n    if (!!pConfig.operators && pStream.match(wordRegexp(pConfig.operators), true, true))\n      return \"operator\";\n\n    if (!!pConfig.constants && pStream.match(wordRegexp(pConfig.constants), true, true))\n      return \"variable\";\n\n    /* attribute lists */\n    if (!pConfig.inAttributeList && !!pConfig.attributes && pStream.match('[', true, true)) {\n      pConfig.inAttributeList = true;\n      return \"bracket\";\n    }\n    if (pConfig.inAttributeList) {\n      if (pConfig.attributes !== null && pStream.match(wordRegexpBoundary(pConfig.attributes), true, true)) {\n        return \"attribute\";\n      }\n      if (pStream.match(']', true, true)) {\n        pConfig.inAttributeList = false;\n        return \"bracket\";\n      }\n    }\n\n    pStream.next();\n    return null\n  };\n}\n"],"names":["mkParser","lang","pConfig","name","startState","startStateFn","copyState","copyStateFn","token","pStream","pState","match","wordRegexp","brackets","inComment","singlecomment","skipToEnd","inString","keywords","wordRegexpBoundary","options","arcsWords","arcsOthers","operators","constants","inAttributeList","attributes","next","languageData","commentTokens","line","block","open","close","mscgen","msgenny","xu","pWords","join","inScript"],"sourceRoot":""}