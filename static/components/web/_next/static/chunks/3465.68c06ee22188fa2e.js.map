{"version":3,"file":"static/chunks/3465.68c06ee22188fa2e.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/tcl.js","webpack://_N_E/<anon>"],"sourcesContent":["function parseWords(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\nvar keywords = parseWords(\"Tcl safe after append array auto_execok auto_import auto_load \" +\n                          \"auto_mkindex auto_mkindex_old auto_qualify auto_reset bgerror \" +\n                          \"binary break catch cd close concat continue dde eof encoding error \" +\n                          \"eval exec exit expr fblocked fconfigure fcopy file fileevent filename \" +\n                          \"filename flush for foreach format gets glob global history http if \" +\n                          \"incr info interp join lappend lindex linsert list llength load lrange \" +\n                          \"lreplace lsearch lset lsort memory msgcat namespace open package parray \" +\n                          \"pid pkg::create pkg_mkIndex proc puts pwd re_syntax read regex regexp \" +\n                          \"registry regsub rename resource return scan seek set socket source split \" +\n                          \"string subst switch tcl_endOfWord tcl_findLibrary tcl_startOfNextWord \" +\n                          \"tcl_wordBreakAfter tcl_startOfPreviousWord tcl_wordBreakBefore tcltest \" +\n                          \"tclvars tell time trace unknown unset update uplevel upvar variable \" +\n                          \"vwait\");\nvar functions = parseWords(\"if elseif else and not or eq ne in ni for foreach while switch\");\nvar isOperatorChar = /[+\\-*&%=<>!?^\\/\\|]/;\nfunction chain(stream, state, f) {\n  state.tokenize = f;\n  return f(stream, state);\n}\nfunction tokenBase(stream, state) {\n  var beforeParams = state.beforeParams;\n  state.beforeParams = false;\n  var ch = stream.next();\n  if ((ch == '\"' || ch == \"'\") && state.inParams) {\n    return chain(stream, state, tokenString(ch));\n  } else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n    if (ch == \"(\" && beforeParams) state.inParams = true;\n    else if (ch == \")\") state.inParams = false;\n    return null;\n  } else if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  } else if (ch == \"#\") {\n    if (stream.eat(\"*\"))\n      return chain(stream, state, tokenComment);\n    if (ch == \"#\" && stream.match(/ *\\[ *\\[/))\n      return chain(stream, state, tokenUnparsed);\n    stream.skipToEnd();\n    return \"comment\";\n  } else if (ch == '\"') {\n    stream.skipTo(/\"/);\n    return \"comment\";\n  } else if (ch == \"$\") {\n    stream.eatWhile(/[$_a-z0-9A-Z\\.{:]/);\n    stream.eatWhile(/}/);\n    state.beforeParams = true;\n    return \"builtin\";\n  } else if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"comment\";\n  } else {\n    stream.eatWhile(/[\\w\\$_{}\\xa1-\\uffff]/);\n    var word = stream.current().toLowerCase();\n    if (keywords && keywords.propertyIsEnumerable(word))\n      return \"keyword\";\n    if (functions && functions.propertyIsEnumerable(word)) {\n      state.beforeParams = true;\n      return \"keyword\";\n    }\n    return null;\n  }\n}\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end) state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \"#\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\nfunction tokenUnparsed(stream, state) {\n  var maybeEnd = 0, ch;\n  while (ch = stream.next()) {\n    if (ch == \"#\" && maybeEnd == 2) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    if (ch == \"]\")\n      maybeEnd++;\n    else if (ch != \" \")\n      maybeEnd = 0;\n  }\n  return \"meta\";\n}\nexport const tcl = {\n  name: \"tcl\",\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      beforeParams: false,\n      inParams: false\n    };\n  },\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    return state.tokenize(stream, state);\n  },\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n};\n"],"names":["parseWords","str","obj","words","split","i","length","keywords","functions","isOperatorChar","chain","stream","state","f","tokenize","tokenBase","beforeParams","ch","next","inParams","escaped","end","test","eatWhile","eat","tokenComment","match","tokenUnparsed","skipToEnd","skipTo","word","current","toLowerCase","propertyIsEnumerable","maybeEnd","tcl","name","startState","token","eatSpace","languageData","commentTokens","line"],"sourceRoot":""}