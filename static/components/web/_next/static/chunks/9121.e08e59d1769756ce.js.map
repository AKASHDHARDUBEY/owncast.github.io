{"version":3,"file":"static/chunks/9121.e08e59d1769756ce.js","mappings":"6IAAA,IAAAA,EAAA,CACA,wDACA,qEACA,sEACA,CACAC,EAAA,CACA,qDACA,CAEAC,EAAA,SACAC,EAAA,SACAC,EAAA,YAAAJ,EAAAK,IAAA,aACAC,EAAA,YAAAL,EAAAI,IAAA,aACAE,EAAA,UACAC,EAAA,eACAC,EAAA,uBACAC,EAAA,SACAC,EAAA,eAwEO,IAAAC,EAAA,CACPC,KAAA,OACAC,WAAA,WACA,OAEAC,YAAA,GAEAC,SAAA,GAEAC,eAAA,GAEAV,OAAA,KAEAW,UAAA,EACA,CACA,EACAC,MAjFA,SAAAC,CAAA,CAAAC,CAAA,EACA,GAAAD,EAAAE,GAAA,IAGA,GADAD,EAAAN,WAAA,IACAM,EAAAL,QAAA,EAAAI,EAAAG,KAAA,CAAArB,GAEA,YAMA,GAJAmB,EAAAL,QAAA,IACAK,EAAAd,MAAA,MAGAa,EAAAG,KAAA,CAAApB,GAGA,OAFAkB,EAAAH,SAAA,IACAG,EAAAN,WAAA,IACA,MACA,CAGA,IADAQ,EACAN,EAAA,SACA,CAAAM,EAAAH,EAAAG,KAAA,CAAAjB,EAAA,GACA,MAAAiB,EAAAH,EAAAG,KAAA,CAAAnB,EAAA,GACAiB,EAAAH,SAAA,IACAG,EAAAL,QAAA,IACAK,EAAAJ,cAAA,CAAAA,EACAI,EAAAd,MAAA,CAAAgB,CAAA,IACA,QAKAF,EAAAH,SAAA,EAAAK,CAAAA,EAAAH,EAAAG,KAAA,CAAAhB,EAAA,GACAc,EAAAL,QAAA,IACAK,EAAAJ,cAAA,IACAI,EAAAd,MAAA,CAAAgB,CAAA,IACA,SAGAF,EAAAH,SAAA,IACAE,EAAAI,SAAA,GACA,KAbA,CAcA,GAEAH,EAAAN,WAAA,QACA,EAAAQ,KAAA,CAAAf,GAAA,QACAY,EAAAG,KAAA,CAAAd,IACAW,EAAAI,SAAA,GADA,OADA,CAMA,GAAAH,EAAAL,QAAA,EACA,IAAAS,EAvDA,YAuDAJ,EAAAd,MAAA,CAvDA,SACA,QADA,CAyDA,GAAAc,EAAAJ,cAAA,EACA,GAAAG,EAAAG,KAAA,CAAAb,GAAA,OAAAe,EAAA,QACA,GAAAL,EAAAG,KAAA,CAAAZ,GAAA,OAAAc,CAAA,CACA,OACAL,EAAAI,SAAA,GACAC,CACA,QAEAL,EAAAI,SAAA,GACA,MAoBAE,UAAA,SAAAL,CAAA,EACAA,EAAAH,SAAA,CAAAG,EAAAN,WAAA,CAAAM,EAAAL,QAAA,GACA,EACAW,aAAA,CACAC,aAAA5B,EAAA6B,MAAA,CAAA5B,EACA,CACA","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/mbox.js","webpack://_N_E/<anon>"],"sourcesContent":["var rfc2822 = [\n  \"From\", \"Sender\", \"Reply-To\", \"To\", \"Cc\", \"Bcc\", \"Message-ID\",\n  \"In-Reply-To\", \"References\", \"Resent-From\", \"Resent-Sender\", \"Resent-To\",\n  \"Resent-Cc\", \"Resent-Bcc\", \"Resent-Message-ID\", \"Return-Path\", \"Received\"\n];\nvar rfc2822NoEmail = [\n  \"Date\", \"Subject\", \"Comments\", \"Keywords\", \"Resent-Date\"\n];\n\nvar whitespace = /^[ \\t]/;\nvar separator = /^From /; // See RFC 4155\nvar rfc2822Header = new RegExp(\"^(\" + rfc2822.join(\"|\") + \"): \");\nvar rfc2822HeaderNoEmail = new RegExp(\"^(\" + rfc2822NoEmail.join(\"|\") + \"): \");\nvar header = /^[^:]+:/; // Optional fields defined in RFC 2822\nvar email = /^[^ ]+@[^ ]+/;\nvar untilEmail = /^.*?(?=[^ ]+?@[^ ]+)/;\nvar bracketedEmail = /^<.*?>/;\nvar untilBracketedEmail = /^.*?(?=<.*>)/;\n\nfunction styleForHeader(header) {\n  if (header === \"Subject\") return \"header\";\n  return \"string\";\n}\n\nfunction readToken(stream, state) {\n  if (stream.sol()) {\n    // From last line\n    state.inSeparator = false;\n    if (state.inHeader && stream.match(whitespace)) {\n      // Header folding\n      return null;\n    } else {\n      state.inHeader = false;\n      state.header = null;\n    }\n\n    if (stream.match(separator)) {\n      state.inHeaders = true;\n      state.inSeparator = true;\n      return \"atom\";\n    }\n\n    var match;\n    var emailPermitted = false;\n    if ((match = stream.match(rfc2822HeaderNoEmail)) ||\n        (emailPermitted = true) && (match = stream.match(rfc2822Header))) {\n      state.inHeaders = true;\n      state.inHeader = true;\n      state.emailPermitted = emailPermitted;\n      state.header = match[1];\n      return \"atom\";\n    }\n\n    // Use vim's heuristics: recognize custom headers only if the line is in a\n    // block of legitimate headers.\n    if (state.inHeaders && (match = stream.match(header))) {\n      state.inHeader = true;\n      state.emailPermitted = true;\n      state.header = match[1];\n      return \"atom\";\n    }\n\n    state.inHeaders = false;\n    stream.skipToEnd();\n    return null;\n  }\n\n  if (state.inSeparator) {\n    if (stream.match(email)) return \"link\";\n    if (stream.match(untilEmail)) return \"atom\";\n    stream.skipToEnd();\n    return \"atom\";\n  }\n\n  if (state.inHeader) {\n    var style = styleForHeader(state.header);\n\n    if (state.emailPermitted) {\n      if (stream.match(bracketedEmail)) return style + \" link\";\n      if (stream.match(untilBracketedEmail)) return style;\n    }\n    stream.skipToEnd();\n    return style;\n  }\n\n  stream.skipToEnd();\n  return null;\n};\n\nexport const mbox = {\n  name: \"mbox\",\n  startState: function() {\n    return {\n      // Is in a mbox separator\n      inSeparator: false,\n      // Is in a mail header\n      inHeader: false,\n      // If bracketed email is permitted. Only applicable when inHeader\n      emailPermitted: false,\n      // Name of current header\n      header: null,\n      // Is in a region of mail headers\n      inHeaders: false\n    };\n  },\n  token: readToken,\n  blankLine: function(state) {\n    state.inHeaders = state.inSeparator = state.inHeader = false;\n  },\n  languageData: {\n    autocomplete: rfc2822.concat(rfc2822NoEmail)\n  }\n}\n\n"],"names":["rfc2822","rfc2822NoEmail","whitespace","separator","rfc2822Header","join","rfc2822HeaderNoEmail","header","email","untilEmail","bracketedEmail","untilBracketedEmail","mbox","name","startState","inSeparator","inHeader","emailPermitted","inHeaders","token","stream","state","sol","match","skipToEnd","style","blankLine","languageData","autocomplete","concat"],"sourceRoot":""}