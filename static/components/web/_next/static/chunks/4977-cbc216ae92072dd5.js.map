{"version":3,"file":"static/chunks/4977-cbc216ae92072dd5.js","mappings":"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","sources":["webpack://_N_E/./components/chat/ChatUserMessage/messageFmt.ts","webpack://_N_E/./components/chat/ChatUserBadge/ChatUserBadge.tsx","webpack://_N_E/./components/chat/ChatUserMessage/ChatUserMessage.tsx","webpack://_N_E/./components/chat/ChatTextField/ChatTextField.tsx","webpack://_N_E/./assets/images/moderator.svg","webpack://_N_E/./components/chat/ChatModeratorNotification/ChatModeratorNotification.tsx","webpack://_N_E/./components/chat/ChatSystemMessage/ChatSystemMessage.tsx","webpack://_N_E/./components/chat/ChatJoinMessage/ChatJoinMessage.tsx","webpack://_N_E/./components/chat/ChatContainer/ScrollToBotBtn.tsx","webpack://_N_E/./components/chat/ChatActionMessage/ChatActionMessage.tsx","webpack://_N_E/./components/chat/ChatContainer/ChatContainer.tsx","webpack://_N_E/./components/chat/ChatActionMessage/ChatActionMessage.module.scss","webpack://_N_E/./components/chat/ChatContainer/ChatContainer.module.scss","webpack://_N_E/./components/chat/ChatJoinMessage/ChatJoinMessage.module.scss","webpack://_N_E/./components/chat/ChatModeratorNotification/ChatModeratorNotification.module.scss","webpack://_N_E/./components/chat/ChatSystemMessage/ChatSystemMessage.module.scss","webpack://_N_E/./components/chat/ChatTextField/ChatTextField.module.scss","webpack://_N_E/./components/chat/ChatUserBadge/ChatUserBadge.module.scss","webpack://_N_E/./components/chat/ChatUserMessage/ChatUserMessage.module.scss","webpack://_N_E/<anon>"],"sourcesContent":["import { convertToText } from '../chat';\nimport { getDiffInDaysFromNow } from '../../../utils/helpers';\n\nconst stripTags = (str: string) => str && str.replace(/<\\/?[^>]+(>|$)/g, '');\nconst convertToMarkup = (str = '') => convertToText(str).replace(/\\n/g, '<p></p>');\n\nfunction getInstagramEmbedFromURL(url: string) {\n  const urlObject = new URL(url.replace(/\\/$/, ''));\n  urlObject.pathname += '/embed';\n  return `<iframe class=\"chat-embed instagram-embed\" src=\"${urlObject.href}\" frameborder=\"0\" allowfullscreen></iframe>`;\n}\n\nfunction isMessageJustAnchor(embedText: string, message: string, anchors: HTMLAnchorElement[]) {\n  if (embedText !== '' && anchors.length === 1) return false;\n  return stripTags(message) === stripTags(anchors[0]?.innerHTML);\n}\n\nfunction getMessageWithEmbeds(message: string) {\n  let embedText = '';\n  // Make a temporary element so we can actually parse the html and pull anchor tags from it.\n  // This is a better approach than regex.\n  const container = document.createElement('p');\n  container.innerHTML = message;\n\n  const anchors = Array.from(container.querySelectorAll('a'));\n  anchors.forEach(({ href }) => {\n    if (href.includes('instagram.com/p/')) embedText += getInstagramEmbedFromURL(href);\n  });\n\n  // If this message only consists of a single embeddable link\n  // then only return the embed and strip the link url from the text.\n  if (isMessageJustAnchor(embedText, message, anchors)) return embedText;\n  return message + embedText;\n}\n\nexport function formatTimestamp(sentAt: Date) {\n  const now = new Date(sentAt);\n  if (Number.isNaN(now)) return '';\n\n  const diffInDays = getDiffInDaysFromNow(sentAt);\n\n  if (diffInDays >= 1) {\n    const localeDate = now.toLocaleDateString('en-US', {\n      dateStyle: 'medium',\n    });\n    return `${localeDate} at ${now.toLocaleTimeString()}`;\n  }\n\n  return `${now.toLocaleTimeString()}`;\n}\n\n/*\n  You would call this when receiving a plain text\n  value back from an API, and before inserting the\n  text into the `contenteditable` area on a page.\n*/\n\nexport function formatMessageText(message: string) {\n  let formattedText = getMessageWithEmbeds(message);\n  formattedText = convertToMarkup(formattedText);\n  return formattedText;\n  // return await highlightUsername(formattedText, username);\n}\n","import React, { FC } from 'react';\nimport styles from './ChatUserBadge.module.scss';\n\nexport type ChatUserBadgeProps = {\n  badge: React.ReactNode;\n  userColor: number;\n};\n\nexport const ChatUserBadge: FC<ChatUserBadgeProps> = ({ badge, userColor }) => {\n  const color = `var(--theme-user-colors-${userColor})`;\n  const style = { color, borderColor: color };\n\n  return (\n    <span style={style} className={styles.badge}>\n      {badge}\n    </span>\n  );\n};\n","/* eslint-disable react/no-danger */\nimport { FC, ReactNode, useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { Tooltip } from 'antd';\nimport { useRecoilValue } from 'recoil';\nimport dynamic from 'next/dynamic';\nimport { decodeHTML } from 'entities';\nimport styles from './ChatUserMessage.module.scss';\nimport { formatTimestamp } from './messageFmt';\nimport { ChatMessage } from '../../../interfaces/chat-message.model';\nimport { ChatUserBadge } from '../ChatUserBadge/ChatUserBadge';\nimport { accessTokenAtom } from '../../stores/ClientConfigStore';\nimport { User } from '../../../interfaces/user.model';\n\n// Lazy loaded components\n\nconst LinkOutlined = dynamic(() => import('@ant-design/icons/LinkOutlined'), {\n  ssr: false,\n});\n\nconst ChatModerationActionMenu = dynamic(\n  () =>\n    import('../ChatModerationActionMenu/ChatModerationActionMenu').then(\n      mod => mod.ChatModerationActionMenu,\n    ),\n  {\n    ssr: false,\n  },\n);\n\nconst Highlight = dynamic(() => import('react-highlighter-ts').then(mod => mod.Highlight), {\n  ssr: false,\n});\n\nexport type ChatUserMessageProps = {\n  message: ChatMessage;\n  showModeratorMenu: boolean;\n  highlightString: string;\n  sentBySelf: boolean;\n  sameUserAsLast: boolean;\n  isAuthorModerator: boolean;\n  isAuthorAuthenticated: boolean;\n};\n\nexport type UserTooltipProps = {\n  user: User;\n  children: ReactNode;\n};\n\nconst UserTooltip: FC<UserTooltipProps> = ({ children, user }) => {\n  const { displayName, createdAt } = user;\n  const content = `${displayName} first joined ${formatTimestamp(createdAt)}`;\n\n  return (\n    <Tooltip title={content} placement=\"topLeft\" mouseEnterDelay={1}>\n      {children}\n    </Tooltip>\n  );\n};\n\nexport const ChatUserMessage: FC<ChatUserMessageProps> = ({\n  message,\n  highlightString,\n  showModeratorMenu,\n  sentBySelf, // Move the border to the right and render a background\n  sameUserAsLast,\n  isAuthorModerator,\n  isAuthorAuthenticated,\n}) => {\n  const { id: messageId, body, user, timestamp } = message;\n  const { id: userId, displayName, displayColor } = user;\n  const accessToken = useRecoilValue<string>(accessTokenAtom);\n\n  const color = `var(--theme-color-users-${displayColor})`;\n  const formattedTimestamp = `Sent ${formatTimestamp(timestamp)}`;\n  const [formattedMessage, setFormattedMessage] = useState<string>(body);\n\n  const badgeNodes = [];\n  if (isAuthorModerator) {\n    badgeNodes.push(<ChatUserBadge key=\"mod\" badge=\"mod\" userColor={displayColor} />);\n  }\n  if (isAuthorAuthenticated) {\n    badgeNodes.push(\n      <ChatUserBadge\n        key=\"auth\"\n        badge={<LinkOutlined title=\"authenticated\" />}\n        userColor={displayColor}\n      />,\n    );\n  }\n\n  useEffect(() => {\n    setFormattedMessage(decodeHTML(body));\n  }, [message]);\n\n  return (\n    <div\n      className={cn(\n        styles.messagePadding,\n        sameUserAsLast && styles.messagePaddingCollapsed,\n        'chat-message_user',\n      )}\n    >\n      <div\n        className={cn(styles.root, {\n          [styles.ownMessage]: sentBySelf,\n        })}\n        style={{ borderColor: color }}\n      >\n        {!sameUserAsLast && (\n          <UserTooltip user={user}>\n            <div className={styles.user} style={{ color }}>\n              <span className={styles.userName}>{displayName}</span>\n              <span>{badgeNodes}</span>\n            </div>\n          </UserTooltip>\n        )}\n        <Tooltip title={formattedTimestamp} mouseEnterDelay={1}>\n          <Highlight search={highlightString}>\n            <div\n              className={styles.message}\n              dangerouslySetInnerHTML={{ __html: formattedMessage }}\n            />\n          </Highlight>\n        </Tooltip>\n\n        {showModeratorMenu && (\n          <div className={styles.modMenuWrapper}>\n            <ChatModerationActionMenu\n              messageID={messageId}\n              accessToken={accessToken}\n              userID={userId}\n              userDisplayName={displayName}\n            />\n          </div>\n        )}\n        <div className={styles.background} style={{ color }} />\n      </div>\n    </div>\n  );\n};\n","import { Popover } from 'antd';\nimport React, { FC, useMemo, useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { Transforms, createEditor, BaseEditor, Text, Descendant, Editor, Node, Path } from 'slate';\nimport { Slate, Editable, withReact, ReactEditor, useSelected, useFocused } from 'slate-react';\nimport dynamic from 'next/dynamic';\nimport classNames from 'classnames';\nimport WebsocketService from '../../../services/websocket-service';\nimport { websocketServiceAtom } from '../../stores/ClientConfigStore';\nimport { MessageType } from '../../../interfaces/socket-events';\nimport styles from './ChatTextField.module.scss';\n\n// Lazy loaded components\n\nconst EmojiPicker = dynamic(() => import('./EmojiPicker').then(mod => mod.EmojiPicker), {\n  ssr: false,\n});\n\nconst SendOutlined = dynamic(() => import('@ant-design/icons/SendOutlined'), {\n  ssr: false,\n});\n\nconst SmileOutlined = dynamic(() => import('@ant-design/icons/SmileOutlined'), {\n  ssr: false,\n});\n\ntype CustomElement = { type: 'paragraph' | 'span'; children: CustomText[] } | ImageNode;\ntype CustomText = { text: string };\n\ntype EmptyText = {\n  text: string;\n};\n\ntype ImageNode = {\n  type: 'image';\n  alt: string;\n  src: string;\n  name: string;\n  children: EmptyText[];\n};\n\ndeclare module 'slate' {\n  interface CustomTypes {\n    Editor: BaseEditor & ReactEditor;\n    Element: CustomElement;\n    Text: CustomText;\n  }\n}\n\nconst Image = p => {\n  const { attributes, element, children } = p;\n\n  const selected = useSelected();\n  const focused = useFocused();\n  return (\n    <span {...attributes} contentEditable={false}>\n      <img\n        alt={element.alt}\n        src={element.src}\n        title={element.name}\n        style={{\n          display: 'inline',\n          maxWidth: '50px',\n          maxHeight: '20px',\n          boxShadow: `${selected && focused ? '0 0 0 3px #B4D5FF' : 'none'}`,\n        }}\n      />\n      {children}\n    </span>\n  );\n};\n\nconst withImages = editor => {\n  const { isVoid } = editor;\n\n  // eslint-disable-next-line no-param-reassign\n  editor.isVoid = element => (element.type === 'image' ? true : isVoid(element));\n  // eslint-disable-next-line no-param-reassign\n  editor.isInline = element => element.type === 'image';\n\n  return editor;\n};\n\nconst serialize = node => {\n  if (Text.isText(node)) {\n    const string = node.text;\n    return string;\n  }\n\n  let children;\n  if (node.children.length === 0) {\n    children = [{ text: '' }];\n  } else {\n    children = node.children?.map(n => serialize(n)).join('');\n  }\n\n  switch (node.type) {\n    case 'paragraph':\n      return `<p>${children}</p>`;\n    case 'image':\n      return `<img src=\"${node.src}\" alt=\"${node.alt}\" title=\"${node.name}\" class=\"emoji\"/>`;\n    default:\n      return children;\n  }\n};\n\nconst getCharacterCount = node => {\n  if (Text.isText(node)) {\n    return node.text.length;\n  }\n  if (node.type === 'image') {\n    return 5;\n  }\n\n  let count = 0;\n  node.children.forEach(child => {\n    count += getCharacterCount(child);\n  });\n\n  return count;\n};\n\nexport type ChatTextFieldProps = {\n  defaultText?: string;\n};\n\nconst characterLimit = 300;\n\nexport const ChatTextField: FC<ChatTextFieldProps> = ({ defaultText }) => {\n  const [showEmojis, setShowEmojis] = useState(false);\n  const [characterCount, setCharacterCount] = useState(defaultText?.length);\n  const websocketService = useRecoilValue<WebsocketService>(websocketServiceAtom);\n  const editor = useMemo(() => withReact(withImages(createEditor())), []);\n\n  const defaultEditorValue: Descendant[] = [\n    {\n      type: 'paragraph',\n      children: [{ text: defaultText || '' }],\n    },\n  ];\n\n  const sendMessage = () => {\n    if (!websocketService) {\n      console.log('websocketService is not defined');\n      return;\n    }\n\n    const message = serialize(editor);\n    websocketService.send({ type: MessageType.CHAT, body: message });\n\n    // Clear the editor.\n    Transforms.delete(editor, {\n      at: {\n        anchor: Editor.start(editor, []),\n        focus: Editor.end(editor, []),\n      },\n    });\n    setCharacterCount(0);\n  };\n\n  const createImageNode = (alt, src, name): ImageNode => ({\n    type: 'image',\n    alt,\n    src,\n    name,\n    children: [{ text: '' }],\n  });\n\n  const insertImage = (url, name) => {\n    if (!url) return;\n\n    const { selection } = editor;\n    const image = createImageNode(name, url, name);\n\n    Transforms.insertNodes(editor, image, { select: true });\n\n    if (selection) {\n      const [parentNode, parentPath] = Editor.parent(editor, selection.focus?.path);\n\n      if (editor.isVoid(parentNode) || Node.string(parentNode).length) {\n        // Insert the new image node after the void node or a node with content\n        Transforms.insertNodes(editor, image, {\n          at: Path.next(parentPath),\n          select: true,\n        });\n      } else {\n        // If the node is empty, replace it instead\n        // Transforms.removeNodes(editor, { at: parentPath });\n        Transforms.insertNodes(editor, image, { at: parentPath, select: true });\n        Editor.normalize(editor, { force: true });\n      }\n    } else {\n      // Insert the new image node at the bottom of the Editor when selection\n      // is falsey\n      Transforms.insertNodes(editor, image, { select: true });\n    }\n  };\n\n  // Native emoji\n  const onEmojiSelect = (emoji: string) => {\n    ReactEditor.focus(editor);\n    Transforms.insertText(editor, emoji);\n  };\n\n  const onCustomEmojiSelect = (name: string, emoji: string) => {\n    ReactEditor.focus(editor);\n    insertImage(emoji, name);\n  };\n\n  const onKeyDown = (e: React.KeyboardEvent) => {\n    const charCount = getCharacterCount(editor) + 1;\n\n    // Send the message when hitting enter.\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      sendMessage();\n      return;\n    }\n\n    // Always allow backspace.\n    if (e.key === 'Backspace') {\n      setCharacterCount(charCount - 1);\n      return;\n    }\n\n    // Limit the number of characters.\n    if (charCount + 1 > characterLimit) {\n      e.preventDefault();\n    }\n\n    setCharacterCount(charCount + 1);\n  };\n\n  const onPaste = (e: React.ClipboardEvent) => {\n    const text = e.clipboardData.getData('text/plain');\n\n    const { length } = text;\n    if (characterCount + length > characterLimit) {\n      e.preventDefault();\n    }\n  };\n\n  const renderElement = p => {\n    switch (p.element.type) {\n      case 'image':\n        return <Image {...p} />;\n      default:\n        return <p {...p} />;\n    }\n  };\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={classNames(\n          styles.inputWrap,\n          characterCount >= characterLimit && styles.maxCharacters,\n        )}\n      >\n        <Slate editor={editor} value={defaultEditorValue}>\n          <Editable\n            className=\"chat-text-input\"\n            onKeyDown={onKeyDown}\n            onPaste={onPaste}\n            renderElement={renderElement}\n            placeholder=\"Send a message to chat\"\n            style={{ width: '100%' }}\n            role=\"textbox\"\n            aria-label=\"Chat text input\"\n            autoFocus\n          />\n          <Popover\n            content={\n              <EmojiPicker\n                onEmojiSelect={onEmojiSelect}\n                onCustomEmojiSelect={onCustomEmojiSelect}\n              />\n            }\n            trigger=\"click\"\n            placement=\"topRight\"\n            onOpenChange={open => setShowEmojis(open)}\n            open={showEmojis}\n          />\n        </Slate>\n\n        <div style={{ display: 'flex', paddingLeft: '5px' }}>\n          <button\n            type=\"button\"\n            className={styles.emojiButton}\n            title=\"Emoji picker button\"\n            onClick={() => setShowEmojis(!showEmojis)}\n          >\n            <SmileOutlined />\n          </button>\n          <button\n            type=\"button\"\n            className={styles.sendButton}\n            title=\"Send message Button\"\n            onClick={sendMessage}\n          >\n            <SendOutlined />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","var _linearGradient, _path, _path2, _path3, _path4;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nvar SvgModerator = function SvgModerator(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    height: 500,\n    viewBox: \"0 0 132.292 132.292\",\n    width: 500,\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, props), _linearGradient || (_linearGradient = /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"moderator_svg__a\",\n    gradientUnits: \"userSpaceOnUse\",\n    x1: 432.851,\n    x2: 464.644,\n    y1: 49.977,\n    y2: 49.977\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0,\n    stopColor: \"#2087e2\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#b63fff\"\n  }))), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M438.672 34.08h20.151a5.82 5.82 45 0 1 5.82 5.821v20.151a5.82 5.82 135 0 1-5.82 5.821h-20.15a5.82 5.82 45 0 1-5.822-5.82V39.9a5.82 5.82 135 0 1 5.821-5.82z\",\n    fill: \"url(#moderator_svg__a)\",\n    transform: \"matrix(4.16112 0 0 4.16112 -1801.146 -141.814)\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M121.11 29.551c-6.93 47.444-30.074 104.618-77.642 79.674l25.83 23.067h38.772c13.377 0 24.22-10.845 24.22-24.222V40.864z\",\n    fill: \"#1d1535\",\n    fillOpacity: 0.335\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M66.775 13.257s-7.129 57.999-.63 99.312c6.565 41.724-81.568-74.394-49.619-79.203 31.949-4.809 50.249-20.11 50.249-20.11z\",\n    fill: \"#e2e8f0\",\n    fillOpacity: 0.306\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M435.995 42.072c6.797.447 12.753-4.806 12.753-4.806s5.955 5.253 12.752 4.806c-.581 12.745-7.495 20.586-12.752 20.628-5.188.042-12.172-7.883-12.753-20.628z\",\n    fill: \"none\",\n    stroke: \"#fff\",\n    strokeLinejoin: \"round\",\n    strokeWidth: 2,\n    transform: \"matrix(4.16112 0 0 4.16112 -1801.146 -141.814)\"\n  })));\n};\nexport default SvgModerator;","import styles from './ChatModeratorNotification.module.scss';\nimport Icon from '../../../assets/images/moderator.svg';\n\nexport const ChatModeratorNotification = () => (\n  <div className={styles.chatModerationNotification}>\n    <Icon className={styles.icon} />\n    You are now a moderator.\n  </div>\n);\n","/* eslint-disable react/no-danger */\nimport { Highlight } from 'react-highlighter-ts';\nimport { FC } from 'react';\nimport cn from 'classnames';\nimport { ChatMessage } from '../../../interfaces/chat-message.model';\nimport styles from './ChatSystemMessage.module.scss';\n\nexport type ChatSystemMessageProps = {\n  message: ChatMessage;\n  highlightString: string;\n};\n\nexport const ChatSystemMessage: FC<ChatSystemMessageProps> = ({\n  message: {\n    body,\n    user: { displayName },\n  },\n  highlightString,\n}) => (\n  <div className={cn([styles.chatSystemMessage, 'chat-message_system'])}>\n    <div className={styles.user}>\n      <span className={styles.userName}>{displayName}</span>\n    </div>\n    <Highlight search={highlightString}>\n      <div className={styles.message} dangerouslySetInnerHTML={{ __html: body }} />\n    </Highlight>\n  </div>\n);\n","import { FC } from 'react';\nimport dynamic from 'next/dynamic';\nimport { ChatUserBadge } from '../ChatUserBadge/ChatUserBadge';\nimport styles from './ChatJoinMessage.module.scss';\n\n// Lazy loaded components\n\nconst TeamOutlined = dynamic(() => import('@ant-design/icons/TeamOutlined'), {\n  ssr: false,\n});\n\nexport type ChatJoinMessageProps = {\n  isAuthorModerator: boolean;\n  userColor: number;\n  displayName: string;\n};\n\nexport const ChatJoinMessage: FC<ChatJoinMessageProps> = ({\n  isAuthorModerator,\n  userColor,\n  displayName,\n}) => {\n  const color = `var(--theme-color-users-${userColor})`;\n\n  return (\n    <div className={styles.root}>\n      <span style={{ color }}>\n        <span style={{ padding: '0 10px' }}>\n          <TeamOutlined />\n        </span>\n        <span style={{ fontWeight: 'bold' }}>{displayName}</span>\n        {isAuthorModerator && (\n          <span>\n            <ChatUserBadge badge=\"mod\" userColor={userColor} />\n          </span>\n        )}\n      </span>{' '}\n      joined the chat.\n    </div>\n  );\n};\n","import { Button } from 'antd';\nimport dynamic from 'next/dynamic';\nimport { FC, MutableRefObject } from 'react';\nimport { ChatMessage } from '../../../interfaces/chat-message.model';\nimport styles from './ChatContainer.module.scss';\n\n// Lazy loaded components\n\nconst VerticalAlignBottomOutlined = dynamic(\n  () => import('@ant-design/icons/VerticalAlignBottomOutlined'),\n  {\n    ssr: false,\n  },\n);\ntype Props = {\n  chatContainerRef: MutableRefObject<any>;\n  messages: ChatMessage[];\n};\n\nexport const ScrollToBotBtn: FC<Props> = ({ chatContainerRef, messages }) => (\n  <div className={styles.toBottomWrap}>\n    <Button\n      type=\"default\"\n      style={{ color: 'currentColor' }}\n      icon={<VerticalAlignBottomOutlined />}\n      onClick={() =>\n        chatContainerRef.current.scrollToIndex({\n          index: messages.length - 1,\n          behavior: 'auto',\n        })\n      }\n    >\n      Go to last message\n    </Button>\n  </div>\n);\n","import { FC } from 'react';\nimport styles from './ChatActionMessage.module.scss';\n\n/* eslint-disable react/no-danger */\nexport type ChatActionMessageProps = {\n  body: string;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const ChatActionMessage: FC<ChatActionMessageProps> = ({ body }) => (\n  <div dangerouslySetInnerHTML={{ __html: body }} className={styles.chatAction} />\n);\n","import { Virtuoso } from 'react-virtuoso';\nimport { useState, useMemo, useRef, CSSProperties, FC, useEffect } from 'react';\nimport dynamic from 'next/dynamic';\nimport {\n  ConnectedClientInfoEvent,\n  MessageType,\n  NameChangeEvent,\n} from '../../../interfaces/socket-events';\nimport styles from './ChatContainer.module.scss';\nimport { ChatMessage } from '../../../interfaces/chat-message.model';\nimport { ChatUserMessage } from '../ChatUserMessage/ChatUserMessage';\nimport { ChatTextField } from '../ChatTextField/ChatTextField';\nimport { ChatModeratorNotification } from '../ChatModeratorNotification/ChatModeratorNotification';\n// import ChatActionMessage from '../ChatAction/ChatActionMessage';\nimport { ChatSystemMessage } from '../ChatSystemMessage/ChatSystemMessage';\nimport { ChatJoinMessage } from '../ChatJoinMessage/ChatJoinMessage';\nimport { ScrollToBotBtn } from './ScrollToBotBtn';\nimport { ChatActionMessage } from '../ChatActionMessage/ChatActionMessage';\n\n// Lazy loaded components\n\nconst EditFilled = dynamic(() => import('@ant-design/icons/EditFilled'), {\n  ssr: false,\n});\nexport type ChatContainerProps = {\n  messages: ChatMessage[];\n  usernameToHighlight: string;\n  chatUserId: string;\n  isModerator: boolean;\n  showInput?: boolean;\n  height?: string;\n};\n\nfunction shouldCollapseMessages(messages: ChatMessage[], index: number): boolean {\n  if (messages.length < 2) {\n    return false;\n  }\n\n  const message = messages[index];\n  if (!message || !message.user) {\n    return false;\n  }\n\n  const {\n    user: { id },\n  } = message;\n  const lastMessage = messages[index - 1];\n  if (lastMessage?.type !== MessageType.CHAT) {\n    return false;\n  }\n\n  if (!lastMessage?.timestamp || !message.timestamp) {\n    return false;\n  }\n\n  const maxTimestampDelta = 1000 * 60 * 2; // 2 minutes\n  const lastTimestamp = new Date(lastMessage?.timestamp).getTime();\n  const thisTimestamp = new Date(message.timestamp).getTime();\n  if (thisTimestamp - lastTimestamp > maxTimestampDelta) {\n    return false;\n  }\n\n  return id === lastMessage?.user.id;\n}\n\nfunction checkIsModerator(message: ChatMessage | ConnectedClientInfoEvent) {\n  const {\n    user: { scopes },\n  } = message;\n\n  if (!scopes || scopes.length === 0) {\n    return false;\n  }\n\n  return scopes.includes('MODERATOR');\n}\n\nexport const ChatContainer: FC<ChatContainerProps> = ({\n  messages,\n  usernameToHighlight,\n  chatUserId,\n  isModerator,\n  showInput,\n  height,\n}) => {\n  const [atBottom, setAtBottom] = useState(false);\n  const chatContainerRef = useRef(null);\n\n  const getNameChangeViewForMessage = (message: NameChangeEvent) => {\n    const { oldName, user } = message;\n    const { displayName, displayColor } = user;\n    const color = `var(--theme-color-users-${displayColor})`;\n\n    return (\n      <div className={styles.nameChangeView}>\n        <div style={{ marginRight: 5, height: 'max-content', margin: 'auto 5px auto 0' }}>\n          <EditFilled />\n        </div>\n        <div className={styles.nameChangeText}>\n          <span style={{ color }}>{oldName}</span>\n          <span className={styles.plain}> is now known as </span>\n          <span style={{ color }}>{displayName}</span>\n        </div>\n      </div>\n    );\n  };\n\n  const getUserJoinedMessage = (message: ChatMessage) => {\n    const {\n      user: { displayName, displayColor },\n    } = message;\n    const isAuthorModerator = checkIsModerator(message);\n    return (\n      <ChatJoinMessage\n        displayName={displayName}\n        userColor={displayColor}\n        isAuthorModerator={isAuthorModerator}\n      />\n    );\n  };\n\n  const getActionMessage = (message: ChatMessage) => {\n    const { body } = message;\n    return <ChatActionMessage body={body} />;\n  };\n  const getConnectedInfoMessage = (message: ConnectedClientInfoEvent) => {\n    const modStatusUpdate = checkIsModerator(message);\n    if (!modStatusUpdate) {\n      // Important note: We can't return null or an element with zero width\n      // or zero height. So to work around this we return a very small 1x1 div.\n      const st: CSSProperties = { width: '1px', height: '1px' };\n      return <div style={st} />;\n    }\n\n    // Alert the user that they are a moderator.\n    return <ChatModeratorNotification />;\n  };\n\n  const getViewForMessage = (\n    index: number,\n    message: ChatMessage | NameChangeEvent | ConnectedClientInfoEvent,\n  ) => {\n    switch (message.type) {\n      case MessageType.CHAT:\n        return (\n          <ChatUserMessage\n            message={message as ChatMessage}\n            showModeratorMenu={isModerator} // Moderators have access to an additional menu\n            highlightString={usernameToHighlight} // What to highlight in the message\n            sentBySelf={message.user?.id === chatUserId} // The local user sent this message\n            sameUserAsLast={shouldCollapseMessages(messages, index)}\n            isAuthorModerator={(message as ChatMessage).user.scopes?.includes('MODERATOR')}\n            isAuthorAuthenticated={message.user?.authenticated}\n            key={message.id}\n          />\n        );\n      case MessageType.NAME_CHANGE:\n        return getNameChangeViewForMessage(message as NameChangeEvent);\n      case MessageType.CONNECTED_USER_INFO:\n        return getConnectedInfoMessage(message);\n      case MessageType.USER_JOINED:\n        return getUserJoinedMessage(message as ChatMessage);\n      case MessageType.CHAT_ACTION:\n        return getActionMessage(message as ChatMessage);\n      case MessageType.SYSTEM:\n        return (\n          <ChatSystemMessage\n            message={message as ChatMessage}\n            highlightString={usernameToHighlight} // What to highlight in the message\n            key={message.id}\n          />\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const scrollChatToBottom = (ref, behavior = 'smooth') => {\n    setTimeout(() => {\n      ref.current?.scrollToIndex({\n        index: messages.length - 1,\n        behavior,\n      });\n    }, 100);\n\n    setAtBottom(true);\n  };\n\n  // This is a hack to force a scroll to the very bottom of the chat messages\n  // on initial mount of the component.\n  // For https://github.com/owncast/owncast/issues/2500\n  useEffect(() => {\n    setTimeout(() => {\n      scrollChatToBottom(chatContainerRef, 'auto');\n    }, 500);\n  }, []);\n\n  const MessagesTable = useMemo(\n    () => (\n      <>\n        <Virtuoso\n          id=\"virtuoso\"\n          style={{ height }}\n          className={styles.virtuoso}\n          ref={chatContainerRef}\n          data={messages}\n          itemContent={(index, message) => getViewForMessage(index, message)}\n          followOutput={(isAtBottom: boolean) => {\n            if (isAtBottom) {\n              scrollChatToBottom(chatContainerRef, 'smooth');\n            }\n            return false;\n          }}\n          alignToBottom\n          atBottomThreshold={70}\n          atBottomStateChange={bottom => {\n            setAtBottom(bottom);\n          }}\n        />\n        {!atBottom && <ScrollToBotBtn chatContainerRef={chatContainerRef} messages={messages} />}\n      </>\n    ),\n    [messages, usernameToHighlight, chatUserId, isModerator, atBottom],\n  );\n\n  return (\n    <div id=\"chat-container\" className={styles.chatContainer}>\n      {MessagesTable}\n      {showInput && (\n        <div className={styles.chatTextField}>\n          <ChatTextField />\n        </div>\n      )}\n    </div>\n  );\n};\n\nChatContainer.defaultProps = {\n  showInput: true,\n  height: 'auto',\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatAction\":\"ChatActionMessage_chatAction__x9Xsg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toBottomWrap\":\"ChatContainer_toBottomWrap__3V5wa\",\"nameChangeView\":\"ChatContainer_nameChangeView__ziyXN\",\"nameChangeText\":\"ChatContainer_nameChangeText__yXG__\",\"plain\":\"ChatContainer_plain__IPS19\",\"chatContainer\":\"ChatContainer_chatContainer__O2lYN\",\"virtuoso\":\"ChatContainer_virtuoso__OS9Kz\",\"chatTextField\":\"ChatContainer_chatTextField__OqCGL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ChatJoinMessage_root__vuVXa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatModerationNotification\":\"ChatModeratorNotification_chatModerationNotification__kgFWe\",\"icon\":\"ChatModeratorNotification_icon__7FdGg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatSystemMessage\":\"ChatSystemMessage_chatSystemMessage__c6XEN\",\"user\":\"ChatSystemMessage_user__6yHSJ\",\"message\":\"ChatSystemMessage_message__ySq5g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ChatTextField_root__4oUkJ\",\"inputWrap\":\"ChatTextField_inputWrap__1mAjD\",\"maxCharacters\":\"ChatTextField_maxCharacters__yGT4s\",\"emojiButton\":\"ChatTextField_emojiButton__ON_Cu\",\"sendButton\":\"ChatTextField_sendButton__MOmD4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"badge\":\"ChatUserBadge_badge__1EdUp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ChatUserMessage_root__79heB\",\"user\":\"ChatUserMessage_user__xUEp9\",\"message\":\"ChatUserMessage_message__MJ9LD\",\"ownMessage\":\"ChatUserMessage_ownMessage__d28A3\",\"background\":\"ChatUserMessage_background__Tfghp\",\"modMenuWrapper\":\"ChatUserMessage_modMenuWrapper__7fblv\",\"messagePadding\":\"ChatUserMessage_messagePadding__Xp1F6\",\"messagePaddingCollapsed\":\"ChatUserMessage_messagePaddingCollapsed__qxN0E\"};"],"names":["_linearGradient","_path","_path2","_path3","_path4","formatTimestamp","sentAt","now","Date","Number","isNaN","diffInDays","getDiffInDaysFromNow","localeDate","toLocaleDateString","dateStyle","concat","toLocaleTimeString","ChatUserBadge","badge","userColor","param","color","jsx_runtime","jsx","span","style","borderColor","className","styles","LinkOutlined","dynamic","Promise","all","__webpack_require__","e","then","t","bind","ssr","ChatModerationActionMenu","mod","Highlight","resolve","UserTooltip","children","user","displayName","createdAt","content","Tooltip","title","placement","mouseEnterDelay","ChatUserMessage","message","highlightString","showModeratorMenu","sentBySelf","sameUserAsLast","isAuthorModerator","isAuthorAuthenticated","id","messageId","body","timestamp","userId","displayColor","accessToken","useRecoilValue","accessTokenAtom","formattedTimestamp","formattedMessage","setFormattedMessage","useState","badgeNodes","push","useEffect","decodeHTML","div","cn","jsxs","search","dangerouslySetInnerHTML","__html","messageID","userID","userDisplayName","EmojiPicker","SendOutlined","SmileOutlined","Image","p","attributes","element","selected","useSelected","focused","useFocused","contentEditable","img","alt","src","name","display","maxWidth","maxHeight","boxShadow","withImages","editor","isVoid","type","isInline","serialize","node","Text","string","text","length","map","n","join","getCharacterCount","count","forEach","child","ChatTextField","defaultText","showEmojis","setShowEmojis","characterCount","setCharacterCount","websocketService","websocketServiceAtom","useMemo","withReact","createEditor","sendMessage","console","log","send","MessageType","Transforms","at","anchor","Editor","focus","createImageNode","insertImage","url","selection","image","select","parentNode","parentPath","path","Node","Path","force","onEmojiSelect","ReactEditor","emoji","onCustomEmojiSelect","onKeyDown","charCount","key","preventDefault","onPaste","clipboardData","getData","renderElement","classNames","Slate","value","Editable","placeholder","width","role","aria-label","autoFocus","Popover","trigger","onOpenChange","open","paddingLeft","button","onClick","_extends","Object","assign","target","i","arguments","source","prototype","hasOwnProperty","call","apply","moderator","props","react","createElement","height","viewBox","xmlns","gradientUnits","x1","x2","y1","y2","offset","stopColor","d","fill","transform","fillOpacity","stroke","strokeLinejoin","strokeWidth","ChatModeratorNotification","Icon","ChatSystemMessage","TeamOutlined","ChatJoinMessage","padding","fontWeight","VerticalAlignBottomOutlined","ScrollToBotBtn","chatContainerRef","messages","Button","icon","current","scrollToIndex","index","behavior","ChatActionMessage","EditFilled","checkIsModerator","scopes","includes","ChatContainer","usernameToHighlight","chatUserId","isModerator","showInput","atBottom","setAtBottom","useRef","getNameChangeViewForMessage","oldName","marginRight","margin","getUserJoinedMessage","getActionMessage","getConnectedInfoMessage","modStatusUpdate","getViewForMessage","_message_user_scopes","shouldCollapseMessages","lastMessage","lastTimestamp","getTime","thisTimestamp","maxTimestampDelta","authenticated","scrollChatToBottom","ref","setTimeout","MessagesTable","Fragment","Virtuoso","data","itemContent","followOutput","isAtBottom","alignToBottom","atBottomThreshold","atBottomStateChange","bottom","defaultProps","module","exports"],"sourceRoot":""}