{"version":3,"file":"static/chunks/7777-8ceb8fbb8f801dcb.js","mappings":"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vmC,OAAA,SACAwmC,kBAAA,qBACAC,mBAAA,sBACAC,YAAA,eACAC,aAAA,gBACAC,WAAA,eACAC,YAAA,eACAC,SAAA,YACAC,aAAA,gBACAC,cAAA,iBACAC,aAAA,gBACAC,SAAA,aACAC,YAAA,gBACAC,YAAA,gBACAC,YAAA,eACAC,YAAA,eACAC,QAAA,WAEAC,cAAA,gBACAC,cAAA,eACA,EACAvZ,UAAac,GACbzE,WAAA,CACAmd,MAAWja,GACXkU,aAAkBllC,GAClBkrC,WAAA,KACAC,SAAA,KACAhG,kBAAA,KACAiG,WAAgBprC,GAChBqrC,UAAerrC,GACfolC,WAAA,KACAkG,OAAYtrC,GACZurC,cAAA,KACAC,cAAA,KACAC,QAAazrC,GACb0rC,UAAA,KACArG,cAAA,KACAsG,cAAA,KACAC,YAAA,KACAC,KAAA,KACAC,MAAA,KACAC,KAAU/rC,GACVgsC,GAAA,KACAC,SAAA,KACA3G,UAAetlC,GACfxP,UAAeugC,GACfmb,KAAA,KACA3G,SAAA,KACA4G,cAAA,KACA3G,SAAA,KACA7C,MAAA,KACA8C,mBAAA,KACAC,0BAAA,KACAC,aAAA,KACAC,eAAA,KACArtC,QAAA,KACA6zC,kBAAA,KACAC,iBAAA,KACA5U,YAAA,KACA6U,OAAA,KACAC,GAAA,KACAC,GAAA,KACAxrC,EAAA,KACA6kC,SAAA,KACA4G,cAAA,KACAC,QAAa1sC,GACb2sC,gBAAqB3sC,GACrB5N,UAAA,KACAw6C,QAAA,KACAC,IAAA,KACAC,QAAa9sC,GACb8lC,iBAAA,KACA9N,SAAc7G,GACd4b,GAAA,KACAC,GAAA,KACAC,SAAA,KACAC,SAAA,KACAC,UAAentC,GACf+lC,iBAAA,KACA1tC,IAAA,KACAqa,MAAA,KACA06B,SAAcptC,GACdqtC,0BAAA,KACAC,KAAA,KACAtH,YAAiBhmC,GACjBimC,SAAA,KACAsH,OAAA,KACAC,UAAA,KACAC,YAAA,KACAvH,WAAA,KACAC,aAAA,KACAuH,UAAA,KACAC,eAAA,KACAvH,WAAA,KACAC,SAAA,KACAC,eAAA,KACAC,YAAA,KACAC,UAAA,KACAC,YAAA,KACAC,WAAA,KACAkH,OAAA,KACAC,GAAA,KACAtgC,KAAA,KACAugC,GAAA,KACAC,GAAA,KACAC,GAAQld,GACRmd,GAAQnd,GACR6V,UAAe7V,GACf8V,2BAAA,KACAC,yBAAA,KACAqH,SAAA,KACAC,kBAAA,KACAC,cAAA,KACAhoB,QAAA,KACAioB,QAAaruC,GACbsuC,kBAAA,KACAC,WAAA,KACA5V,OAAA,KACA5xB,KAAA,KACA+xB,SAAA,KACAgO,UAAe9mC,GACf+mC,aAAkB/mC,GAClBgnC,aAAkBhnC,GAClBisB,GAAA,KACAuiB,YAAiBxuC,GACjBinC,eAAA,KACAwH,kBAAA,KACAC,GAAA,KACAC,IAAA,KACAC,UAAe5uC,GACfmB,EAAOnB,GACP6uC,GAAQ7uC,GACR8uC,GAAQ9uC,GACR+uC,GAAQ/uC,GACRgvC,GAAQhvC,GACRivC,aAAkBje,GAClBke,iBAAA,KACAC,UAAA,KACAC,WAAA,KACAC,SAAA,KACAC,QAAA,KACArqB,KAAA,KACAsqB,aAAA,KACArI,cAAA,KACAC,cAAA,KACAqI,kBAAuBxvC,GACvByvC,MAAA,KACArI,UAAA,KACAC,UAAA,KACAC,YAAA,KACAoI,aAAA,KACAC,YAAA,KACAC,YAAA,KACAre,KAAA,KACAse,iBAAA,KACAC,UAAA,KACAC,aAAA,KACA3zC,IAAA,KACA+e,MAAA,KACA60B,uBAAA,KACAC,sBAAA,KACAC,UAAelwC,GACfmwC,UAAA,KACAj8C,OAAA,KACAoI,IAAA,KACA8zC,KAAA,KACAn6C,KAAA,KACAsxC,QAAA,KACAC,YAAA,KACAC,aAAA,KACAC,QAAA,KACAC,QAAA,KACAC,QAAA,KACAC,SAAA,KACAC,MAAA,KACAC,UAAA,KACAC,WAAA,KACAqI,WAAA,KACAC,SAAA,KACA/+B,OAAA,KACAgpB,QAAA,KACA0N,WAAA,KACAzN,aAAA,KACAG,cAAA,KACAuN,QAAA,KACApN,SAAA,KACAC,UAAA,KACAC,iBAAA,KACAC,SAAA,KACAC,QAAA,KACAC,QAAA,KACAI,OAAA,KACAC,YAAA,KACAC,MAAA,KACAC,WAAA,KACAC,OAAA,KACAC,UAAA,KACAC,YAAA,KACAC,WAAA,KACAC,YAAA,KACAC,WAAA,KACAC,YAAA,KACAC,OAAA,KACAC,iBAAA,KACAC,UAAA,KACA+L,MAAA,KACA9L,QAAA,KACAC,QAAA,KACAC,QAAA,KACA6L,UAAA,KACAC,WAAA,KACA5L,aAAA,KACAC,QAAA,KACAC,UAAA,KACAC,UAAA,KACAC,WAAA,KACAC,QAAA,KACAE,OAAA,KACAC,aAAA,KACAC,iBAAA,KACAE,YAAA,KACAC,UAAA,KACAE,YAAA,KACAC,aAAA,KACAC,aAAA,KACAC,YAAA,KACAC,WAAA,KACAC,YAAA,KACAC,UAAA,KACAyK,aAAA,KACAxK,UAAA,KACAC,SAAA,KACAC,WAAA,KACAC,WAAA,KACAC,QAAA,KACAC,QAAA,KACAC,OAAA,KACAC,UAAA,KACAC,WAAA,KACAC,WAAA,KACAC,aAAA,KACA+J,SAAA,KACA7J,QAAA,KACAC,SAAA,KACAC,SAAA,KACAG,SAAA,KACAC,UAAA,KACAC,SAAA,KACAuJ,OAAA,KACArJ,UAAA,KACAC,UAAA,KACAC,SAAA,KACAC,UAAA,KACAC,aAAA,KACAC,SAAA,KACAE,SAAA,KACAC,eAAA,KACAC,UAAA,KACA6I,OAAA,KACA8H,QAAA,KACAC,SAAA,KACAxpC,MAAA,KACAypC,OAAA,KACAC,YAAA,KACAvsC,OAAA,KACAwsC,SAAA,KACAC,QAAA,KACAlI,iBAAsB1oC,GACtB2oC,kBAAuB3oC,GACvB4oC,WAAA,KACAC,QAAA,KACA/jC,KAAA,KACA+rC,WAAgB7wC,GAChB8wC,oBAAA,KACAC,iBAAA,KACAC,aAAA,KACAC,MAAA,KACAjR,KAAUjP,GACVmgB,MAAA,KACAnG,cAAA,KACAjC,cAAA,KACAqI,OAAA,KACAC,UAAepxC,GACfqxC,UAAerxC,GACfsxC,UAAetxC,GACfuxC,cAAA,KACAC,oBAAA,KACAC,eAAA,KACAC,UAAA,KACAr3C,SAAc22B,GACdvvB,EAAA,KACAkwC,OAAA,KACArR,eAAA,KACAsR,KAAA,KACAC,KAAA,KACAtR,IAASvP,GACT6S,IAAS7S,GACT+X,gBAAA,KACA+I,YAAA,KACAC,UAAA,KACAC,mBAAwBhhB,GACxBihB,iBAAsBjhB,GACtBkhB,cAAmBlhB,GACnBmhB,gBAAqBnhB,GACrBzL,SAAA,KACA6sB,QAAA,KACA32C,OAAA,KACA42C,OAAA,KACAC,GAAA,KACAC,GAAA,KACAC,MAAA,KACAC,KAAA,KACAzJ,eAAA,KACA0J,KAAA,KACAC,MAAA,KACAC,aAAA,KACAC,iBAAsB7yC,GACtB8yC,iBAAsB9yC,GACtB+yC,aAAA,KACAC,QAAA,KACAC,YAAA,KACAC,aAAA,KACAC,MAAA,KACAC,MAAA,KACAC,YAAA,KACApK,UAAA,KACAC,YAAA,KACAC,sBAA2BnpC,GAC3BopC,uBAA4BppC,GAC5B/E,OAAA,KACAq4C,OAAA,KACAjK,gBAAqBrY,GACrBsY,iBAAA,KACAC,cAAA,KACAC,eAAA,KACAC,iBAAsBzpC,GACtB0pC,cAAmB1pC,GACnB2pC,YAAA,KACA94C,MAAA,KACA0iD,aAAkBvzC,GAClBwzC,aAAA,KACAC,oBAAA,KACAC,WAAA,KACAC,cAAA,KACAC,qBAAA,KACAC,eAAoB7iB,GACpBuQ,SAAcvhC,GACd8zC,YAAA,KACA99C,OAAA,KACA+9C,QAAa/zC,GACbg0C,QAAah0C,GACb4pC,WAAA,KACAC,eAAA,KACAC,cAAA,KACAmK,WAAA,KACAjJ,cAAA,KACAjzB,MAAA,KACAm8B,kBAAA,KACAr6C,KAAA,KACA0J,OAAYytB,GACZmjB,GAAA,KACA1iB,UAAA,KACA2iB,GAAA,KACAC,GAAA,KACAtK,kBAAuB/pC,GACvBgqC,mBAAwBhqC,GACxBs0C,QAAA,KACArK,YAAA,KACAC,aAAA,KACAC,WAAgBnqC,GAChBmJ,OAAA,KACAihC,YAAiBpqC,GACjBuqC,cAAmBvqC,GACnBwqC,aAAA,KACAH,SAAcrqC,GACdsqC,aAAkBtqC,GAClBqkC,QAAA,KACAoG,SAAczqC,GACd0qC,YAAiB1qC,GACjB2qC,YAAiB3qC,GACjBu0C,QAAA,KACAC,WAAA,KACAC,WAAA,KACA9S,MAAA,KACA+S,OAAA,KACA9J,YAAA,KACAC,YAAA,KACA8J,EAAA,KACAC,GAAA,KACAC,GAAA,KACAC,iBAAA,KACAhK,QAAa9qC,GACb+0C,EAAA,KACAC,GAAA,KACAC,GAAA,KACAC,iBAAA,KACAC,EAAA,KACAC,WAAA,KAEA,GCpiBaC,GAAO9kB,GAAK,CAAE4B,GAAKR,GAAOc,GAAOG,GAAMgD,GAAQ,SAC/C0f,GAAM/kB,GAAK,CAAE4B,GAAKR,GAAOc,GAAOG,GAAMqS,GAAO,QCoJ7CsQ,GAYb,SAAAx5C,CAAA,EACA,GAAAA,MAAAA,EACA,OAAey5C,EACf,CAEA,oBAAAz5C,EACA,OA+ES05C,GAKT,SAAAt9C,CAAA,EACA,OAAAA,GAAAA,EAAA0B,IAAA,GArF0BkC,CAsF1B,EArFA,CAEA,oBAAAA,EACA,OAAAtG,MAAAF,OAAA,CAAAwG,GAAqC25C,SAelB3rB,CAAA,EAEnB,IAAAC,EAAA,GACAluB,EAAA,GAEA,OAAAA,EAAAiuB,EAAAp6B,MAAA,EACAq6B,CAAA,CAAAluB,EAAA,CAAoBy5C,GAAOxrB,CAAA,CAAAjuB,EAAA,EAG3B,OAAS25C,GAOT,YAAA7rC,CAAA,EACA,IAAA9N,EAAA,GAEA,OAAAA,EAAAkuB,EAAAr6B,MAAA,EACA,GAAAq6B,CAAA,CAAAluB,EAAA,CAAAvM,IAAA,SAAAqa,GAAA,SAGA,QACA,EACA,EAxC+C7N,GAiDtC05C,GAMT,SAAAt9C,CAAA,EAEA,IAAAlF,EAEA,IAAAA,KA3DoE8I,EA6DpE,GAAA5D,CAAA,CAAAlF,EAAA,GAAAge,CAAA,CAAAhe,EAAA,UAGA,QACA,EAjEoE,CAGpE,sBAAA8I,EACA,OAAe05C,GAAW15C,EAC1B,OAEA,uDAoFA,SAAS05C,GAAWxkC,CAAA,EACpB,OAQA,SAAA9Y,CAAA,IAAAyR,CAAA,EACA,OAAAmH,QACA5Y,GACA,iBAAAA,GACA,SAAAA,GAEA4Y,QAAAE,EAAA1hB,IAAA,MAAA4I,KAAAyR,IAEA,CACA,CAEA,SAAS4rC,IAAE,CACX,QACA,CErQO,IAAMG,GAcb,SAAAxpC,CAAA,CAAApQ,CAAA,CAAAmuB,CAAA,CAAAC,CAAA,EACA,mBAAApuB,GAAA,mBAAAmuB,IACAC,EAAAD,EAEAA,EAAAnuB,EACAA,EAAA,MAGA,IAAAquB,EAAiBmrB,GAAOx5C,GACxBsuB,EAAAF,EAAA,KAEAG,CAOA,SAAAA,EAAAnyB,CAAA,CAAA2D,CAAA,CAAAyuB,CAAA,MAKAt0B,EAFA,IAAAjC,EAAA,iBAAAmE,GAAAA,IAAA,GAAAA,EAAAA,EAAA,GAoBA,MAhBA,iBAAAnE,EAAA6F,IAAA,GACA5D,EACA,iBAAAjC,EAAA8oB,OAAA,CACA9oB,EAAA8oB,OAAA,CACA,iBAAA9oB,EAAAiC,IAAA,CACAjC,EAAAiC,IAAA,CACA6E,KAAAA,CAAA,CAEA1L,OAAAgG,cAAA,CAAAo1B,EAAA,QACAx2B,MACA,SACmBA,EAAA6F,IAAA,CAAA5D,CAAAA,EAAA,IAAAA,EAAA,QACnB,GACA,IAGAu0B,EAEA,SAAAA,GAAA,KAiDiBx2B,EA/CjB,IAEAy2B,EAEAlZ,EAEAmZ,EANAjvB,EAAA,GAQA,KAAAM,GAAAquB,EAAAjyB,EAAA2D,EAAAyuB,CAAA,CAAAA,EAAA56B,MAAA,aAGA8L,CApFiB,IAoFjBA,CAFAA,EAuCA,MAAAlG,OAAA,CADiBvB,EAtCYk2B,EAAA/xB,EAAAoyB,IAwC7Bv2B,EAGA,iBAAAA,EACA,CAtIqB,GAsIDA,EAAA,CAGpB,CAAAA,EAAA,CA7CA,IACA,OAAAyH,CAEA,CAGA,GAAAtD,EAAArH,QAAA,EAAA2K,SAAAA,CAAA,IAOA,IALA8V,EAAA,CAAA4Y,EAAAhyB,EAAArH,QAAA,CAAAnB,MAAA,KAAA06B,EAEAK,EAAAH,EAAA/3B,MAAA,CAAA2F,GAGAoZ,EAAA,IAAAA,EAAApZ,EAAArH,QAAA,CAAAnB,MAAA,GAIA,GAAA86B,CArGiB,IAqGjBA,CAFAA,EAAAH,EAAAnyB,EAAArH,QAAA,CAAAygB,EAAA,CAAAA,EAAAmZ,IAAA,CAEA,IACA,OAAAD,CACA,CAEAlZ,EACA,iBAAAkZ,CAAA,IAAAA,CAAA,IAAAlZ,EAAA8Y,CAAA,CAEA,OAEA5uB,CACA,CACA,GAzEA0Q,EAAA,UA0EA,ECpHaypC,GAcb,SAAAzpC,CAAA,CAAApQ,CAAA,CAAAmuB,CAAA,CAAAC,CAAA,EACA,mBAAApuB,GAAA,mBAAAmuB,IACAC,EAAAD,EACAA,EAAAnuB,EACAA,EAAA,MAGM45C,GAAYxpC,EAAApQ,EAMlB,SAAA5D,CAAA,CAAAoyB,CAAA,EACA,IAAA9D,EAAA8D,CAAA,CAAAA,EAAA56B,MAAA,IACA,OAAAu6B,EACA/xB,EACAsuB,EAAAA,EAAA31B,QAAA,CAAAtB,OAAA,CAAA2I,GAAA,KACAsuB,EAEA,EAbkB0D,EAclB,EClCe,SAAA0rB,GAAAlhD,CAAA,EACf,GAAAA,EAAAmhD,eAAA,EAAAnhD,EAAAohD,kBAAA,CACA,gBACA,2EACA,CAGA,GACAphD,EAAAmhD,eAAA,EACAnhD,EAAAohD,kBAAA,EACAphD,EAAAqhD,YAAA,CAEA,WACMJ,GAAKzpC,EAAA,WAAAhU,EAAA2D,EAAAm6C,IAAA,KAGX7oC,EAYA,GAVAzY,EAAAmhD,eAAA,CACA1oC,EAAA,CAAAzY,EAAAmhD,eAAA,CAAAtuC,QAAA,CAAArP,EAAA2kB,OAAA,EACUnoB,EAAAohD,kBAAA,EACV3oC,CAAAA,EAAAzY,EAAAohD,kBAAA,CAAAvuC,QAAA,CAAArP,EAAA2kB,OAAA,GAGA,CAAA1P,GAAAzY,EAAAqhD,YAAA,mBAAAl6C,GACAsR,CAAAA,EAAA,CAAAzY,EAAAqhD,YAAA,CAAA79C,EAAA2D,EAXgDm6C,EAWhD,EAGA7oC,GAAA,iBAAAtR,EAOA,OANAnH,EAAAuhD,gBAAA,EAAA/9C,EAAArH,QAAA,CACA21B,EAAA31B,QAAA,CAAAoc,MAAA,CAAApR,EAAA,KAAA3D,EAAArH,QAAA,EAEA21B,EAAA31B,QAAA,CAAAoc,MAAA,CAAApR,EAAA,GAGAA,CACA,EAIA,CACA,iBExDA,IAAAq6C,GAAA,kBACAC,GAAA,UACAC,GAAA,SA+CA,SAAAC,GAAA31B,CAAA,EACA,UAAAA,EAAAxI,WAAA,EACA,CAMA,SAAAo+B,GAAA51B,CAAA,EACA,OAAAA,EAAAjnB,MAAA,IAAA0e,WAAA,EACA,CC1DO,IAAAo+B,GAAA,CACPjU,QAAA,UACAsD,SAAA,WACAvM,OAAA,SACA+P,gBAAA,kBACAC,iBAAA,mBACAC,cAAA,gBACAC,eAAA,iBACAC,iBAAA,mBACAlmC,OAAA,SACAquB,aAAA,eACAC,aAAA,eACAC,UAAA,YACAC,UAAA,YACAC,UAAA,YACAC,WAAA,aACAC,UAAA,YACAS,WAAA,YACA,kBI3BA,IAAA8jB,GAAA,gCAMO,SAAAC,GAAAC,CAAA,EACP,IAAA/xC,EAAA,CAAA+xC,GAAA,IAAAp/C,IAAA,GACAq/C,EAAAhyC,EAAAlL,MAAA,IAEA,GAAAk9C,MAAAA,GAAAA,MAAAA,EACA,OAAAhyC,CACA,CAEA,IAAAiyC,EAAAjyC,EAAApV,OAAA,MACA,GAAAqnD,KAAAA,EACA,OAAAjyC,CACA,CAEA,IAAA9I,EAAA,GAEA,OAAAA,EAAA26C,GAAA9mD,MAAA,GACA,IAAAgY,EAAA8uC,EAAA,CAAA36C,EAAA,CAEA,GACA+6C,IAAAlvC,EAAAhY,MAAA,EACAiV,EAAAzL,KAAA,GAAAwO,EAAAhY,MAAA,EAAAwoB,WAAA,KAAAxQ,EAEA,OAAA/C,CACA,QAIA,KADA9I,CAAAA,EAAA8I,EAAApV,OAAA,QACAqnD,EAAA/6C,GAKAA,KADAA,CAAAA,EAAA8I,EAAApV,OAAA,QACAqnD,EAAA/6C,EAJA8I,EASA,oBARA,CC4EA,IAAMkyC,GAAG,GAAKxnD,cAAA,CAIdynD,GAAA,IAAAC,IAAA,wCAiPA,SAAAC,GAAAxwB,CAAA,CAAAtuB,CAAA,EACA,IAAA2D,EAAA,GACAo7C,EAAA,EAEA,KACA,EADAp7C,EAAA2qB,EAAA31B,QAAA,CAAAnB,MAAA,EACA82B,EAAA31B,QAAA,CAAAgL,EAAA,GAAA3D,GACA,YAAAsuB,EAAA31B,QAAA,CAAAgL,EAAA,CAAAjC,IAAA,EAAAq9C,IAGA,OAAAA,CACA,CAqEA,SAAAC,GAAA1uB,CAAA,CAAA7H,CAAA,EACA,OAAAA,EAAAxI,WAAA,EACA,CCjZA,IAAMg/B,GAAG,GAAK9nD,cAAA,CAKd+nD,GAAA,CACAlsC,QAAA,CAAYgpC,GAAA,gBAAAloB,GAAA,mCACZqrB,UAAA,CAAcnD,GAAA,aAAAloB,GAAA,kCACdsrB,WAAA,CAAetrB,GAAA,wCACf6C,mBAAA,CAAuB7C,GAAA,wCACvBurB,WAAA,CAAevrB,GAAA,wCACf3zB,OAAA,CAAW67C,GAAA,WAAAloB,GAAA,6BACXwrB,UAAA,CACAtD,GAAA,eACAloB,GAAA,oDACA,EACAyrB,aAAA,CACAvD,GAAA,kBACAloB,GAAA,oDACA,EACA0rB,gBAAA,CACAxD,GAAA,qBACAloB,GAAA,oDACA,EACA2rB,iBAAA,CACAzD,GAAA,sBACAloB,GAAA,gDACA,CACA,EAQO,SAAA4rB,GAAAljD,CAAA,EACP,QAAA1B,KAAAokD,GACA,GAAQD,GAAG7nD,IAAA,CAAA8nD,GAAApkD,IAA0BmkD,GAAG7nD,IAAA,CAAAoF,EAAA1B,GAAA,CACxC,IAAA6kD,EAAAT,EAAA,CAAApkD,EAAA,CACA8kD,QAAAC,IAAA,CACA,oCACAF,EAAA3D,EAAA,UAAoC2D,EAAA3D,EAAA,CAAe,6BACrClhD,+EAA4B6kD,EAAA7rB,EAAA,kBAAe,EAEzD,OAAAorB,EAAA,CAAApkD,EAAA,CACA,IAGAqX,EAAoB3B,IACpBsB,GAAA,CAAS0f,IACT1f,GAAA,CAAAtV,EAAAsjD,aAAA,MACAhuC,GAAA,CAASkmB,GAAY,CACrB,GAAAx7B,EAAAujD,mBAAA,CACAppB,mBAAA,EACA,GACA7kB,GAAA,CAAAtV,EAAAwjD,aAAA,MACAluC,GAAA,CAAS4rC,GAAYlhD,GAErB8P,EAAA,IAAmBwC,CAEnB,kBAAAtS,EAAA7D,QAAA,CACA2T,EAAAzQ,KAAA,CAAAW,EAAA7D,QAAA,CACIgK,KAAAA,IAAAnG,EAAA7D,QAAA,EAAA6D,IAAA,GAAAA,EAAA7D,QAAA,EACJinD,QAAAC,IAAA,CACA,0EAAgFrjD,EAAA7D,QAAA,CAAiB,MAIjG,IAAAsnD,EAAA9tC,EAAA8B,OAAA,CAAA9B,EAAA9G,KAAA,CAAAiB,GAAAA,GAEA,GAAA2zC,SAAAA,EAAAv+C,IAAA,CACA,0CAIA,IAAA4B,EAAe48C,EAAAxmD,aAAmB,CAC9BwmD,EAAAt2C,QAAc,CAClB,GACIu2C,SDMGA,EAAAllC,CAAA,CAAAjb,CAAA,MAKP01B,EAHA,IAAA/8B,EAAA,GACAynD,EAAA,GAIA,OAAAA,EAAApgD,EAAArH,QAAA,CAAAnB,MAAA,EAGAk+B,YAAAA,CAFAA,EAAA11B,EAAArH,QAAA,CAAAynD,EAAA,EAEA1+C,IAAA,CACA/I,EAAAiI,IAAA,CAAAy/C,SA+BAplC,CAAA,CAAAjb,CAAA,CAAA2D,CAAA,CAAA2qB,CAAA,MAcApsB,EAbA,IAAA1F,EAAAye,EAAAze,OAAA,CACA88B,EACA98B,KAAAmG,IAAAnG,EAAA8jD,gBAAA,CACQ/B,GACR/hD,EAAA8jD,gBAAA,CACAC,EAAAtlC,EAAAulC,MAAA,CAGA1iD,EAAAkC,EAAA2kB,OAAA,CAEAgR,EAAA,GACA6qB,EAAAD,EASA,GALA,SAAAA,EAAApoB,KAAA,EAAAr6B,QAAAA,IACA0iD,EAAarD,GACbliC,EAAAulC,MAAA,CAAAA,GAGAxgD,EAAA21B,UAAA,CACA,IAAAzzB,KAAAlC,EAAA21B,UAAA,CACUgpB,GAAGvnD,IAAA,CAAA4I,EAAA21B,UAAA,CAAAzzB,IACbu+C,SA2LA3oD,CAAA,CAAAiK,CAAA,CAAAlG,CAAA,CAAAw7B,CAAA,EACA,IAAAlnB,EAAeuwC,SNtWRF,CAAA,CAAA3kD,CAAA,EACP,IAAAq8B,EAAiBG,GAASx8B,GAC1BkG,EAAAlG,EACA8kD,EAAaroB,GAEb,GAAAJ,KAAAsoB,EAAAtoB,MAAA,CACA,OAAAsoB,EAAAt+C,QAAA,CAAAs+C,EAAAtoB,MAAA,CAAAA,EAAA,EAGA,GAAAA,EAAA1gC,MAAA,IAAA0gC,SAAAA,EAAAl3B,KAAA,OAAAg9C,GAAAp6C,IAAA,CAAA/H,GAAA,CAEA,GAAAA,MAAAA,EAAA0F,MAAA,KAEA,IAAAq/C,EAAA/kD,EAAAmF,KAAA,IAAA1B,OAAA,CAAA2+C,GAAAG,IACAr8C,EAAA,OAAA6+C,EAAAr/C,MAAA,IAAA0e,WAAA,GAAA2gC,EAAA5/C,KAAA,GACA,KAAM,CAEN,IAAA4/C,EAAA/kD,EAAAmF,KAAA,IAEA,IAAAi9C,GAAAr6C,IAAA,CAAAg9C,GAAA,CACA,IAAAC,EAAAD,EAAAthD,OAAA,CAAA4+C,GAAAC,IAEA,MAAA0C,EAAAt/C,MAAA,KACAs/C,CAAAA,EAAA,IAAAA,CAAA,EAGAhlD,EAAA,OAAAglD,CACA,EACA,EAEW1nB,EACX,QAEA,IAAAwnB,EAAA5+C,EAAAlG,EACA,EMoUmBw7B,EAAAmpB,MAAA,CAAAz+C,GACnBuB,EAAAzH,QAIAyH,GAAAA,GAAAA,IAMAhG,MAAAF,OAAA,CAAAkG,IACAA,CAAAA,EAAA6M,EAAAwoB,cAAA,CAAmCmoB,SHvUV9vC,CAAA,CAAAxU,CAAA,EACzB,IAAAmW,EAAA,GAGAouC,EAAA/vC,KAAAA,CAAA,CAAAA,EAAAxZ,MAAA,QAAAwZ,EAAA,IAAAA,CAAA,CAEA,OAAA+vC,EACArzC,IAAA,CACA,CAAAiF,EAAAquC,QAAA,SACA,IACAruC,CAAAA,CAAA,IAAAA,EAAAsuC,OAAA,UAEA7hD,IAAA,EACA,EG0TyCkE,GJ7WzC0N,EAAAtD,IAAA,MAAAtO,IAAA,EI6W0D,EAG1D,UAAA+Q,EAAAjO,QAAA,mBAAAoB,GACAA,CAAAA,EAAA49C,SAkBArlD,CAAA,EAEA,IAAAyH,EAAA,GAEA,IACI69C,GAAKtlD,EAWT,SAAAiC,CAAA,CAAAsL,CAAA,EACA,IAAAJ,EAAAlL,SAAAA,EAAAkD,KAAA,YAAkDlD,EAAAkD,KAAA,IAAc,EAAAlD,CAAA,CAChEwF,CAAA,CAAA0F,EAAA1J,OAAA,aAAA0/C,IAAA,CAAA51C,CACA,EAbA,CAAI,MAEJ,CAEA,OAAA9F,CAUA,EAtCAA,EAAA,EAGA6M,EAAAgoB,KAAA,EAAAhoB,EAAAjO,QAAA,CACApK,CAAA,CACM6mD,GAAGvnD,IAAA,CAAMinD,GAAWluC,EAAAjO,QAAA,EAChBm8C,EAAW,CAAAluC,EAAAjO,QAAA,EACrBiO,EAAAjO,QAAA,CACA,CAAAoB,EACI6M,EAAAooB,SAAA,EACJzgC,CAAAA,CAAA,CAAAqY,EAAAooB,SAAA,EAAAj1B,CAAA,EAEA,EAxNAqyB,EAAAzzB,EAAAlC,EAAA21B,UAAA,CAAAzzB,EAAA,CAAA+Y,EAGA,CAEAnd,CAAAA,OAAAA,GAAAA,OAAAA,CAAA,GACAmd,EAAAmmC,SAAA,GAGA,IAAAzoD,EAAAwnD,EAAAllC,EAAAjb,GAEAlC,CAAAA,OAAAA,GAAAA,OAAAA,CAAA,GACAmd,EAAAmmC,SAAA,GAIAnmC,EAAAulC,MAAA,CAAAD,EAIA,IAAA1gD,EAAAG,EAAAH,QAAA,GACAC,MAAA,CAAYC,KAAA,KAAAP,OAAA,KAAA4Z,OAAA,MACZlZ,IAAA,CAAUH,KAAA,KAAAP,OAAA,KAAA4Z,OAAA,KACV,EACAioC,EACA7kD,EAAA8kD,UAAA,EAA0B3C,GAAGvnD,IAAA,CAAAoF,EAAA8kD,UAAA,CAAAxjD,GAC7BtB,EAAA8kD,UAAA,CAAAxjD,EAAA,CACAA,CAAA,CACAyjD,EAAA,iBAAAF,GAAAA,IAA+DnB,EAAAt2C,QAAc,CAE7E,IAAO43C,GAAAt2C,kBAA0B,CAAAm2C,GACjC,gBACA,wBAA8BvjD,EAAK,qCACnC,CA0DA,GAvDA63B,EAAA76B,GAAA,EACAgD,EACA+B,EAAAC,KAAA,CAAAC,IAAA,CACAF,EAAAC,KAAA,CAAAN,MAAA,CACAmE,EACA,CAAA+J,IAAA,MAEA,MAAA5P,GAAAtB,EAAAilD,UAAA,EACA9rB,CAAAA,EAAA93B,MAAA,CACA,mBAAArB,EAAAilD,UAAA,CACAjlD,EAAAilD,UAAA,CACAhuC,OAAAkiB,EAAA/mB,IAAA,MACA5O,EAAArH,QAAA,CACA,iBAAAg9B,EAAA/V,KAAA,CAAA+V,EAAA/V,KAAA,OAEApjB,EAAAilD,UAAA,EAGA,MAAA3jD,GAAAw7B,GACA3D,CAAAA,EAAA/mB,IAAA,CAAA0qB,EACA7lB,OAAAkiB,EAAA/mB,IAAA,MACA5O,EAAArH,QAAA,CACA,iBAAAg9B,EAAA/V,KAAA,CAAA+V,EAAA/V,KAAA,MACA,EAIA2hC,GACAzjD,SAAAA,GACAwwB,YAAAA,EAAA5sB,IAAA,EACA4sB,QAAAA,EAAA3J,OAAA,EAEAgR,CAAAA,EAAA+rB,MAAA,KAIAH,GACAzjD,OAAAA,GACAA,OAAAA,GACAA,OAAAA,GACAA,OAAAA,GACAA,OAAAA,GACAA,OAAAA,GAEA63B,CAAAA,EAAAgsB,KAAA,CAAA1oD,OAAAwN,QAAA,CAAA3I,EAAAyD,MAAA,SAGA,QAAAzD,GAAAtB,EAAAolD,iBAAA,EACAjsB,CAAAA,EAAAp3B,GAAA,CAAA/B,EAAAolD,iBAAA,CACAnuC,OAAAkiB,EAAAp3B,GAAA,MACAkV,OAAAkiB,EAAA9gB,GAAA,MACA,iBAAA8gB,EAAA/V,KAAA,CAAA+V,EAAA/V,KAAA,MACA,EAGA,CAAA2hC,GAAAzjD,OAAAA,GAAAwwB,YAAAA,EAAA5sB,IAAA,EACA,IAAAq/C,EAAAc,SA0DA7hD,CAAA,EACA,IAAA2D,EAAA,GAEA,OAAAA,EAAA3D,EAAArH,QAAA,CAAAnB,MAAA,GACA,IAAAk+B,EAAA11B,EAAArH,QAAA,CAAAgL,EAAA,CAEA,GAAA+xB,YAAAA,EAAAh0B,IAAA,EAAAg0B,UAAAA,EAAA/Q,OAAA,CACA,OAAA+Q,CACA,CAGA,aArEA11B,EACA21B,CAAAA,EAAAnK,OAAA,CACAu1B,GAAAA,EAAAprB,UAAA,CAAA/c,QAAAmoC,EAAAprB,UAAA,CAAAnK,OAAA,OACAmK,EAAAhyB,KAAA,CAAAm7C,GAAAxwB,EAAAtuB,GACA21B,EAAAlH,OAAA,CAAAH,OAAAA,EAAA3J,OAAA,CACA,OAEA48B,GAAAzjD,OAAAA,GAAAA,OAAAA,IACA63B,EAAAlH,OAAA,CAAA3wB,OAAAA,EACA63B,EAAAtJ,KAAA,CAAApR,EAAAmmC,SAAA,EAGA,OAAAtjD,GAAAA,OAAAA,IACA63B,EAAAG,KAAA,GACAH,EAAAj9B,KAAA,EAAAi9B,CAAAA,EAAAj9B,KAAA,KAEAi9B,EAAAj9B,KAAA,CAAAopD,SAAA,CAAAnsB,EAAAG,KAAA,CACA,OAAAH,EAAAG,KAAA,EAGAyrB,GACA5rB,CAAAA,EAAAosB,QAAA,CAAAjkD,OAAAA,CAAA,GAIAyjD,GAAAzjD,OAAAA,GAAAwwB,YAAAA,EAAA5sB,IAAA,EACAi0B,CAAAA,EAAAosB,QAAA,CAAAnpC,QAAA0V,UAAAA,EAAA3J,OAAA,GAIAnoB,EAAAwlD,SAAA,EACArsB,CAAAA,CAAA,mBAsIA,CACAt0B,EAAAvB,KAAA,CAAAC,IAAA,CACA,IACAsB,EAAAvB,KAAA,CAAAN,MAAA,CACA,IACA6B,EAAAnB,GAAA,CAAAH,IAAA,CACA,IACAsB,EAAAnB,GAAA,CAAAV,MAAA,CACA,CACA4P,GAAA,CAAAqE,QACA/F,IAAA,IAhJA,EAGA,CAAA6zC,GAAA/kD,EAAAylD,YAAA,EACAtsB,CAAAA,EAAAusB,cAAA,CAAAliD,EAAAH,QAAA,EAIA,CAAA0hD,GAAA/kD,EAAA2lD,mBAAA,GACAxsB,EAAAhyB,KAAA,CAAAm7C,GAAAxwB,EAAAtuB,GACA21B,EAAAysB,YAAA,CAAAtD,GAAAxwB,IAGAizB,GACA5rB,CAAAA,EAAA31B,IAAA,CAAAA,CAAA,EAIArH,EAAAnB,MAAA,GACM0oD,EAAAxmD,aAAmB,CAAA2nD,EAAA1rB,EAAAh9B,GACnBunD,EAAAxmD,aAAmB,CAAA2nD,EAAA1rB,EAAA,EAtMzB1a,EAAAya,EAAA0qB,EAAApgD,IACM01B,SAAAA,EAAAh0B,IAAA,CASN,YAAA1B,EAAA0B,IAAA,EACAk9C,GAAAyD,GAAA,CAAAriD,EAAA2kB,OAAA,GACS29B,SPpIFrvC,CAAA,EAEP,IAAApX,EAEAoX,GAAA,iBAAAA,GAAAA,SAAAA,EAAAvR,IAAA,CAEAuR,EAAApX,KAAA,KACAoX,CAAA,CAIA,uBAAApX,GAAAA,KAAAA,EAAAyD,OAAA,mBACA,EOwHmBo2B,IAEnB/8B,EAAAiI,IAAA,CAAA80B,EAAA75B,KAAA,EAEM,QAAA65B,EAAAh0B,IAAA,EAAAuZ,EAAAze,OAAA,CAAA+lD,QAAA,EAEN5pD,EAAAiI,IAAA,CAAA80B,EAAA75B,KAAA,EAIA,OAAAlD,CACA,ECxCmB,CAAE6D,QAAAA,EAAAgkD,OAAiBtD,GAAIkE,UAAA,GAAenB,IAOzD,OAJAzjD,EAAAnE,SAAA,EACAiL,CAAAA,EAAa48C,EAAAxmD,aAAmB,QAASrB,UAAAmE,EAAAnE,SAAA,EAA6BiL,EAAA,EAGtEA,CACA,CAEAo8C,GAAA8C,SAAA,EAEA7pD,SAAY8pD,GAAA3/C,MAAgB,CAE5BzK,UAAaoqD,GAAA3/C,MAAgB,CAE7B+6C,aAAgB4E,GAAAr+C,IAAc,CAC9Bu5C,gBAAmB8E,GAAAx6C,OAAiB,CAACw6C,GAAA3/C,MAAgB,EACrD86C,mBAAsB6E,GAAAx6C,OAAiB,CAACw6C,GAAA3/C,MAAgB,EACxDi7C,iBAAoB0E,GAAA76C,IAAc,CAElCk4C,cAAiB2C,GAAAx6C,OAAiB,CAC9Bw6C,GAAAl6C,SAAmB,EACjBk6C,GAAA36C,MAAgB,CAChB26C,GAAAr+C,IAAc,CACdq+C,GAAAx6C,OAAiB,CACfw6C,GAAAl6C,SAAmB,EACjBk6C,GAAA76C,IAAc,CACd66C,GAAA3/C,MAAgB,CAChB2/C,GAAA36C,MAAgB,CAChB26C,GAAAr+C,IAAc,CACdq+C,GAAAx6C,OAAiB,CAGfw6C,GAAAz6C,GAAa,EAEzB,GAEA,GAEAg4C,cAAiByC,GAAAx6C,OAAiB,CAC9Bw6C,GAAAl6C,SAAmB,EACjBk6C,GAAA36C,MAAgB,CAChB26C,GAAAr+C,IAAc,CACdq+C,GAAAx6C,OAAiB,CACfw6C,GAAAl6C,SAAmB,EACjBk6C,GAAA76C,IAAc,CACd66C,GAAA3/C,MAAgB,CAChB2/C,GAAA36C,MAAgB,CAChB26C,GAAAr+C,IAAc,CACdq+C,GAAAx6C,OAAiB,CAGfw6C,GAAAz6C,GAAa,EAEzB,GAEA,GAGAg6C,UAAaS,GAAA76C,IAAc,CAC3Bq6C,aAAgBQ,GAAA76C,IAAc,CAC9B26C,SAAYE,GAAA76C,IAAc,CAC1Bu6C,oBAAuBM,GAAA76C,IAAc,CACrC04C,iBAAoBmC,GAAAl6C,SAAmB,EAAEk6C,GAAAr+C,IAAc,CAAEq+C,GAAA76C,IAAc,GACvE65C,WAAcgB,GAAAl6C,SAAmB,EAAEk6C,GAAAr+C,IAAc,CAAEq+C,GAAA3/C,MAAgB,GACnE8+C,kBAAqBa,GAAAr+C,IAAc,CACnCk9C,WAAcmB,GAAA36C,MAAgB,AAC9B","sources":["webpack://_N_E/./node_modules/antd/es/layout/index.js","webpack://_N_E/./node_modules/antd/es/spin/index.js","webpack://_N_E/./node_modules/date-fns/esm/_lib/roundingMethods/index.js","webpack://_N_E/./node_modules/date-fns/esm/differenceInMilliseconds/index.js","webpack://_N_E/./node_modules/date-fns/esm/differenceInSeconds/index.js","webpack://_N_E/./node_modules/extend/index.js","webpack://_N_E/./node_modules/inline-style-parser/index.js","webpack://_N_E/./node_modules/is-buffer/index.js","webpack://_N_E/./node_modules/lodash/_Symbol.js","webpack://_N_E/./node_modules/lodash/_baseGetTag.js","webpack://_N_E/./node_modules/lodash/_baseTrim.js","webpack://_N_E/./node_modules/lodash/_freeGlobal.js","webpack://_N_E/./node_modules/lodash/_getRawTag.js","webpack://_N_E/./node_modules/lodash/_objectToString.js","webpack://_N_E/./node_modules/lodash/_root.js","webpack://_N_E/./node_modules/lodash/_trimmedEndIndex.js","webpack://_N_E/./node_modules/lodash/debounce.js","webpack://_N_E/./node_modules/lodash/isObject.js","webpack://_N_E/./node_modules/lodash/isObjectLike.js","webpack://_N_E/./node_modules/lodash/isSymbol.js","webpack://_N_E/./node_modules/lodash/now.js","webpack://_N_E/./node_modules/lodash/toNumber.js","webpack://_N_E/./node_modules/next/head.js","webpack://_N_E/./node_modules/next/router.js","webpack://_N_E/./node_modules/prop-types/factoryWithThrowingShims.js","webpack://_N_E/./node_modules/prop-types/index.js","webpack://_N_E/./node_modules/prop-types/lib/ReactPropTypesSecret.js","webpack://_N_E/./node_modules/react-markdown/node_modules/react-is/cjs/react-is.production.min.js","webpack://_N_E/./node_modules/react-markdown/node_modules/react-is/index.js","webpack://_N_E/./node_modules/react-markdown/node_modules/style-to-object/index.js","webpack://_N_E/./node_modules/unist-util-stringify-position/lib/index.js","webpack://_N_E/./node_modules/react-markdown/node_modules/vfile-message/index.js","webpack://_N_E/./node_modules/react-markdown/node_modules/vfile/lib/minpath.browser.js","webpack://_N_E/./node_modules/react-markdown/node_modules/vfile/lib/minproc.browser.js","webpack://_N_E/./node_modules/react-markdown/node_modules/vfile/lib/minurl.shared.js","webpack://_N_E/./node_modules/react-markdown/node_modules/vfile/lib/minurl.browser.js","webpack://_N_E/./node_modules/react-markdown/node_modules/vfile/lib/index.js","webpack://_N_E/./node_modules/react-markdown/node_modules/bail/index.js","webpack://_N_E/./node_modules/react-markdown/node_modules/is-plain-obj/index.js","webpack://_N_E/./node_modules/react-markdown/node_modules/trough/index.js","webpack://_N_E/./node_modules/react-markdown/node_modules/unified/lib/index.js","webpack://_N_E/./node_modules/mdast-util-to-string/index.js","webpack://_N_E/./node_modules/micromark-util-chunked/index.js","webpack://_N_E/./node_modules/micromark-util-combine-extensions/index.js","webpack://_N_E/./node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","webpack://_N_E/./node_modules/micromark-util-character/index.js","webpack://_N_E/./node_modules/micromark-factory-space/index.js","webpack://_N_E/./node_modules/micromark/lib/initialize/content.js","webpack://_N_E/./node_modules/micromark/lib/initialize/document.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/blank-line.js","webpack://_N_E/./node_modules/micromark-util-subtokenize/index.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/content.js","webpack://_N_E/./node_modules/micromark/lib/initialize/flow.js","webpack://_N_E/./node_modules/micromark/lib/initialize/text.js","webpack://_N_E/./node_modules/micromark-util-resolve-all/index.js","webpack://_N_E/./node_modules/micromark/lib/create-tokenizer.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/thematic-break.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/list.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/block-quote.js","webpack://_N_E/./node_modules/micromark-factory-destination/index.js","webpack://_N_E/./node_modules/micromark-factory-label/index.js","webpack://_N_E/./node_modules/micromark-factory-title/index.js","webpack://_N_E/./node_modules/micromark-factory-whitespace/index.js","webpack://_N_E/./node_modules/micromark-util-normalize-identifier/index.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/definition.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/code-indented.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/heading-atx.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/setext-underline.js","webpack://_N_E/./node_modules/micromark-util-html-tag-name/index.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/html-flow.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/code-fenced.js","webpack://_N_E/./node_modules/decode-named-character-reference/index.dom.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/character-reference.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/character-escape.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/line-ending.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/label-end.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/label-start-image.js","webpack://_N_E/./node_modules/micromark-util-classify-character/index.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/attention.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/autolink.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/html-text.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/label-start-link.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/hard-break-escape.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/code-text.js","webpack://_N_E/./node_modules/micromark/lib/constructs.js","webpack://_N_E/./node_modules/micromark/lib/parse.js","webpack://_N_E/./node_modules/micromark/lib/preprocess.js","webpack://_N_E/./node_modules/micromark/lib/postprocess.js","webpack://_N_E/./node_modules/micromark-util-decode-numeric-character-reference/index.js","webpack://_N_E/./node_modules/micromark-util-decode-string/index.js","webpack://_N_E/./node_modules/mdast-util-from-markdown/lib/index.js","webpack://_N_E/./node_modules/react-markdown/node_modules/remark-parse/lib/index.js","webpack://_N_E/./node_modules/react-markdown/node_modules/remark-parse/index.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/unist-builder/lib/index.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/unist-util-is/lib/index.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/unist-util-visit-parents/color.browser.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/unist-util-visit-parents/index.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/unist-util-visit/index.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/unist-util-position/lib/index.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/unist-util-generated/lib/index.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/mdast-util-definitions/index.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/traverse.js","webpack://_N_E/./node_modules/micromark-util-sanitize-uri/index.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/wrap.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/footer.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/break.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/code.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/delete.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/footnote.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/heading.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/html.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/revert.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/image.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/link.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/list-item.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/list.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/root.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/strong.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/table.js","webpack://_N_E/./node_modules/trim-lines/index.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/text.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/index.js","webpack://_N_E/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/index.js","webpack://_N_E/./node_modules/remark-rehype/lib/index.js","webpack://_N_E/./node_modules/react-markdown/node_modules/property-information/lib/util/schema.js","webpack://_N_E/./node_modules/react-markdown/node_modules/property-information/lib/util/merge.js","webpack://_N_E/./node_modules/react-markdown/node_modules/property-information/lib/normalize.js","webpack://_N_E/./node_modules/react-markdown/node_modules/property-information/lib/util/info.js","webpack://_N_E/./node_modules/react-markdown/node_modules/property-information/lib/util/types.js","webpack://_N_E/./node_modules/react-markdown/node_modules/property-information/lib/util/defined-info.js","webpack://_N_E/./node_modules/react-markdown/node_modules/property-information/lib/util/create.js","webpack://_N_E/./node_modules/react-markdown/node_modules/property-information/lib/xlink.js","webpack://_N_E/./node_modules/react-markdown/node_modules/property-information/lib/xml.js","webpack://_N_E/./node_modules/react-markdown/node_modules/property-information/lib/util/case-sensitive-transform.js","webpack://_N_E/./node_modules/react-markdown/node_modules/property-information/lib/util/case-insensitive-transform.js","webpack://_N_E/./node_modules/react-markdown/node_modules/property-information/lib/xmlns.js","webpack://_N_E/./node_modules/react-markdown/node_modules/property-information/lib/aria.js","webpack://_N_E/./node_modules/react-markdown/node_modules/property-information/lib/html.js","webpack://_N_E/./node_modules/react-markdown/node_modules/property-information/lib/svg.js","webpack://_N_E/./node_modules/react-markdown/node_modules/property-information/index.js","webpack://_N_E/./node_modules/react-markdown/node_modules/unist-util-is/lib/index.js","webpack://_N_E/./node_modules/react-markdown/node_modules/unist-util-visit-parents/color.browser.js","webpack://_N_E/./node_modules/react-markdown/node_modules/unist-util-visit-parents/index.js","webpack://_N_E/./node_modules/react-markdown/node_modules/unist-util-visit/index.js","webpack://_N_E/./node_modules/react-markdown/lib/rehype-filter.js","webpack://_N_E/./node_modules/hast-util-whitespace/index.js","webpack://_N_E/./node_modules/react-markdown/node_modules/property-information/lib/find.js","webpack://_N_E/./node_modules/react-markdown/node_modules/property-information/lib/hast-to-react.js","webpack://_N_E/./node_modules/space-separated-tokens/index.js","webpack://_N_E/./node_modules/comma-separated-tokens/index.js","webpack://_N_E/./node_modules/react-markdown/node_modules/style-to-object/index.mjs","webpack://_N_E/./node_modules/react-markdown/lib/uri-transformer.js","webpack://_N_E/./node_modules/react-markdown/lib/ast-to-react.js","webpack://_N_E/./node_modules/react-markdown/lib/react-markdown.js","webpack://_N_E/<anon>"],"sourcesContent":["import InternalLayout, { Content, Footer, Header } from './layout';\nimport Sider from './Sider';\nvar Layout = InternalLayout;\nLayout.Header = Header;\nLayout.Footer = Footer;\nLayout.Content = Content;\nLayout.Sider = Sider;\nexport default Layout;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport classNames from 'classnames';\nimport debounce from 'lodash/debounce';\nimport omit from \"rc-util/es/omit\";\nimport * as React from 'react';\nimport { ConfigConsumer, ConfigContext } from '../config-provider';\nimport { cloneElement, isValidElement } from '../_util/reactNode';\nimport { tuple } from '../_util/type';\nvar SpinSizes = tuple('small', 'default', 'large');\n// Render indicator\nvar defaultIndicator = null;\nfunction renderIndicator(prefixCls, props) {\n  var indicator = props.indicator;\n  var dotClassName = \"\".concat(prefixCls, \"-dot\");\n  // should not be render default indicator when indicator value is null\n  if (indicator === null) {\n    return null;\n  }\n  if (isValidElement(indicator)) {\n    return cloneElement(indicator, {\n      className: classNames(indicator.props.className, dotClassName)\n    });\n  }\n  if (isValidElement(defaultIndicator)) {\n    return cloneElement(defaultIndicator, {\n      className: classNames(defaultIndicator.props.className, dotClassName)\n    });\n  }\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: classNames(dotClassName, \"\".concat(prefixCls, \"-dot-spin\"))\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"\".concat(prefixCls, \"-dot-item\")\n  }), /*#__PURE__*/React.createElement(\"i\", {\n    className: \"\".concat(prefixCls, \"-dot-item\")\n  }), /*#__PURE__*/React.createElement(\"i\", {\n    className: \"\".concat(prefixCls, \"-dot-item\")\n  }), /*#__PURE__*/React.createElement(\"i\", {\n    className: \"\".concat(prefixCls, \"-dot-item\")\n  }));\n}\nfunction shouldDelay(spinning, delay) {\n  return !!spinning && !!delay && !isNaN(Number(delay));\n}\nvar Spin = function Spin(props) {\n  var prefixCls = props.spinPrefixCls,\n    _props$spinning = props.spinning,\n    customSpinning = _props$spinning === void 0 ? true : _props$spinning,\n    delay = props.delay,\n    className = props.className,\n    _props$size = props.size,\n    size = _props$size === void 0 ? 'default' : _props$size,\n    tip = props.tip,\n    wrapperClassName = props.wrapperClassName,\n    style = props.style,\n    children = props.children,\n    restProps = __rest(props, [\"spinPrefixCls\", \"spinning\", \"delay\", \"className\", \"size\", \"tip\", \"wrapperClassName\", \"style\", \"children\"]);\n  var _React$useState = React.useState(function () {\n      return customSpinning && !shouldDelay(customSpinning, delay);\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    spinning = _React$useState2[0],\n    setSpinning = _React$useState2[1];\n  React.useEffect(function () {\n    var updateSpinning = debounce(function () {\n      setSpinning(customSpinning);\n    }, delay);\n    updateSpinning();\n    return function () {\n      var _a;\n      (_a = updateSpinning === null || updateSpinning === void 0 ? void 0 : updateSpinning.cancel) === null || _a === void 0 ? void 0 : _a.call(updateSpinning);\n    };\n  }, [delay, customSpinning]);\n  var isNestedPattern = function isNestedPattern() {\n    return typeof children !== 'undefined';\n  };\n  var renderSpin = function renderSpin(_ref) {\n    var _classNames;\n    var direction = _ref.direction;\n    var spinClassName = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-sm\"), size === 'small'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-lg\"), size === 'large'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-spinning\"), spinning), _defineProperty(_classNames, \"\".concat(prefixCls, \"-show-text\"), !!tip), _defineProperty(_classNames, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), _classNames), className);\n    // fix https://fb.me/react-unknown-prop\n    var divProps = omit(restProps, ['indicator', 'prefixCls']);\n    var spinElement = /*#__PURE__*/React.createElement(\"div\", _extends({}, divProps, {\n      style: style,\n      className: spinClassName,\n      \"aria-live\": \"polite\",\n      \"aria-busy\": spinning\n    }), renderIndicator(prefixCls, props), tip ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(prefixCls, \"-text\")\n    }, tip) : null);\n    if (isNestedPattern()) {\n      var containerClassName = classNames(\"\".concat(prefixCls, \"-container\"), _defineProperty({}, \"\".concat(prefixCls, \"-blur\"), spinning));\n      return /*#__PURE__*/React.createElement(\"div\", _extends({}, divProps, {\n        className: classNames(\"\".concat(prefixCls, \"-nested-loading\"), wrapperClassName)\n      }), spinning && /*#__PURE__*/React.createElement(\"div\", {\n        key: \"loading\"\n      }, spinElement), /*#__PURE__*/React.createElement(\"div\", {\n        className: containerClassName,\n        key: \"container\"\n      }, children));\n    }\n    return spinElement;\n  };\n  return /*#__PURE__*/React.createElement(ConfigConsumer, null, renderSpin);\n};\nvar SpinFC = function SpinFC(props) {\n  var customizePrefixCls = props.prefixCls;\n  var _React$useContext = React.useContext(ConfigContext),\n    getPrefixCls = _React$useContext.getPrefixCls;\n  var spinPrefixCls = getPrefixCls('spin', customizePrefixCls);\n  var spinClassProps = _extends(_extends({}, props), {\n    spinPrefixCls: spinPrefixCls\n  });\n  return /*#__PURE__*/React.createElement(Spin, _extends({}, spinClassProps));\n};\nSpinFC.setDefaultIndicator = function (indicator) {\n  defaultIndicator = indicator;\n};\nif (process.env.NODE_ENV !== 'production') {\n  SpinFC.displayName = 'Spin';\n}\nexport default SpinFC;","var roundingMap = {\n  ceil: Math.ceil,\n  round: Math.round,\n  floor: Math.floor,\n  trunc: function trunc(value) {\n    return value < 0 ? Math.ceil(value) : Math.floor(value);\n  } // Math.trunc is not supported by IE\n\n};\nvar defaultRoundingMethod = 'trunc';\nexport function getRoundingMethod(method) {\n  return method ? roundingMap[method] : roundingMap[defaultRoundingMethod];\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of milliseconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\n\nexport default function differenceInMilliseconds(dateLeft, dateRight) {\n  requiredArgs(2, arguments);\n  return toDate(dateLeft).getTime() - toDate(dateRight).getTime();\n}","import differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of seconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * const result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\n\nexport default function differenceInSeconds(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / 1000;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function(style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function(node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n","var trimmedEndIndex = require('./_trimmedEndIndex');\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nmodule.exports = baseTrim;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nmodule.exports = trimmedEndIndex;\n","var isObject = require('./isObject'),\n    now = require('./now'),\n    toNumber = require('./toNumber');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nmodule.exports = debounce;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n","var root = require('./_root');\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nmodule.exports = now;\n","var baseTrim = require('./_baseTrim'),\n    isObject = require('./isObject'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n","module.exports = require('./dist/shared/lib/head')\n","module.exports = require('./dist/client/router')\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","/**\n * @license React\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var b=Symbol.for(\"react.element\"),c=Symbol.for(\"react.portal\"),d=Symbol.for(\"react.fragment\"),e=Symbol.for(\"react.strict_mode\"),f=Symbol.for(\"react.profiler\"),g=Symbol.for(\"react.provider\"),h=Symbol.for(\"react.context\"),k=Symbol.for(\"react.server_context\"),l=Symbol.for(\"react.forward_ref\"),m=Symbol.for(\"react.suspense\"),n=Symbol.for(\"react.suspense_list\"),p=Symbol.for(\"react.memo\"),q=Symbol.for(\"react.lazy\"),t=Symbol.for(\"react.offscreen\"),u;u=Symbol.for(\"react.module.reference\");\nfunction v(a){if(\"object\"===typeof a&&null!==a){var r=a.$$typeof;switch(r){case b:switch(a=a.type,a){case d:case f:case e:case m:case n:return a;default:switch(a=a&&a.$$typeof,a){case k:case h:case l:case q:case p:case g:return a;default:return r}}case c:return r}}}exports.ContextConsumer=h;exports.ContextProvider=g;exports.Element=b;exports.ForwardRef=l;exports.Fragment=d;exports.Lazy=q;exports.Memo=p;exports.Portal=c;exports.Profiler=f;exports.StrictMode=e;exports.Suspense=m;\nexports.SuspenseList=n;exports.isAsyncMode=function(){return!1};exports.isConcurrentMode=function(){return!1};exports.isContextConsumer=function(a){return v(a)===h};exports.isContextProvider=function(a){return v(a)===g};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===b};exports.isForwardRef=function(a){return v(a)===l};exports.isFragment=function(a){return v(a)===d};exports.isLazy=function(a){return v(a)===q};exports.isMemo=function(a){return v(a)===p};\nexports.isPortal=function(a){return v(a)===c};exports.isProfiler=function(a){return v(a)===f};exports.isStrictMode=function(a){return v(a)===e};exports.isSuspense=function(a){return v(a)===m};exports.isSuspenseList=function(a){return v(a)===n};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===d||a===f||a===e||a===m||a===n||a===t||\"object\"===typeof a&&null!==a&&(a.$$typeof===q||a.$$typeof===p||a.$$typeof===g||a.$$typeof===h||a.$$typeof===l||a.$$typeof===u||void 0!==a.getModuleId)?!0:!1};exports.typeOf=v;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","var parse = require('inline-style-parser');\n\n/**\n * Parses inline style to object.\n *\n * @example\n * // returns { 'line-height': '42' }\n * StyleToObject('line-height: 42;');\n *\n * @param  {String}      style      - The inline style.\n * @param  {Function}    [iterator] - The iterator function.\n * @return {null|Object}\n */\nfunction StyleToObject(style, iterator) {\n  var output = null;\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  var declaration;\n  var declarations = parse(style);\n  var hasIterator = typeof iterator === 'function';\n  var property;\n  var value;\n\n  for (var i = 0, len = declarations.length; i < len; i++) {\n    declaration = declarations[i];\n    property = declaration.property;\n    value = declaration.value;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      output || (output = {});\n      output[property] = value;\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = StyleToObject;\nmodule.exports.default = StyleToObject; // ESM support\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position|undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string|Error|VFileMessage} reason\n   *   Reason for message.\n   *   Uses the stack and message of the error if given.\n   * @param {Node|NodeLike|Position|Point} [place]\n   *   Place at which the message occurred in a file.\n   * @param {string} [origin]\n   *   Place in code the message originates from (example `'my-package:my-rule-name'`)\n   */\n  constructor(reason, place, origin) {\n    /** @type {[string|null, string|null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`\n    this.name = stringifyPosition(place) || '1:1'\n    /** @type {string} */\n    this.message = typeof reason === 'object' ? reason.message : reason\n    /** @type {string} */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Whether this is a fatal problem that marks an associated file as no\n     * longer processable.\n     * If `true`, marks associated file as no longer processable.\n     * If `false`, necessitates a (potential) change.\n     * The value can also be `null` or `undefined`, for things that might not\n     * need changing.\n     *\n     * @type {boolean?}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number?}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number?}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full range information, when available.\n     * Has `start` and `end` fields, both set to an object with `line` and\n     * `column`, set to `number?`.\n     *\n     * @type {Position?}\n     */\n    this.position = position\n\n    /**\n     * Namespace of warning (example: `'my-package'`).\n     *\n     * @type {string?}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule-name'`).\n     *\n     * @type {string?}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the VFile ecosystem).\n     *\n     * @type {string?}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string?}\n     */\n    this.actual\n\n    /**\n     * Suggest values that should be used instead of `actual`, one or more\n     * values that are deemed as acceptable.\n     *\n     * @type {Array<string>?}\n     */\n    this.expected\n\n    /**\n     * Link to documentation for the message.\n     *\n     * @type {string?}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (supported by `vfile-reporter`).\n     *\n     * @type {string?}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * @param {string} path\n * @param {string} [ext]\n * @returns {string}\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean|undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * @param {string} path\n * @returns {string}\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean|undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * @param {string} path\n * @returns {string}\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean|undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * @param {Array<string>} segments\n * @returns {string}\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string|undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Note: `normalize` is not exposed as `path.normalize`, so some code is\n * manually removed from it.\n *\n * @param {string} path\n * @returns {string}\n */\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n * @param {boolean} allowAboveRoot\n * @returns {string}\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number|undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * @param {string} path\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * @param {unknown} fileURLOrPath\n * @returns {fileURLOrPath is URL}\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileURLOrPath) {\n  return (\n    fileURLOrPath !== null &&\n    typeof fileURLOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileURLOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileURLOrPath.origin\n  )\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string|URL} path\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * @param {URL} url\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {Record<string, unknown> & {type: string, position?: Position|undefined}} NodeLike\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n *\n * @typedef {'ascii'|'utf8'|'utf-8'|'utf16le'|'ucs2'|'ucs-2'|'base64'|'base64url'|'latin1'|'binary'|'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *   This is a copy of the typing from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Value|Options|VFile|URL} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n * @property {Value} [value]\n * @property {string} [cwd]\n * @property {Array<string>} [history]\n * @property {string|URL} [path]\n * @property {string} [basename]\n * @property {string} [stem]\n * @property {string} [extname]\n * @property {string} [dirname]\n * @property {Data} [data]\n *\n * @typedef Map\n *   Raw source map, see:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n * @property {Array<string>} sources\n * @property {Array<string>} names\n * @property {string|undefined} [sourceRoot]\n * @property {Array<string>|undefined} [sourcesContent]\n * @property {string} mappings\n * @property {string} file\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration: a bunch of keys that will be shallow copied over to the new\n *   file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n * @typedef {<T = ReporterSettings>(files: Array<VFile>, options: T) => string} Reporter\n */\n\nimport buffer from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n// Order of setting (least specific to most), we need this because otherwise\n// `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n// stem can be set.\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * If `options` is `string` or `Buffer`, it’s treated as `{value: options}`.\n   * If `options` is a `URL`, it’s treated as `{path: options}`.\n   * If `options` is a `VFile`, shallow copies its data over to the new file.\n   * All fields in `options` are set on the newly created `VFile`.\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * It’s not possible to set either `dirname` or `extname` without setting\n   * either `history`, `path`, `basename`, or `stem` as well.\n   *\n   * @param {Compatible} [value]\n   */\n  constructor(value) {\n    /** @type {Options} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      // @ts-expect-error Looks like a buffer.\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      // @ts-expect-error Looks like file or options.\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     * The first is the original path and the last is the current path.\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     * This is used by vfile reporters.\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Sometimes files have a non-string, compiled, representation.\n     * This can be stored in the `result` field.\n     * One example is when turning markdown into React nodes.\n     * This is used by unified to store non-string results.\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Sometimes files have a source map associated with them.\n     * This can be stored in the `map` field.\n     * This should be a `Map` type, which is equivalent to the `RawSourceMap`\n     * type from the `source-map` module.\n     * @type {Map|undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (prop in options && options[prop] !== undefined) {\n        // @ts-expect-error: TS is confused by the different types for `history`.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) this[prop] = options[prop]\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   * @param {string|URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding} [encoding='utf8']\n   *   When `value` is a `Buffer`, `encoding` is a character encoding to\n   *   understand it as (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding)\n  }\n\n  /**\n   * Constructs a new `VFileMessage`, where `fatal` is set to `false`, and\n   * associates it with the file by adding it to `vfile.messages` and setting\n   * `message.file` to the current filepath.\n   *\n   * @param {string|Error|VFileMessage} reason\n   *   Human readable reason for the message, uses the stack and message of the error if given.\n   * @param {Node|NodeLike|Position|Point} [place]\n   *   Place where the message occurred in the file.\n   * @param {string} [origin]\n   *   Computer readable reason for the message\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Like `VFile#message()`, but associates an informational message where\n   * `fatal` is set to `null`.\n   *\n   * @param {string|Error|VFileMessage} reason\n   *   Human readable reason for the message, uses the stack and message of the error if given.\n   * @param {Node|NodeLike|Position|Point} [place]\n   *   Place where the message occurred in the file.\n   * @param {string} [origin]\n   *   Computer readable reason for the message\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Like `VFile#message()`, but associates a fatal message where `fatal` is\n   * set to `true`, and then immediately throws it.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string|Error|VFileMessage} reason\n   *   Human readable reason for the message, uses the stack and message of the error if given.\n   * @param {Node|NodeLike|Position|Point} [place]\n   *   Place where the message occurred in the file.\n   * @param {string} [origin]\n   *   Computer readable reason for the message\n   * @returns {never}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string|undefined} part\n * @param {string} name\n * @returns {void}\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string|undefined} part\n * @param {string} name\n * @returns {asserts part is string}\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string|undefined} path\n * @param {string} name\n * @returns {asserts path is string}\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","/**\n * @typedef Options\n * @property {boolean} [includeImageAlt=true]\n */\n\n/**\n * Get the text content of a node.\n * Prefer the node’s plain-text fields, otherwise serialize its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} node\n * @param {Options} [options]\n * @returns {string}\n */\nexport function toString(node, options) {\n  var {includeImageAlt = true} = options || {}\n  return one(node, includeImageAlt)\n}\n\n/**\n * @param {unknown} node\n * @param {boolean} includeImageAlt\n * @returns {string}\n */\nfunction one(node, includeImageAlt) {\n  return (\n    (node &&\n      typeof node === 'object' &&\n      // @ts-ignore looks like a literal.\n      (node.value ||\n        // @ts-ignore looks like an image.\n        (includeImageAlt ? node.alt : '') ||\n        // @ts-ignore looks like a parent.\n        ('children' in node && all(node.children, includeImageAlt)) ||\n        (Array.isArray(node) && all(node, includeImageAlt)))) ||\n    ''\n  )\n}\n\n/**\n * @param {Array.<unknown>} values\n * @param {boolean} includeImageAlt\n * @returns {string}\n */\nfunction all(values, includeImageAlt) {\n  /** @type {Array.<string>} */\n  var result = []\n  var index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt)\n  }\n\n  return result.join('')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {number} start\n * @param {number} remove\n * @param {T[]} items\n * @returns {void}\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {unknown[]} */\n\n  let parameters // Make start between zero and `end` (included).\n\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n\n  remove = remove > 0 ? remove : 0 // No need to chunk the items if there’s only a couple (10k) items.\n\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove) // @ts-expect-error Hush, it’s fine.\n    ;[].splice.apply(list, parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) [].splice.apply(list, [start, remove]) // Insert the items in chunks to not cause stack overflows.\n\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0) // @ts-expect-error Hush, it’s fine.\n      ;[].splice.apply(list, parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {T[]} items\n * @returns {T[]}\n */\n\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine several syntax extensions into one.\n *\n * @param {Extension[]} extensions List of syntax extensions.\n * @returns {NormalizedExtension} A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all Extension to merge into.\n * @param {Extension} extension Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {string} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    for (code in right) {\n      if (!hasOwnProperty.call(left, code)) left[code] = []\n      const value = right[code]\n      constructs(\n        // @ts-expect-error Looks like a list.\n        left[code],\n        Array.isArray(value) ? value : value ? [value] : []\n      )\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {unknown[]} existing\n * @param {unknown[]} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {unknown[]} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine several HTML extensions into one.\n *\n * @param {HtmlExtension[]} htmlExtensions List of HTML extensions.\n * @returns {HtmlExtension} A single combined extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all Extension to merge into.\n * @param {HtmlExtension} extension Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {string} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {string} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\nexport const unicodePunctuationRegex =\n  /[!-/:-@[-`{-~\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n */\n\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n */\n\nexport const asciiDigit = regexCheck(/\\d/)\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n */\n\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n */\n\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n */\n\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n */\n\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n\nexport const unicodeWhitespace = regexCheck(/\\s/)\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => code is number}\n */\n\nfunction regexCheck(regex) {\n  return check\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code Character code\n   * @returns {code is number} Whether the character code matches the bound regex\n   */\n\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownSpace} from 'micromark-util-character'\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {string} type\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n/** @type {Initializer} */\n\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n\n  let previous\n  return contentStart\n  /** @type {State} */\n\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n  /** @type {State} */\n\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n\n    if (previous) {\n      previous.next = token\n    }\n\n    previous = token\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Point} Point\n */\n\n/**\n * @typedef {Record<string, unknown>} StackState\n * @typedef {[Construct, StackState]} StackItem\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\n\nexport const document = {\n  tokenize: initializeDocument\n}\n/** @type {Construct} */\n\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n/** @type {Initializer} */\n\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext|undefined} */\n\n  let childFlow\n  /** @type {Token|undefined} */\n\n  let childToken\n  /** @type {number} */\n\n  let lineStartOffset\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    } // Done.\n\n    return checkNewContainers(code)\n  }\n  /** @type {State} */\n\n  function documentContinue(code) {\n    continued++ // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n\n      if (childFlow) {\n        closeFlow()\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point|undefined} */\n\n      let point // Find the flow chunk.\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      let index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n\n    return start(code)\n  }\n  /** @type {State} */\n\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      } // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      } // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    } // Check if there is a new container.\n\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n  /** @type {State} */\n\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n  /** @type {State} */\n\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n  /** @type {State} */\n\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState]) // Try another.\n\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n  /** @type {State} */\n\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow')) // Get ready for the next line.\n\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n\n    effects.consume(code)\n    return flowContinue\n  }\n  /**\n   * @param {Token} token\n   * @param {boolean} [eof]\n   * @returns {void}\n   */\n\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream) // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset && // …and either is not ended yet…\n          (!childFlow.events[index][1].end || // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean|undefined} */\n\n      let seen\n      /** @type {Point|undefined} */\n\n      let point // Find the previous chunk (the one before the lazy line).\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n\n          seen = true\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n    }\n  }\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n\n  function exitContainers(size) {\n    let index = stack.length // Exit open containers.\n\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n\n    stack.length = size\n  }\n\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContainer(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return factorySpace(effects, afterWhitespace, 'linePrefix')\n  /** @type {State} */\n\n  function afterWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {splice} from 'micromark-util-chunked'\n\n/**\n * Tokenize subcontent.\n *\n * @param {Event[]} events\n * @returns {boolean}\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n\n  let event\n  /** @type {number|undefined} */\n\n  let lineIndex\n  /** @type {number} */\n\n  let otherIndex\n  /** @type {Event} */\n\n  let otherEvent\n  /** @type {Event[]} */\n\n  let parameters\n  /** @type {Event[]} */\n\n  let subevents\n  /** @type {boolean|undefined} */\n\n  let more\n\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n\n    event = events[index] // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    } // Enter.\n\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    } // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start) // Switch container exit w/ line endings.\n\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n\n  return !more\n}\n/**\n * Tokenize embedded tokens.\n *\n * @param {Event[]} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\n\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {number[]} */\n\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {[number, number][]} */\n\n  const jumps = []\n  /** @type {Record<string, number>} */\n\n  const gaps = {}\n  /** @type {Chunk[]} */\n\n  let stream\n  /** @type {Token|undefined} */\n\n  let previous\n  let index = -1\n  /** @type {Token|undefined} */\n\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start] // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n\n    startPositions.push(startPosition)\n\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n\n      if (!current.next) {\n        stream.push(null)\n      }\n\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n\n      tokenizer.write(stream)\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    } // Unravel the next token.\n\n    previous = current\n    current = current.next\n  } // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n\n  current = token\n\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start) // Help GC.\n\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  } // Help GC.\n\n  tokenizer.events = [] // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  } // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n\n  index = breaks.length\n\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n\n  index = -1\n\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n/** @type {Construct} */\n\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\n\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token} */\n  let previous\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n  /** @type {State} */\n\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return data\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n  /** @type {State} */\n\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    const tail = self.events[self.events.length - 1]\n\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n/** @type {Initializer} */\n\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding, // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n  /** @type {State} */\n\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n  /** @type {State} */\n\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n/**\n * @param {'string'|'text'} field\n * @returns {InitialConstruct}\n */\n\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n  /** @type {Initializer} */\n\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n    /** @type {State} */\n\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n    /** @type {State} */\n\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      } // Data.\n\n      effects.consume(code)\n      return data\n    }\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n\n      const list = constructs[code]\n      let index = -1\n\n      if (list) {\n        while (++index < list.length) {\n          const item = list[index]\n\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n\n      return false\n    }\n  }\n}\n/**\n * @param {Resolver} [extraResolver]\n * @returns {Resolver}\n */\n\nfunction createResolver(extraResolver) {\n  return resolveAllText\n  /** @type {Resolver} */\n\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number|undefined} */\n\n    let enter // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n\n        enter = undefined\n      }\n    }\n\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\n\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean|undefined} */\n\n      let tabs\n\n      while (index--) {\n        const chunk = chunks[index]\n\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n\n          if (bufferIndex) break\n          bufferIndex = -1\n        } // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n\n      eventIndex++\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {{resolveAll?: Resolver}[]} constructs\n * @param {Event[]} events\n * @param {TokenizeContext} context\n * @returns {Event[]}\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Resolver[]} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n */\n\n/**\n * @typedef Info\n * @property {() => void} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_index'|'_bufferIndex'>} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n\n  let chunks = []\n  /** @type {Array<Token>} */\n\n  let stack = []\n  /** @type {boolean|undefined} */\n\n  let consumed = true\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n  /**\n   * The state function.\n   *\n   * @type {State|void}\n   */\n\n  let state = initialize.tokenize.call(context, effects)\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n\n  let expectedCode\n\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n\n  return context\n  /** @type {TokenizeContext['write']} */\n\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main() // Exit if we’re not done, resolve might change stuff.\n\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n\n    addResult(initialize, 0) // Otherwise, resolve, and exit.\n\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  } //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n  /** @type {TokenizeContext['sliceStream']} */\n\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n  /** @type {TokenizeContext['now']} */\n\n  function now() {\n    return Object.assign({}, point)\n  }\n  /** @type {TokenizeContext['defineSkip']} */\n\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  } //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index] // If we’re in a buffer chunk, loop through it.\n\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n  /** @type {Effects['consume']} */\n\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    } // Not in a string chunk.\n\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++ // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    } // Expose the previous character.\n\n    context.previous = code // Mark as consumed.\n\n    consumed = true\n  }\n  /** @type {Effects['enter']} */\n\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n  /** @type {Effects['exit']} */\n\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {Record<string, unknown>} [fields]\n   */\n\n  function constructFactory(onreturn, fields) {\n    return hook\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Construct|Array<Construct>|ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State} [bogusState]\n     * @returns {State}\n     */\n\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n\n      let constructIndex\n      /** @type {Construct} */\n\n      let currentConstruct\n      /** @type {Info} */\n\n      let info\n      return Array.isArray(constructs)\n        ? /* c8 ignore next 1 */\n          handleListOfConstructs(constructs)\n        : 'tokenize' in constructs // @ts-expect-error Looks like a construct.\n        ? handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n\n      function handleMapOfConstructs(map) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n\n        if (list.length === 0) {\n          return bogusState\n        }\n\n        return handleConstruct(list[constructIndex])\n      }\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n\n      function handleConstruct(construct) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n      /** @type {State} */\n\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n      /** @type {State} */\n\n      function nok(code) {\n        consumed = true\n        info.restore()\n\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n\n        return bogusState\n      }\n    }\n  }\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'start'|'end'>} token\n * @returns {Array<Chunk>}\n */\n\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n\n  let view\n\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n\n    if (startBufferIndex > -1) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view[0] = view[0].slice(startBufferIndex)\n    }\n\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n\n  return view\n}\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean} [expandTabs=false]\n * @returns {string}\n */\n\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n\n  const result = []\n  /** @type {boolean|undefined} */\n\n  let atTab\n\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n\n    let value\n\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n\n        case -4: {\n          value = '\\n'\n          break\n        }\n\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n\n    atTab = chunk === -2\n    result.push(value)\n  }\n\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('thematicBreak')\n    marker = code\n    return atBreak(code)\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    if (size < 3 || (code !== null && !markdownLineEnding(code))) {\n      return nok(code)\n    }\n\n    effects.exit('thematicBreak')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n\n    effects.exit('thematicBreakSequence')\n    return atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @typedef {Record<string, unknown> & {marker: Code, type: string, size: number}} ListContainerState\n * @typedef {TokenizeContext & {containerState: ListContainerState}} TokenizeContextWithState\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n/** @type {Construct} */\n\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n/** @type {Construct} */\n\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n/** @type {Construct} */\n\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n\n    return nok(code)\n  }\n  /**\n   * @type {State}\n   **/\n\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine, // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n  /** @type {State} */\n\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine // We have a blank line.\n    // Still, try to consume at most the items size.\n\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n  /** @type {State} */\n\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n  /** @type {State} */\n\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true // As we’re closing flow, we’re no longer interrupting.\n\n    self.interrupt = undefined\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n/**\n * @type {Exiter}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(blockQuote, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n/** @type {Exiter} */\n\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} literalType\n * @param {string} literalMarkerType\n * @param {string} rawType\n * @param {string} stringType\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return destinationEnclosedBefore\n    }\n\n    if (code === null || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationRaw(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return destinationEnclosedBefore(code)\n    }\n\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? destinationEnclosedEscape : destinationEnclosed\n  }\n  /** @type {State} */\n\n  function destinationEnclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return destinationEnclosed\n    }\n\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationRaw(code) {\n    if (code === 40) {\n      if (++balance > limit) return nok(code)\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === 41) {\n      if (!balance--) {\n        effects.exit('chunkString')\n        effects.exit(stringType)\n        effects.exit(rawType)\n        effects.exit(type)\n        return ok(code)\n      }\n\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      if (balance) return nok(code)\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n\n    if (asciiControl(code)) return nok(code)\n    effects.consume(code)\n    return code === 92 ? destinationRawEscape : destinationRaw\n  }\n  /** @type {State} */\n\n  function destinationRawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    return destinationRaw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      (code === 93 && !data) ||\n      /* To do: remove in the future once we’ve switched from\n       * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n       * which doesn’t need this */\n\n      /* Hidden footnotes hook */\n\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs) ||\n      size > 999\n    ) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return label(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    data = data || !markdownSpace(code)\n    return code === 92 ? labelEscape : label\n  }\n  /** @type {State} */\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return label\n    }\n\n    return label(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    marker = code === 40 ? 41 : code\n    return atFirstTitleBreak\n  }\n  /** @type {State} */\n\n  function atFirstTitleBreak(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    return atTitleBreak(code)\n  }\n  /** @type {State} */\n\n  function atTitleBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return atFirstTitleBreak(marker)\n    }\n\n    if (code === null) {\n      return nok(code)\n    } // Note: blank lines can’t exist in content.\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atTitleBreak, 'linePrefix')\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return title(code)\n  }\n  /** @type {State} */\n\n  function title(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atTitleBreak(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? titleEscape : title\n  }\n  /** @type {State} */\n\n  function titleEscape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return title\n    }\n\n    return title(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (such as used in definitions).\n *\n * @param {string} value\n * @returns {string}\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value // Collapse Markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ') // Trim.\n      .replace(/^ | $/g, '') // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n/** @type {Construct} */\n\nconst titleConstruct = {\n  tokenize: tokenizeTitle,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n\n  let identifier\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('definition')\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker') // Note: blank lines can’t exist in content.\n\n      return factoryWhitespace(\n        effects,\n        factoryDestination(\n          effects,\n          effects.attempt(\n            titleConstruct,\n            factorySpace(effects, after, 'whitespace'),\n            factorySpace(effects, after, 'whitespace')\n          ),\n          nok,\n          'definitionDestination',\n          'definitionDestinationLiteral',\n          'definitionDestinationLiteralMarker',\n          'definitionDestinationRaw',\n          'definitionDestinationString'\n        )\n      )\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      if (!self.parser.defined.includes(identifier)) {\n        self.parser.defined.push(identifier)\n      }\n\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTitle(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, before)(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function before(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factorySpace(effects, after, 'whitespace'),\n        nok,\n        'definitionTitle',\n        'definitionTitleMarker',\n        'definitionTitleString'\n      )(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n/** @type {Construct} */\n\nconst indentedContent = {\n  tokenize: tokenizeIndentedContent,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeIndented')\n    return factorySpace(effects, afterStartPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterStartPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? afterPrefix(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(indentedContent, afterPrefix, after)(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return content(code)\n  }\n  /** @type {State} */\n\n  function content(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return afterPrefix(code)\n    }\n\n    effects.consume(code)\n    return content\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeIndented')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeIndentedContent(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? start(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n/** @type {Resolver} */\n\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n\n  let content\n  /** @type {Token} */\n\n  let text // Prefix whitespace, part of the opening.\n\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  } // Suffix whitespace, part of the closing.\n\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      // @ts-expect-error Constants are fine to assign.\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  const self = this\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('atxHeading')\n    effects.enter('atxHeadingSequence')\n    return fenceOpenInside(code)\n  }\n  /** @type {State} */\n\n  function fenceOpenInside(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return fenceOpenInside\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return self.interrupt ? ok(code) : headingBreak(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function headingBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequence(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      return ok(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headingBreak, 'whitespace')(code)\n    }\n\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequence\n    }\n\n    effects.exit('atxHeadingSequence')\n    return headingBreak(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return headingBreak(code)\n    }\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n/** @type {Resolver} */\n\nfunction resolveToSetextUnderline(events, context) {\n  let index = events.length\n  /** @type {number|undefined} */\n\n  let content\n  /** @type {number|undefined} */\n\n  let text\n  /** @type {number|undefined} */\n\n  let definition // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    } // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  } // Change the paragraph to setext heading text.\n\n  events[text][1].type = 'setextHeadingText' // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  } // Add the heading exit at the end.\n\n  events.push(['exit', heading, context])\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  /** @type {boolean} */\n\n  let paragraph // Find an opening.\n\n  while (index--) {\n    // Skip enter/exit of line ending, line prefix, and content.\n    // We can now either have a definition or a paragraph.\n    if (\n      self.events[index][1].type !== 'lineEnding' &&\n      self.events[index][1].type !== 'linePrefix' &&\n      self.events[index][1].type !== 'content'\n    ) {\n      paragraph = self.events[index][1].type === 'paragraph'\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      effects.enter('setextHeadingLineSequence')\n      marker = code\n      return closingSequence(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function closingSequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return closingSequence\n    }\n\n    effects.exit('setextHeadingLineSequence')\n    return factorySpace(effects, closingSequenceEnd, 'lineSuffix')(code)\n  }\n  /** @type {State} */\n\n  function closingSequenceEnd(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result\n * in more relaxed rules (condition 6): because they are known blocks, the\n * HTML-like syntax doesn’t have to be strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result in\n * HTML that can include lines w/o exiting, until a closing tag also in this\n * list is found (condition 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * Note that `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n/** @type {Construct} */\n\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n/** @type {Construct} */\n\nconst nextBlankConstruct = {\n  tokenize: tokenizeNextBlank,\n  partial: true\n}\n/** @type {Resolver} */\n\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start // Add the prefix start to the HTML line token.\n\n    events[index + 1][1].start = events[index - 2][1].start // Remove the line prefix.\n\n    events.splice(index - 2, 2)\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n\n  let kind\n  /** @type {boolean} */\n\n  let startTag\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {Code} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationStart\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      kind = 3 // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      startTag = true\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationStart(code) {\n    if (code === 45) {\n      effects.consume(code)\n      kind = 2\n      return commentOpenInside\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      kind = 5\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpenInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      kind = 4\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdataOpenInside(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length\n        ? self.interrupt\n          ? ok\n          : continuation\n        : cdataOpenInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      if (\n        code !== 47 &&\n        startTag &&\n        htmlRawNames.includes(buffer.toLowerCase())\n      ) {\n        kind = 1\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        kind = 6\n\n        if (code === 47) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      kind = 7 // Do not support complete HTML when interrupting\n\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : startTag\n        ? completeAttributeNameBefore(code)\n        : completeClosingTagAfter(code)\n    }\n\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuation\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    return completeAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n\n    return completeAttributeNameBefore(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return completeAttributeValueQuoted\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    marker = null\n    return completeAttributeValueUnquoted(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuoted(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    if (code === marker) {\n      effects.consume(code)\n      return completeAttributeValueQuotedAfter\n    }\n\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return code === null || markdownLineEnding(code)\n      ? continuation(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function continuation(code) {\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n\n    if (code === 60 && kind === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n\n    if (code === 62 && kind === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (code === 63 && kind === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    if (code === 93 && kind === 5) {\n      effects.consume(code)\n      return continuationCharacterDataInside\n    }\n\n    if (markdownLineEnding(code) && (kind === 6 || kind === 7)) {\n      return effects.check(\n        nextBlankConstruct,\n        continuationClose,\n        continuationAtLineEnding\n      )(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      return continuationAtLineEnding(code)\n    }\n\n    effects.consume(code)\n    return continuation\n  }\n  /** @type {State} */\n\n  function continuationAtLineEnding(code) {\n    effects.exit('htmlFlowData')\n    return htmlContinueStart(code)\n  }\n  /** @type {State} */\n\n  function htmlContinueStart(code) {\n    if (code === null) {\n      return done(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        {\n          tokenize: htmlLineEnd,\n          partial: true\n        },\n        htmlContinueStart,\n        done\n      )(code)\n    }\n\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n  /** @type {Tokenizer} */\n\n  function htmlLineEnd(effects, ok, nok) {\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {State} */\n\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawEndTag(code) {\n    if (code === 62 && htmlRawNames.includes(buffer.toLowerCase())) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationCharacterDataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    } // More dashes.\n\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return done(code)\n    }\n\n    effects.consume(code)\n    return continuationClose\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('htmlFlow')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNextBlank(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.exit('htmlFlowData')\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n\n  const closingFenceConstruct = {\n    tokenize: tokenizeClosingFence,\n    partial: true\n  }\n  /** @type {Construct} */\n\n  const nonLazyLine = {\n    tokenize: tokenizeNonLazyLine,\n    partial: true\n  }\n  const tail = this.events[this.events.length - 1]\n  const initialPrefix =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    marker = code\n    return sequenceOpen(code)\n  }\n  /** @type {State} */\n\n  function sequenceOpen(code) {\n    if (code === marker) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n\n    effects.exit('codeFencedFenceSequence')\n    return sizeOpen < 3\n      ? nok(code)\n      : factorySpace(effects, infoOpen, 'whitespace')(code)\n  }\n  /** @type {State} */\n\n  function infoOpen(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n  /** @type {State} */\n\n  function info(code) {\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, infoAfter, 'whitespace')(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return info\n  }\n  /** @type {State} */\n\n  function infoAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n  /** @type {State} */\n\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return openAfter(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return meta\n  }\n  /** @type {State} */\n\n  function openAfter(code) {\n    effects.exit('codeFencedFence')\n    return self.interrupt ? ok(code) : contentStart(code)\n  }\n  /** @type {State} */\n\n  function contentStart(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        nonLazyLine,\n        effects.attempt(\n          closingFenceConstruct,\n          after,\n          initialPrefix\n            ? factorySpace(\n                effects,\n                contentStart,\n                'linePrefix',\n                initialPrefix + 1\n              )\n            : contentStart\n        ),\n        after\n      )(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return contentContinue(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return contentStart(code)\n    }\n\n    effects.consume(code)\n    return contentContinue\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeNonLazyLine(effects, ok, nok) {\n    const self = this\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    let size = 0\n    return factorySpace(\n      effects,\n      closingSequenceStart,\n      'linePrefix',\n      this.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n    /** @type {State} */\n\n    function closingSequenceStart(code) {\n      effects.enter('codeFencedFence')\n      effects.enter('codeFencedFenceSequence')\n      return closingSequence(code)\n    }\n    /** @type {State} */\n\n    function closingSequence(code) {\n      if (code === marker) {\n        effects.consume(code)\n        size++\n        return closingSequence\n      }\n\n      if (size < sizeOpen) return nok(code)\n      effects.exit('codeFencedFenceSequence')\n      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)\n    }\n    /** @type {State} */\n\n    function closingSequenceEnd(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n\n  let max\n  /** @type {(code: Code) => code is number} */\n\n  let test\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n  /** @type {State} */\n\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n  /** @type {State} */\n\n  function value(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === 59 && size) {\n      token = effects.exit('characterReferenceValue')\n\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {asciiPunctuation} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n/** @type {Construct} */\n\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\n\nconst fullReferenceConstruct = {\n  tokenize: tokenizeFullReference\n}\n/** @type {Construct} */\n\nconst collapsedReferenceConstruct = {\n  tokenize: tokenizeCollapsedReference\n}\n/** @type {Resolver} */\n\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  /** @type {Token} */\n\n  let token\n\n  while (++index < events.length) {\n    token = events[index][1]\n\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n\n  return events\n}\n/** @type {Resolver} */\n\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n\n  let token\n  /** @type {number|undefined} */\n\n  let open\n  /** @type {number|undefined} */\n\n  let close\n  /** @type {Event[]} */\n\n  let media // Find an opening.\n\n  while (index--) {\n    token = events[index][1]\n\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      } // Mark other link openings as inactive, as we can’t have links in\n      // links.\n\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ] // Opening marker.\n\n  media = push(media, events.slice(open + 1, open + offset + 3)) // Text open.\n\n  media = push(media, [['enter', text, context]]) // Between.\n\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  ) // Text close, marker close, label close.\n\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ]) // Reference, resource, or so.\n\n  media = push(media, events.slice(close + 1)) // Media close.\n\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n\n  let labelStart\n  /** @type {boolean} */\n\n  let defined // Find an opening.\n\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!labelStart) {\n      return nok(code)\n    } // It’s a balanced bracket, but contains a link.\n\n    if (labelStart._inactive) return balanced(code)\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return afterLabelEnd\n  }\n  /** @type {State} */\n\n  function afterLabelEnd(code) {\n    // Resource: `[asd](fgh)`.\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        ok,\n        defined ? ok : balanced\n      )(code)\n    } // Collapsed (`[asd][]`) or full (`[asd][fgh]`) reference?\n\n    if (code === 91) {\n      return effects.attempt(\n        fullReferenceConstruct,\n        ok,\n        defined\n          ? effects.attempt(collapsedReferenceConstruct, ok, balanced)\n          : balanced\n      )(code)\n    } // Shortcut reference: `[asd]`?\n\n    return defined ? ok(code) : balanced(code)\n  }\n  /** @type {State} */\n\n  function balanced(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeResource(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return factoryWhitespace(effects, open)\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 41) {\n      return end(code)\n    }\n\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      nok,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n  /** @type {State} */\n\n  function destinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, between)(code)\n      : end(code)\n  }\n  /** @type {State} */\n\n  function between(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factoryWhitespace(effects, end),\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeFullReference(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      afterLabel,\n      nok,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function afterLabel(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCollapsedReference(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n\n/**\n * Classify whether a character code represents whitespace, punctuation, or\n * something else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * Note that eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n * @returns {number|undefined}\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Point} Point\n */\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n\n  let open\n  /** @type {Token} */\n\n  let group\n  /** @type {Token} */\n\n  let text\n  /** @type {Token} */\n\n  let openingSequence\n  /** @type {Token} */\n\n  let closingSequence\n  /** @type {number} */\n\n  let use\n  /** @type {Event[]} */\n\n  let nextEvents\n  /** @type {number} */\n\n  let offset // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index // Now walk back to find an opener.\n\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open && // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          } // Number of markers to use from the sequence.\n\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = [] // If there are more markers in the opening, add them before.\n\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          } // Opening.\n\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ]) // Between.\n\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          ) // Closing.\n\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ]) // If there are more markers in the closing, add them after.\n\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  } // Remove remaining sequences.\n\n  index = -1\n\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('attentionSequence')\n    marker = code\n    return sequence(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return sequence\n    }\n\n    const token = effects.exit('attentionSequence')\n    const after = classifyCharacter(code)\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\n\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 1\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n\n    return asciiAtext(code) ? emailAtext(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function schemeOrEmailAtext(code) {\n    return code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)\n      ? schemeInsideOrEmailAtext(code)\n      : emailAtext(code)\n  }\n  /** @type {State} */\n\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      return urlInside\n    }\n\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n\n    return emailAtext(code)\n  }\n  /** @type {State} */\n\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      return end(code)\n    }\n\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return urlInside\n  }\n  /** @type {State} */\n\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (code === 62) {\n      // Exit, then change the type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      return end(code)\n    }\n\n    return emailValue(code)\n  }\n  /** @type {State} */\n\n  function emailValue(code) {\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      effects.consume(code)\n      return code === 45 ? emailValue : emailLabel\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.exit('autolink')\n    return ok\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>|undefined} */\n\n  let marker\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {State} */\n\n  let returnState\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpen\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpen\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentStart\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentStart(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentStartDash\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function commentStartDash(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return comment\n  }\n  /** @type {State} */\n\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return end\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function cdataOpen(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length ? cdata : cdataOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return cdata\n  }\n  /** @type {State} */\n\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return declaration\n  }\n  /** @type {State} */\n\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return instruction\n  }\n  /** @type {State} */\n\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagClose(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return tagCloseBetween(code)\n  }\n  /** @type {State} */\n\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpen(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    return tagOpenAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n\n    return tagOpenBetween(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    effects.consume(code)\n    marker = undefined\n    return tagOpenAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return tagOpenAttributeValueQuotedAfter\n    }\n\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 62 || code === 47 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  } // We can’t have blank lines in content, so no need to worry about empty\n  // tokens.\n\n  /** @type {State} */\n\n  function atLineEnding(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(\n      effects,\n      afterPrefix,\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook. */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('escapeMarker')\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n/** @type {Resolver} */\n\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n\n  let index\n  /** @type {number|undefined} */\n\n  let enter // If we start and end with an EOL or a space.\n\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex // And we have data.\n\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  } // Merge adjacent spaces and data.\n\n  index = headEnterIndex - 1\n  tailExitIndex++\n\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n\n      enter = undefined\n    }\n  }\n\n  return events\n}\n/** @type {Previous} */\n\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n\n  let size\n  /** @type {Token} */\n\n  let token\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return openingSequence(code)\n  }\n  /** @type {State} */\n\n  function openingSequence(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return openingSequence\n    }\n\n    effects.exit('codeTextSequence')\n    return gap(code)\n  }\n  /** @type {State} */\n\n  function gap(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    } // Closing fence?\n    // Could also be data.\n\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return closingSequence(code)\n    } // Tabs don’t work, and virtual spaces don’t make sense.\n\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return gap\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return gap\n    } // Data.\n\n    effects.enter('codeTextData')\n    return data(code)\n  } // In code.\n\n  /** @type {State} */\n\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return gap(code)\n    }\n\n    effects.consume(code)\n    return data\n  } // Closing fence.\n\n  /** @type {State} */\n\n  function closingSequence(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return closingSequence\n    } // Done!\n\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    } // More or less accents: mark as data.\n\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n/** @type {Extension['document']} */\n\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n/** @type {Extension['contentInitial']} */\n\nexport const contentInitial = {\n  [91]: definition\n}\n/** @type {Extension['flowInitial']} */\n\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n/** @type {Extension['flow']} */\n\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n/** @type {Extension['string']} */\n\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n/** @type {Extension['text']} */\n\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n/** @type {Extension['insideSpan']} */\n\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n/** @type {Extension['attentionMarkers']} */\n\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n/** @type {Extension['disable']} */\n\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Create} Create\n */\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n/**\n * @param {ParseOptions} [options]\n * @returns {ParseContext}\n */\n\nexport function parse(options = {}) {\n  /** @type {FullNormalizedExtension} */\n  // @ts-expect-error `defaultConstructs` is full, so the result will be too.\n  const constructs = combineExtensions(\n    // @ts-expect-error Same as above.\n    [defaultConstructs].concat(options.extensions || [])\n  )\n  /** @type {ParseContext} */\n\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n  /**\n   * @param {InitialConstruct} initial\n   */\n\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding} [encoding]\n * @param {boolean} [end=false]\n * @returns {Array<Chunk>}\n */\nconst search = /[\\0\\t\\n\\r]/g\n/**\n * @returns {Preprocessor}\n */\n\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean|undefined} */\n\n  let start = true\n  /** @type {boolean|undefined} */\n\n  let atCarriageReturn\n  return preprocessor\n  /** @type {Preprocessor} */\n\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray|null} */\n\n    let match\n    /** @type {number} */\n\n    let next\n    /** @type {number} */\n\n    let startPosition\n    /** @type {number} */\n\n    let endPosition\n    /** @type {Code} */\n\n    let code // @ts-expect-error `Buffer` does allow an encoding.\n\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n\n    if (start) {\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n\n      start = undefined\n    }\n\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n\n            while (column++ < next) chunks.push(-1)\n\n            break\n          }\n\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n\n      startPosition = endPosition + 1\n    }\n\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n\n    return chunks\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\n\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n\n  return events\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n\n  if (\n    // C0 except for HT, LF, FF, CR, space\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) || // Control character (DEL) of the basic block and C1 controls.\n    (code > 126 && code < 160) || // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) || // Noncharacters.\n    (code > 64975 && code < 65008) ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 || // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n/**\n * Utility to decode markdown strings (which occur in places such as fenced\n * code info strings, destinations, labels, and titles).\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\n\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  } // Reference.\n\n  const head = $2.charCodeAt(0)\n\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {Root|Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {UnistParent & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @typedef _CompileDataFields\n * @property {boolean|undefined} expectingFirstListItemValue\n * @property {boolean|undefined} flowCodeInside\n * @property {boolean|undefined} setextHeadingSlurpLineEnding\n * @property {boolean|undefined} atHardBreak\n * @property {'collapsed'|'full'} referenceType\n * @property {boolean|undefined} inReference\n * @property {'characterReferenceMarkerHexadecimal'|'characterReferenceMarkerNumeric'} characterReferenceType\n *\n * @typedef {Record<string, unknown> & Partial<_CompileDataFields>} CompileData\n *\n * @typedef {(tree: Root) => Root|void} Transform\n * @typedef {(this: CompileContext, token: Token) => void} Handle\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n * @typedef {Record<string, Record<string, unknown>|Array<unknown>> & {canContainEols: Array<string>, transforms: Array<Transform>, enter: Handles, exit: Handles}} NormalizedExtension\n * @typedef {Partial<NormalizedExtension>} Extension\n *   An mdast extension changes how markdown tokens are turned into mdast.\n *\n * @typedef {(this: Omit<CompileContext, 'sliceSerialize'>, left: Token|undefined, right: Token) => void} OnEnterError\n * @typedef {(this: Omit<CompileContext, 'sliceSerialize'>, left: Token, right: Token) => void} OnExitError\n *\n * @typedef CompileContext\n *   mdast compiler context\n * @property {Array<Node | Fragment>} stack\n * @property {Array<[Token, OnEnterError|undefined]>} tokenStack\n * @property {(key: string, value?: unknown) => void} setData\n *   Set data into the key-value store.\n * @property {<K extends string>(key: K) => CompileData[K]} getData\n *   Get data from the key-value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<N extends Node>(this: CompileContext, node: N, token: Token, onError?: OnEnterError) => N} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {NormalizedExtension} config\n *   Configuration.\n *\n * @typedef {{mdastExtensions?: Array<Extension|Array<Extension>>}} FromMarkdownOptions\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n */\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n/**\n * @param value Markdown to parse (`string` or `Buffer`).\n * @param [encoding] Character encoding to understand `value` as when it’s a `Buffer` (`string`, default: `'utf8'`).\n * @param [options] Configuration\n */\n\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options) => Root) &\n   *   ((value: Value, options?: Options) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding} [encoding]\n   * @param {Options} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options} [options]\n */\n\nfunction compiler(options = {}) {\n  /** @type {NormalizedExtension} */\n  // @ts-expect-error: our base has all required fields, so the result will too.\n  const config = configure(\n    {\n      transforms: [],\n      canContainEols: [\n        'emphasis',\n        'fragment',\n        'heading',\n        'paragraph',\n        'strong'\n      ],\n      enter: {\n        autolink: opener(link),\n        autolinkProtocol: onenterdata,\n        autolinkEmail: onenterdata,\n        atxHeading: opener(heading),\n        blockQuote: opener(blockQuote),\n        characterEscape: onenterdata,\n        characterReference: onenterdata,\n        codeFenced: opener(codeFlow),\n        codeFencedFenceInfo: buffer,\n        codeFencedFenceMeta: buffer,\n        codeIndented: opener(codeFlow, buffer),\n        codeText: opener(codeText, buffer),\n        codeTextData: onenterdata,\n        data: onenterdata,\n        codeFlowValue: onenterdata,\n        definition: opener(definition),\n        definitionDestinationString: buffer,\n        definitionLabelString: buffer,\n        definitionTitleString: buffer,\n        emphasis: opener(emphasis),\n        hardBreakEscape: opener(hardBreak),\n        hardBreakTrailing: opener(hardBreak),\n        htmlFlow: opener(html, buffer),\n        htmlFlowData: onenterdata,\n        htmlText: opener(html, buffer),\n        htmlTextData: onenterdata,\n        image: opener(image),\n        label: buffer,\n        link: opener(link),\n        listItem: opener(listItem),\n        listItemValue: onenterlistitemvalue,\n        listOrdered: opener(list, onenterlistordered),\n        listUnordered: opener(list),\n        paragraph: opener(paragraph),\n        reference: onenterreference,\n        referenceString: buffer,\n        resourceDestinationString: buffer,\n        resourceTitleString: buffer,\n        setextHeading: opener(heading),\n        strong: opener(strong),\n        thematicBreak: opener(thematicBreak)\n      },\n      exit: {\n        atxHeading: closer(),\n        atxHeadingSequence: onexitatxheadingsequence,\n        autolink: closer(),\n        autolinkEmail: onexitautolinkemail,\n        autolinkProtocol: onexitautolinkprotocol,\n        blockQuote: closer(),\n        characterEscapeValue: onexitdata,\n        characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n        characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n        characterReferenceValue: onexitcharacterreferencevalue,\n        codeFenced: closer(onexitcodefenced),\n        codeFencedFence: onexitcodefencedfence,\n        codeFencedFenceInfo: onexitcodefencedfenceinfo,\n        codeFencedFenceMeta: onexitcodefencedfencemeta,\n        codeFlowValue: onexitdata,\n        codeIndented: closer(onexitcodeindented),\n        codeText: closer(onexitcodetext),\n        codeTextData: onexitdata,\n        data: onexitdata,\n        definition: closer(),\n        definitionDestinationString: onexitdefinitiondestinationstring,\n        definitionLabelString: onexitdefinitionlabelstring,\n        definitionTitleString: onexitdefinitiontitlestring,\n        emphasis: closer(),\n        hardBreakEscape: closer(onexithardbreak),\n        hardBreakTrailing: closer(onexithardbreak),\n        htmlFlow: closer(onexithtmlflow),\n        htmlFlowData: onexitdata,\n        htmlText: closer(onexithtmltext),\n        htmlTextData: onexitdata,\n        image: closer(onexitimage),\n        label: onexitlabel,\n        labelText: onexitlabeltext,\n        lineEnding: onexitlineending,\n        link: closer(onexitlink),\n        listItem: closer(),\n        listOrdered: closer(),\n        listUnordered: closer(),\n        paragraph: closer(),\n        referenceString: onexitreferencestring,\n        resourceDestinationString: onexitresourcedestinationstring,\n        resourceTitleString: onexitresourcetitlestring,\n        resource: onexitresource,\n        setextHeading: closer(onexitsetextheading),\n        setextHeadingLineSequence: onexitsetextheadinglinesequence,\n        setextHeadingText: onexitsetextheadingtext,\n        strong: closer(),\n        thematicBreak: closer()\n      }\n    },\n    options.mdastExtensions || []\n  )\n  /** @type {CompileData} */\n\n  const data = {}\n  return compile\n  /**\n   * @param {Array<Event>} events\n   * @returns {Root}\n   */\n\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {CompileContext['stack']} */\n\n    const stack = [tree]\n    /** @type {CompileContext['tokenStack']} */\n\n    const tokenStack = []\n    /** @type {Array<number>} */\n\n    const listStack = []\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n\n    const context = {\n      stack,\n      tokenStack,\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    let index = -1\n\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n\n    index = -1\n\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    if (tokenStack.length > 0) {\n      const tail = tokenStack[tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    } // Figure out `root` position.\n\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n    index = -1\n\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n\n    return tree\n  }\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token|undefined} */\n\n    let listItem\n    /** @type {number|undefined} */\n\n    let lineIndex\n    /** @type {number|undefined} */\n\n    let firstBlankLineIndex\n    /** @type {boolean|undefined} */\n\n    let atMarker\n\n    while (++index <= length) {\n      const event = events[index]\n\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            // @ts-expect-error Patched.\n            listItem._spread = true\n          } // Fix position.\n\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        } // Create a new list item.\n\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            // @ts-expect-error Patched\n            _spread: false,\n            start: Object.assign({}, event[1].start)\n          } // @ts-expect-error: `listItem` is most definitely defined, TS...\n\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    } // @ts-expect-error Patched.\n\n    events[start][1]._spread = listSpread\n    return length\n  }\n  /**\n   * @type {CompileContext['setData']}\n   * @param [value]\n   */\n\n  function setData(key, value) {\n    data[key] = value\n  }\n  /**\n   * @type {CompileContext['getData']}\n   * @template {string} K\n   * @param {K} key\n   * @returns {CompileData[K]}\n   */\n\n  function getData(key) {\n    return data[key]\n  }\n  /**\n   * @param {Point} d\n   * @returns {Point}\n   */\n\n  function point(d) {\n    return {\n      line: d.line,\n      column: d.column,\n      offset: d.offset\n    }\n  }\n  /**\n   * @param {(token: Token) => Node} create\n   * @param {Handle} [and]\n   * @returns {Handle}\n   */\n\n  function opener(create, and) {\n    return open\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n  /** @type {CompileContext['buffer']} */\n\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n  /**\n   * @type {CompileContext['enter']}\n   * @template {Node} N\n   * @this {CompileContext}\n   * @param {N} node\n   * @param {Token} token\n   * @param {OnEnterError} [errorHandler]\n   * @returns {N}\n   */\n\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler]) // @ts-expect-error: `end` will be patched later.\n\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n  /**\n   * @param {Handle} [and]\n   * @returns {Handle}\n   */\n\n  function closer(and) {\n    return close\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n  /**\n   * @type {CompileContext['exit']}\n   * @this {CompileContext}\n   * @param {Token} token\n   * @param {OnExitError} [onExitError]\n   * @returns {Node}\n   */\n\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n\n    node.position.end = point(token.end)\n    return node\n  }\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n\n  function resume() {\n    return toString(this.stack.pop())\n  } //\n  // Handlers.\n  //\n\n  /** @type {Handle} */\n\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n  /** @type {Handle} */\n\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor =\n        /** @type {List} */\n        this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n  /** @type {Handle} */\n\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node =\n      /** @type {Code} */\n      this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n  /** @type {Handle} */\n\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node =\n      /** @type {Code} */\n      this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n  /** @type {Handle} */\n\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n  /** @type {Handle} */\n\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node =\n      /** @type {Code} */\n      this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n  /** @type {Handle} */\n\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node =\n      /** @type {Code} */\n      this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n  /** @type {Handle} */\n\n  function onexitdefinitionlabelstring(token) {\n    // Discard label, use the source content instead.\n    const label = this.resume()\n    const node =\n      /** @type {Definition} */\n      this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n  /** @type {Handle} */\n\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node =\n      /** @type {Definition} */\n      this.stack[this.stack.length - 1]\n    node.title = data\n  }\n  /** @type {Handle} */\n\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node =\n      /** @type {Definition} */\n      this.stack[this.stack.length - 1]\n    node.url = data\n  }\n  /** @type {Handle} */\n\n  function onexitatxheadingsequence(token) {\n    const node =\n      /** @type {Heading} */\n      this.stack[this.stack.length - 1]\n\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n  /** @type {Handle} */\n\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n  /** @type {Handle} */\n\n  function onexitsetextheadinglinesequence(token) {\n    const node =\n      /** @type {Heading} */\n      this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n  /** @type {Handle} */\n\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n  /** @type {Handle} */\n\n  function onenterdata(token) {\n    const parent =\n      /** @type {Parent} */\n      this.stack[this.stack.length - 1]\n    /** @type {Node} */\n\n    let tail = parent.children[parent.children.length - 1]\n\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text() // @ts-expect-error: we’ll add `end` later.\n\n      tail.position = {\n        start: point(token.start)\n      } // @ts-expect-error: Assume `parent` accepts `text`.\n\n      parent.children.push(tail)\n    }\n\n    this.stack.push(tail)\n  }\n  /** @type {Handle} */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n  /** @type {Handle} */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n  /** @type {Handle} */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n  /** @type {Handle} */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node =\n      /** @type {HTML} */\n      this.stack[this.stack.length - 1]\n    node.value = data\n  }\n  /** @type {Handle} */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node =\n      /** @type {HTML} */\n      this.stack[this.stack.length - 1]\n    node.value = data\n  }\n  /** @type {Handle} */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node =\n      /** @type {InlineCode} */\n      this.stack[this.stack.length - 1]\n    node.value = data\n  }\n  /** @type {Handle} */\n\n  function onexitlink() {\n    const context =\n      /** @type {Link & {identifier: string, label: string}} */\n      this.stack[this.stack.length - 1] // To do: clean.\n\n    if (getData('inReference')) {\n      context.type += 'Reference' // @ts-expect-error: mutate.\n\n      context.referenceType = getData('referenceType') || 'shortcut' // @ts-expect-error: mutate.\n\n      delete context.url\n      delete context.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete context.identifier // @ts-expect-error: mutate.\n\n      delete context.label\n    }\n\n    setData('referenceType')\n  }\n  /** @type {Handle} */\n\n  function onexitimage() {\n    const context =\n      /** @type {Image & {identifier: string, label: string}} */\n      this.stack[this.stack.length - 1] // To do: clean.\n\n    if (getData('inReference')) {\n      context.type += 'Reference' // @ts-expect-error: mutate.\n\n      context.referenceType = getData('referenceType') || 'shortcut' // @ts-expect-error: mutate.\n\n      delete context.url\n      delete context.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete context.identifier // @ts-expect-error: mutate.\n\n      delete context.label\n    }\n\n    setData('referenceType')\n  }\n  /** @type {Handle} */\n\n  function onexitlabeltext(token) {\n    const ancestor =\n      /** @type {(Link|Image) & {identifier: string, label: string}} */\n      this.stack[this.stack.length - 2]\n    const string = this.sliceSerialize(token)\n    ancestor.label = decodeString(string)\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n  /** @type {Handle} */\n\n  function onexitlabel() {\n    const fragment =\n      /** @type {Fragment} */\n      this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node =\n      /** @type {(Link|Image) & {identifier: string, label: string}} */\n      this.stack[this.stack.length - 1] // Assume a reference.\n\n    setData('inReference', true)\n\n    if (node.type === 'link') {\n      // @ts-expect-error: Assume static phrasing content.\n      node.children = fragment.children\n    } else {\n      node.alt = value\n    }\n  }\n  /** @type {Handle} */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node =\n      /** @type {Link|Image} */\n      this.stack[this.stack.length - 1]\n    node.url = data\n  }\n  /** @type {Handle} */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node =\n      /** @type {Link|Image} */\n      this.stack[this.stack.length - 1]\n    node.title = data\n  }\n  /** @type {Handle} */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n  /** @type {Handle} */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n  /** @type {Handle} */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node =\n      /** @type {LinkReference|ImageReference} */\n      this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n  /** @type {Handle} */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n  /** @type {Handle} */\n\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n\n    let value\n\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      // @ts-expect-error `decodeNamedCharacterReference` can return false for\n      // invalid named character references, but everything we’ve tokenized is\n      // valid.\n      value = decodeNamedCharacterReference(data)\n    }\n\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n  /** @type {Handle} */\n\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node =\n      /** @type {Link} */\n      this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n  /** @type {Handle} */\n\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node =\n      /** @type {Link} */\n      this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  } //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n  /** @returns {Code} */\n\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n  /** @returns {InlineCode} */\n\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n  /** @returns {Definition} */\n\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n  /** @returns {Emphasis} */\n\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n  /** @returns {Heading} */\n\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n  /** @returns {Break} */\n\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n  /** @returns {HTML} */\n\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n  /** @returns {Image} */\n\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n  /** @returns {Link} */\n\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      children: []\n    }\n  }\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n  /** @returns {Paragraph} */\n\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n  /** @returns {Strong} */\n\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n  /** @returns {Text} */\n\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n  /** @returns {ThematicBreak} */\n\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n/**\n * @param {Extension} combined\n * @param {Array<Extension|Array<Extension>>} extensions\n * @returns {Extension}\n */\n\nfunction configure(combined, extensions) {\n  let index = -1\n\n  while (++index < extensions.length) {\n    const value = extensions[index]\n\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n\n  return combined\n}\n/**\n * @param {Extension} combined\n * @param {Extension} extension\n * @returns {void}\n */\n\nfunction extension(combined, extension) {\n  /** @type {string} */\n  let key\n\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      const list = key === 'canContainEols' || key === 'transforms'\n      const maybe = own.call(combined, key) ? combined[key] : undefined\n      /* c8 ignore next */\n\n      const left = maybe || (combined[key] = list ? [] : {})\n      const right = extension[key]\n\n      if (right) {\n        if (list) {\n          // @ts-expect-error: `left` is an array.\n          combined[key] = [...left, ...right]\n        } else {\n          Object.assign(left, right)\n        }\n      }\n    }\n  }\n}\n/** @type {OnEnterError} */\n\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/** @type {import('unified').Plugin<[Options?] | void[], string, Root>} */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","import remarkParse from './lib/index.js'\n\nexport default remarkParse\n","/**\n * @typedef {import('unist').Node} Node\n */\n\n/**\n * @typedef {Array<Node> | string} ChildrenOrValue\n *   List to use as `children` or value to use as `value`.\n *\n * @typedef {Record<string, unknown>} Props\n *   Other fields to add to the node.\n */\n\n/**\n * Build a node.\n *\n * @param type\n *   Node type.\n * @param props\n *   Fields assigned to node.\n * @param value\n *   Children of node or value of `node` (cast to string).\n * @returns\n *   Built node.\n */\nexport const u =\n  /**\n   * @type {(\n   *   (<T extends string>(type: T) => {type: T}) &\n   *   (<T extends string, P extends Props>(type: T, props: P) => {type: T} & P) &\n   *   (<T extends string>(type: T, value: string) => {type: T, value: string}) &\n   *   (<T extends string, P extends Props>(type: T, props: P, value: string) => {type: T, value: string} & P) &\n   *   (<T extends string, C extends Array<Node>>(type: T, children: C) => {type: T, children: C}) &\n   *   (<T extends string, P extends Props, C extends Array<Node>>(type: T, props: P, children: C) => {type: T, children: C} & P)\n   * )}\n   */\n  (\n    /**\n     * @param {string} type\n     * @param {Props | ChildrenOrValue | null | undefined} [props]\n     * @param {ChildrenOrValue | null | undefined} [value]\n     * @returns {Node}\n     */\n    function (type, props, value) {\n      /** @type {Node} */\n      const node = {type: String(type)}\n\n      if (\n        (value === undefined || value === null) &&\n        (typeof props === 'string' || Array.isArray(props))\n      ) {\n        value = props\n      } else {\n        Object.assign(node, props)\n      }\n\n      if (Array.isArray(value)) {\n        // @ts-expect-error: create a parent.\n        node.children = value\n      } else if (value !== undefined && value !== null) {\n        // @ts-expect-error: create a literal.\n        node.value = String(value)\n      }\n\n      return node\n    }\n  )\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @param {string} d\n * @returns {string}\n */\nexport function color(d) {\n  return d\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('./complex-types.js').Action} Action\n * @typedef {import('./complex-types.js').Index} Index\n * @typedef {import('./complex-types.js').ActionTuple} ActionTuple\n * @typedef {import('./complex-types.js').VisitorResult} VisitorResult\n * @typedef {import('./complex-types.js').Visitor} Visitor\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal\n */\nexport const CONTINUE = true\n/**\n * Do not traverse this node’s children\n */\nexport const SKIP = 'skip'\n/**\n * Stop traversing immediately\n */\nexport const EXIT = false\n\n/**\n * Visit children of tree which pass test.\n *\n * @param tree\n *   Tree to walk\n * @param [test]\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Function called for nodes that pass `test`.\n * @param [reverse=false]\n *   Traverse in reverse preorder (NRL) instead of preorder (NLR) (default).\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types.js').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types.js').BuildVisitor<Tree>, reverse?: boolean) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {import('./complex-types.js').Visitor<Node>} visitor\n     * @param {boolean} [reverse=false]\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, null, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number?} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = typeof node === 'object' && node !== null ? node : {}\n        /** @type {string|undefined} */\n        let name\n\n        if (typeof value.type === 'string') {\n          name =\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' +\n              color(value.type + (name ? '<' + name + '>' : '')) +\n              ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * @param {VisitorResult} value\n * @returns {ActionTuple}\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n * @typedef {import('./complex-types.js').Visitor} Visitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit children of tree which pass test.\n *\n * @param tree\n *   Tree to walk\n * @param [test]\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Function called for nodes that pass `test`.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of preorder (NLR) (default).\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types.js').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types.js').BuildVisitor<Tree>, reverse?: boolean) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {import('./complex-types.js').Visitor} visitor\n     * @param {boolean} [reverse]\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike | Node | null | undefined} [node]\n *   Node.\n * @returns {Position}\n *   Position.\n */\nexport function position(node) {\n  return {start: pointStart(node), end: pointEnd(node)}\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'start' | 'end'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {NodeLike | Node | null | undefined} [node]\n   * @returns {Point}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    // To do: next major: don’t return points when invalid.\n    return {\n      // @ts-expect-error: in practice, null is allowed.\n      line: point.line || null,\n      // @ts-expect-error: in practice, null is allowed.\n      column: point.column || null,\n      // @ts-expect-error: in practice, null is allowed.\n      offset: point.offset > -1 ? point.offset : null\n    }\n  }\n}\n","/**\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef NodeLike\n * @property {PositionLike | null | undefined} [position]\n */\n\n/**\n * Check if `node` is generated.\n *\n * @param {NodeLike | null | undefined} [node]\n *   Node to check.\n * @returns {boolean}\n *   Whether `node` is generated (does not have positional info).\n */\nexport function generated(node) {\n  return (\n    !node ||\n    !node.position ||\n    !node.position.start ||\n    !node.position.start.line ||\n    !node.position.start.column ||\n    !node.position.end ||\n    !node.position.end.line ||\n    !node.position.end.column\n  )\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n * @typedef {import('mdast').Definition} Definition\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find definitions in `node`.\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} node\n */\nexport function definitions(node) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null)\n\n  if (!node || !node.type) {\n    throw new Error('mdast-util-definitions expected node')\n  }\n\n  visit(node, 'definition', (definition) => {\n    const id = clean(definition.identifier)\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition\n    }\n  })\n\n  return definition\n\n  /**\n   * Get a node from the bound definition cache.\n   *\n   * @param {string} identifier\n   * @returns {Definition|null}\n   */\n  function definition(identifier) {\n    const id = clean(identifier)\n    return id && own.call(cache, id) ? cache[id] : null\n  }\n}\n\n/**\n * @param {string} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase()\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} MdastNode\n * @typedef {Extract<MdastNode, import('mdast').Parent>} MdastParent\n * @typedef {import('./index.js').Handler} Handler\n * @typedef {import('./index.js').H} H\n * @typedef {import('./index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Transform an unknown node.\n *\n * @param {H} h\n * @param {MdastNode} node\n */\nfunction unknown(h, node) {\n  const data = node.data || {}\n\n  if (\n    'value' in node &&\n    !(\n      own.call(data, 'hName') ||\n      own.call(data, 'hProperties') ||\n      own.call(data, 'hChildren')\n    )\n  ) {\n    return h.augment(node, u('text', node.value))\n  }\n\n  return h(node, 'div', all(h, node))\n}\n\n/**\n * @param {H} h\n * @param {MdastNode} node\n * @param {MdastParent | null} parent\n */\nexport function one(h, node, parent) {\n  const type = node && node.type\n  /** @type {Handler} */\n  let fn\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(h.handlers, type)) {\n    fn = h.handlers[type]\n  } else if (h.passThrough && h.passThrough.includes(type)) {\n    fn = returnNode\n  } else {\n    fn = h.unknownHandler\n  }\n\n  return (typeof fn === 'function' ? fn : unknown)(h, node, parent)\n}\n\n/**\n * @template {MdastNode} Node\n * @param {H} h\n * @param {Node} node\n * @returns {Node}\n */\nfunction returnNode(h, node) {\n  return 'children' in node ? {...node, children: all(h, node)} : node\n}\n\n/**\n * @param {H} h\n * @param {MdastNode} parent\n */\nexport function all(h, parent) {\n  /** @type {Array<Content>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n\n    while (++index < nodes.length) {\n      const result = one(h, nodes[index], parent)\n\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri` below).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * Then, a regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`,\n * or `/^https?$/i` for `img[src]`.\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string|undefined} url\n * @param {RegExp} [protocol]\n * @returns {string}\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n\n  if (!protocol) {\n    return value\n  }\n\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 || // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) || // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n/**\n * Normalize a URL (such as used in definitions).\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n\n    let replace = '' // A correct percent encoded value.\n\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    } // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    } // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1) // A correct surrogate pair.\n\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      } // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    } // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('./index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * Wrap `nodes` with line feeds between each entry.\n * Optionally adds line feeds at the start and end.\n *\n * @param {Array<Content>} nodes\n * @param {boolean} [loose=false]\n * @returns {Array<Content>}\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Content>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push(u('text', '\\n'))\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push(u('text', '\\n'))\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push(u('text', '\\n'))\n  }\n\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('./index.js').H} H\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {u} from 'unist-builder'\nimport {all} from './traverse.js'\nimport {wrap} from './wrap.js'\n\n/**\n * @param {H} h\n * @returns {Element|null}\n */\nexport function footer(h) {\n  let index = -1\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n\n  while (++index < h.footnoteOrder.length) {\n    const def = h.footnoteById[h.footnoteOrder[index].toUpperCase()]\n\n    if (!def) {\n      continue\n    }\n\n    const content = all(h, def)\n    const id = String(def.identifier)\n    const safeId = normalizeUri(id.toLowerCase())\n    let referenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n\n    while (++referenceIndex <= h.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            h.clobberPrefix +\n            'fnref-' +\n            safeId +\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: h.footnoteBackLabel\n        },\n        children: [{type: 'text', value: '↩'}]\n      }\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{type: 'text', value: String(referenceIndex)}]\n        })\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      backReferences.push(backReference)\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: h.clobberPrefix + 'fn-' + safeId},\n      children: wrap(content, true)\n    }\n\n    if (def.position) {\n      listItem.position = def.position\n    }\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return null\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: h.footnoteLabelTagName,\n        properties: {\n          ...JSON.parse(JSON.stringify(h.footnoteLabelProperties)),\n          id: 'footnote-label'\n        },\n        children: [u('text', h.footnoteLabel)]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../index.js').H} H\n */\n\nimport {wrap} from '../wrap.js'\nimport {all} from '../traverse.js'\n\n/**\n * @param {H} h\n * @param {Blockquote} node\n */\nexport function blockquote(h, node) {\n  return h(node, 'blockquote', wrap(all(h, node), true))\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../index.js').H} H\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * @param {H} h\n * @param {Break} node\n * @returns {Array<Element|Text>}\n */\nexport function hardBreak(h, node) {\n  return [h(node, 'br'), u('text', '\\n')]\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').H} H\n\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * @param {H} h\n * @param {Code} node\n */\nexport function code(h, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang && node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/)\n  /** @type {Properties} */\n  const props = {}\n\n  if (lang) {\n    props.className = ['language-' + lang]\n  }\n\n  const code = h(node, 'code', props, [u('text', value)])\n\n  if (node.meta) {\n    code.data = {meta: node.meta}\n  }\n\n  return h(node.position, 'pre', [code])\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../index.js').H} H\n\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @param {H} h\n * @param {Delete} node\n */\nexport function strikethrough(h, node) {\n  return h(node, 'del', all(h, node))\n}\n","/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../index.js').H} H\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @param {H} h\n * @param {Emphasis} node\n */\nexport function emphasis(h, node) {\n  return h(node, 'em', all(h, node))\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../index.js').H} H\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {u} from 'unist-builder'\n\n/**\n * @param {H} h\n * @param {FootnoteReference} node\n */\nexport function footnoteReference(h, node) {\n  const id = String(node.identifier)\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = h.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  if (index === -1) {\n    h.footnoteOrder.push(id)\n    h.footnoteCounts[id] = 1\n    counter = h.footnoteOrder.length\n  } else {\n    h.footnoteCounts[id]++\n    counter = index + 1\n  }\n\n  const reuseCounter = h.footnoteCounts[id]\n\n  return h(node, 'sup', [\n    h(\n      node.position,\n      'a',\n      {\n        href: '#' + h.clobberPrefix + 'fn-' + safeId,\n        id:\n          h.clobberPrefix +\n          'fnref-' +\n          safeId +\n          (reuseCounter > 1 ? '-' + reuseCounter : ''),\n        dataFootnoteRef: true,\n        ariaDescribedBy: 'footnote-label'\n      },\n      [u('text', String(counter))]\n    )\n  ])\n}\n","/**\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../index.js').H} H\n *\n * @todo\n *   `footnote` (or “inline note”) are a pandoc footnotes feature (`^[a note]`)\n *   that does not exist in GFM.\n *   We still have support for it, so that things remain working with\n *   `micromark-extension-footnote` and `mdast-util-footnote`, but in the future\n *   we might be able to remove it?\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n/**\n * @param {H} h\n * @param {Footnote} node\n */\nexport function footnote(h, node) {\n  const footnoteById = h.footnoteById\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(h, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../index.js').H} H\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @param {H} h\n * @param {Heading} node\n */\nexport function heading(h, node) {\n  return h(node, 'h' + node.depth, all(h, node))\n}\n","/**\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('../index.js').H} H\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * Return either a `raw` node in dangerous mode, otherwise nothing.\n *\n * @param {H} h\n * @param {HTML} node\n */\nexport function html(h, node) {\n  return h.dangerous ? h.augment(node, u('raw', node.value)) : null\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('./index.js').H} H\n * @typedef {import('./index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\nimport {all} from './traverse.js'\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {H} h\n * @param {ImageReference|LinkReference} node\n * @returns {Content|Array<Content>}\n */\nexport function revert(h, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return u('text', '![' + node.alt + suffix)\n  }\n\n  const contents = all(h, node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift(u('text', '['))\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push(u('text', suffix))\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').H} H\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * @param {H} h\n * @param {ImageReference} node\n */\nexport function imageReference(h, node) {\n  const def = h.definition(node.identifier)\n\n  if (!def) {\n    return revert(h, node)\n  }\n\n  /** @type {Properties} */\n  const props = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    props.title = def.title\n  }\n\n  return h(node, 'img', props)\n}\n","/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').H} H\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * @param {H} h\n * @param {Image} node\n */\nexport function image(h, node) {\n  /** @type {Properties} */\n  const props = {src: normalizeUri(node.url), alt: node.alt}\n\n  if (node.title !== null && node.title !== undefined) {\n    props.title = node.title\n  }\n\n  return h(node, 'img', props)\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../index.js').H} H\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * @param {H} h\n * @param {InlineCode} node\n */\nexport function inlineCode(h, node) {\n  return h(node, 'code', [u('text', node.value.replace(/\\r?\\n|\\r/g, ' '))])\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').H} H\n * @typedef {import('mdast').Parent} Parent\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\nimport {all} from '../traverse.js'\n\n/**\n * @param {H} h\n * @param {LinkReference} node\n */\nexport function linkReference(h, node) {\n  const def = h.definition(node.identifier)\n\n  if (!def) {\n    return revert(h, node)\n  }\n\n  /** @type {Properties} */\n  const props = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    props.title = def.title\n  }\n\n  return h(node, 'a', props, all(h, node))\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').H} H\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {all} from '../traverse.js'\n\n/**\n * @param {H} h\n * @param {Link} node\n */\nexport function link(h, node) {\n  /** @type {Properties} */\n  const props = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    props.title = node.title\n  }\n\n  return h(node, 'a', props, all(h, node))\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').List} List\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').H} H\n * @typedef {import('../index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\nimport {all} from '../traverse.js'\n\n/**\n * @param {H} h\n * @param {ListItem} node\n * @param {List} parent\n */\nexport function listItem(h, node, parent) {\n  const result = all(h, node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const props = {}\n  /** @type {Array<Content>} */\n  const wrapped = []\n\n  if (typeof node.checked === 'boolean') {\n    /** @type {Element} */\n    let paragraph\n\n    if (\n      result[0] &&\n      result[0].type === 'element' &&\n      result[0].tagName === 'p'\n    ) {\n      paragraph = result[0]\n    } else {\n      paragraph = h(null, 'p', [])\n      result.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift(u('text', ' '))\n    }\n\n    paragraph.children.unshift(\n      h(null, 'input', {\n        type: 'checkbox',\n        checked: node.checked,\n        disabled: true\n      })\n    )\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    props.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < result.length) {\n    const child = result[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      wrapped.push(u('text', '\\n'))\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      wrapped.push(...child.children)\n    } else {\n      wrapped.push(child)\n    }\n  }\n\n  const tail = result[result.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || !('tagName' in tail) || tail.tagName !== 'p')) {\n    wrapped.push(u('text', '\\n'))\n  }\n\n  return h(node, 'li', props, wrapped)\n}\n\n/**\n * @param {List} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = node.spread\n  const children = node.children\n  let index = -1\n\n  while (!loose && ++index < children.length) {\n    loose = listItemLoose(children[index])\n  }\n\n  return Boolean(loose)\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').H} H\n */\n\nimport {wrap} from '../wrap.js'\nimport {all} from '../traverse.js'\n\n/**\n * @param {H} h\n * @param {List} node\n */\nexport function list(h, node) {\n  /** @type {Properties} */\n  const props = {}\n  const name = node.ordered ? 'ol' : 'ul'\n  const items = all(h, node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    props.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < items.length) {\n    const item = items[index]\n\n    if (\n      item.type === 'element' &&\n      item.tagName === 'li' &&\n      item.properties &&\n      Array.isArray(item.properties.className) &&\n      item.properties.className.includes('task-list-item')\n    ) {\n      props.className = ['contains-task-list']\n      break\n    }\n  }\n\n  return h(node, name, props, wrap(items, true))\n}\n","/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../index.js').H} H\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @param {H} h\n * @param {Paragraph} node\n */\nexport function paragraph(h, node) {\n  return h(node, 'p', all(h, node))\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../index.js').H} H\n */\n\nimport {u} from 'unist-builder'\nimport {all} from '../traverse.js'\nimport {wrap} from '../wrap.js'\n\n/**\n * @param {H} h\n * @param {Root} node\n */\nexport function root(h, node) {\n  // @ts-expect-error `root`s are also fine.\n  return h.augment(node, u('root', wrap(all(h, node))))\n}\n","/**\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../index.js').H} H\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @param {H} h\n * @param {Strong} node\n */\nexport function strong(h, node) {\n  return h(node, 'strong', all(h, node))\n}\n","/**\n * @typedef {import('mdast').Table} Table\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').H} H\n * @typedef {import('../index.js').Content} Content\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\nimport {wrap} from '../wrap.js'\nimport {all} from '../traverse.js'\n\n/**\n * @param {H} h\n * @param {Table} node\n */\nexport function table(h, node) {\n  const rows = node.children\n  let index = -1\n  const align = node.align || []\n  /** @type {Array<Element>} */\n  const result = []\n\n  while (++index < rows.length) {\n    const row = rows[index].children\n    const name = index === 0 ? 'th' : 'td'\n    /** @type {Array<Content>} */\n    const out = []\n    let cellIndex = -1\n    const length = node.align ? align.length : row.length\n\n    while (++cellIndex < length) {\n      const cell = row[cellIndex]\n      out.push(\n        h(cell, name, {align: align[cellIndex]}, cell ? all(h, cell) : [])\n      )\n    }\n\n    result[index] = h(rows[index], 'tr', wrap(out, true))\n  }\n\n  return h(\n    node,\n    'table',\n    wrap(\n      [h(result[0].position, 'thead', wrap([result[0]], true))].concat(\n        result[1]\n          ? h(\n              {\n                start: pointStart(result[1]),\n                end: pointEnd(result[result.length - 1])\n              },\n              'tbody',\n              wrap(result.slice(1), true)\n            )\n          : []\n      ),\n      true\n    )\n  )\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","/**\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../index.js').H} H\n */\n\nimport {trimLines} from 'trim-lines'\nimport {u} from 'unist-builder'\n\n/**\n * @param {H} h\n * @param {Text} node\n */\nexport function text(h, node) {\n  return h.augment(node, u('text', trimLines(String(node.value))))\n}\n","/**\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').H} H\n */\n\n/**\n * @param {H} h\n * @param {ThematicBreak} [node]\n */\nexport function thematicBreak(h, node) {\n  return h(node, 'hr')\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return null\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode\n * @typedef {import('hast').Root|import('hast').Parent['children'][number]} HastNode\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} Content\n *\n * @typedef EmbeddedHastFields\n * @property {string} [hName]\n *   Defines the tag name of an element.\n * @property {Properties} [hProperties]\n *   Defines the properties of an element.\n * @property {Array<Content>} [hChildren]\n *   Defines the (hast) children of an element.\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} Data\n *   unist data with embedded hast fields.\n *\n * @typedef {MdastNode & {data?: Data}} NodeWithData\n *   unist node with embedded hast data.\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @callback Handler\n *   Handle a node.\n * @param {H} h\n *   Handle context.\n * @param {any} node\n *   mdast node to handle.\n * @param {Parent|null} parent\n *   Parent of `node`.\n * @returns {Content|Array<Content>|null|undefined}\n *   hast node.\n *\n * @callback HFunctionProps\n * @param {MdastNode|PositionLike|null|undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Properties} props\n *   Properties.\n * @param {Array<Content>?} [children]\n *   hast content.\n * @returns {Element}\n *   Compiled element.\n *\n * @callback HFunctionNoProps\n * @param {MdastNode|PositionLike|null|undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Array<Content>?} [children]\n *   hast content\n * @returns {Element}\n *   Compiled element.\n *\n * @typedef HFields\n * @property {boolean} dangerous\n *   Whether HTML is allowed.\n * @property {string} clobberPrefix\n *   Prefix to use to prevent DOM clobbering.\n * @property {string} footnoteLabel\n *   Label to use to introduce the footnote section.\n * @property {string} footnoteLabelTagName\n *   HTML used for the footnote label.\n * @property {Properties} footnoteLabelProperties\n *   Properties on the HTML tag used for the footnote label.\n * @property {string} footnoteBackLabel\n *   Label to use to go back to a footnote call from the footnote section.\n * @property {(identifier: string) => Definition|null} definition\n *   Definition cache.\n * @property {Record<string, FootnoteDefinition>} footnoteById\n *   Footnote cache.\n * @property {Array<string>} footnoteOrder\n *   Order in which footnotes occur.\n * @property {Record<string, number>} footnoteCounts\n *   Counts the same footnote was used.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {Handler} unknownHandler\n *   Handler for any none not in `passThrough` or otherwise handled.\n * @property {(left: NodeWithData|PositionLike|null|undefined, right: Content) => Content} augment\n *   Like `h` but lower-level and usable on non-elements.\n * @property {Array<string>} passThrough\n *   List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean} [allowDangerousHtml=false]\n *   Whether to allow `html` nodes and inject them as `raw` HTML.\n * @property {string} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute to prevent it from *clobbering*.\n *   attributes.\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=x></p>\n *   <script>alert(x)</script>\n *   ```\n *\n *   Elements by their ID are made available in browsers on the `window` object.\n *   Using a prefix prevents this from being a problem.\n * @property {string} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n * @property {string} [footnoteLabelTagName='h2']\n *   HTML tag to use for the footnote label.\n *   Can be changed to match your document structure and play well with your choice of css.\n * @property {Properties} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label.\n *   A 'sr-only' class is added by default to hide this from sighted users.\n *   Change it to make the label visible, or add classes for other purposes.\n * @property {string} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n * @property {Handlers} [handlers]\n *   Object mapping mdast nodes to functions handling them\n * @property {Array<string>} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast\n * @property {Handler} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Map of node types to handlers\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} H\n *   Handle context\n */\n\nimport {u} from 'unist-builder'\nimport {visit} from 'unist-util-visit'\nimport {pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {one} from './traverse.js'\nimport {footer} from './footer.js'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Turn mdast into hast.\n *\n * @param {MdastNode} tree\n *   mdast node.\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {H}\n *   `h` function.\n */\nfunction factory(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Record<string, FootnoteDefinition>} */\n  const footnoteById = {}\n\n  h.dangerous = dangerous\n  h.clobberPrefix =\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\n      ? 'user-content-'\n      : settings.clobberPrefix\n  h.footnoteLabel = settings.footnoteLabel || 'Footnotes'\n  h.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2'\n  h.footnoteLabelProperties = settings.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  h.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\n  h.definition = definitions(tree)\n  h.footnoteById = footnoteById\n  /** @type {Array<string>} */\n  h.footnoteOrder = []\n  /** @type {Record<string, number>} */\n  h.footnoteCounts = {}\n  h.augment = augment\n  h.handlers = {...handlers, ...settings.handlers}\n  h.unknownHandler = settings.unknownHandler\n  h.passThrough = settings.passThrough\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return h\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   *\n   * @param {(NodeWithData|PositionLike)?} left\n   * @param {Content} right\n   * @returns {Content}\n   */\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {Data} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  function h(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n}\n\n/**\n * Transform `tree` (an mdast node) to a hast node.\n *\n * @param {MdastNode} tree mdast node\n * @param {Options} [options] Configuration\n * @returns {HastNode|null|undefined} hast node\n */\nexport function toHast(tree, options) {\n  const h = factory(tree, options)\n  const node = one(h, tree, null)\n  const foot = footer(h)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push(u('text', '\\n'), foot)\n  }\n\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n\nexport {handlers as defaultHandlers} from './handlers/index.js'\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It’s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It’s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination || options)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return (node) => toHast(node, options)\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @param {string} d\n * @returns {string}\n */\nexport function color(d) {\n  return d\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('./complex-types.js').Action} Action\n * @typedef {import('./complex-types.js').Index} Index\n * @typedef {import('./complex-types.js').ActionTuple} ActionTuple\n * @typedef {import('./complex-types.js').VisitorResult} VisitorResult\n * @typedef {import('./complex-types.js').Visitor} Visitor\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal\n */\nexport const CONTINUE = true\n/**\n * Do not traverse this node’s children\n */\nexport const SKIP = 'skip'\n/**\n * Stop traversing immediately\n */\nexport const EXIT = false\n\n/**\n * Visit children of tree which pass test.\n *\n * @param tree\n *   Tree to walk\n * @param [test]\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Function called for nodes that pass `test`.\n * @param [reverse=false]\n *   Traverse in reverse preorder (NRL) instead of preorder (NLR) (default).\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types.js').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types.js').BuildVisitor<Tree>, reverse?: boolean) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {import('./complex-types.js').Visitor<Node>} visitor\n     * @param {boolean} [reverse=false]\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, null, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number?} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = typeof node === 'object' && node !== null ? node : {}\n        /** @type {string|undefined} */\n        let name\n\n        if (typeof value.type === 'string') {\n          name =\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' +\n              color(value.type + (name ? '<' + name + '>' : '')) +\n              ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * @param {VisitorResult} value\n * @returns {ActionTuple}\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n * @typedef {import('./complex-types.js').Visitor} Visitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit children of tree which pass test.\n *\n * @param tree\n *   Tree to walk\n * @param [test]\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Function called for nodes that pass `test`.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of preorder (NLR) (default).\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types.js').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types.js').BuildVisitor<Tree>, reverse?: boolean) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {import('./complex-types.js').Visitor} visitor\n     * @param {boolean} [reverse]\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","import {visit} from 'unist-util-visit'\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean|undefined}\n *\n * @typedef Options\n * @property {Array<string>} [allowedElements]\n * @property {Array<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */\n\n/**\n * @type {import('unified').Plugin<[Options], Root>}\n */\nexport default function rehypeFilter(options) {\n  if (options.allowedElements && options.disallowedElements) {\n    throw new TypeError(\n      'Only one of `allowedElements` and `disallowedElements` should be defined'\n    )\n  }\n\n  if (\n    options.allowedElements ||\n    options.disallowedElements ||\n    options.allowElement\n  ) {\n    return (tree) => {\n      visit(tree, 'element', (node, index, parent_) => {\n        const parent = /** @type {Element|Root} */ (parent_)\n        /** @type {boolean|undefined} */\n        let remove\n\n        if (options.allowedElements) {\n          remove = !options.allowedElements.includes(node.tagName)\n        } else if (options.disallowedElements) {\n          remove = options.disallowedElements.includes(node.tagName)\n        }\n\n        if (!remove && options.allowElement && typeof index === 'number') {\n          remove = !options.allowElement(node, index, parent)\n        }\n\n        if (remove && typeof index === 'number') {\n          if (options.unwrapDisallowed && node.children) {\n            parent.children.splice(index, 1, ...node.children)\n          } else {\n            parent.children.splice(index, 1)\n          }\n\n          return index\n        }\n\n        return undefined\n      })\n    }\n  }\n}\n","/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value =\n    // @ts-expect-error looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-expect-error looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","import StyleToObject from './index.js';\n\nexport default StyleToObject;\n","const protocols = ['http', 'https', 'mailto', 'tel']\n\n/**\n * @param {string} uri\n * @returns {string}\n */\nexport function uriTransformer(uri) {\n  const url = (uri || '').trim()\n  const first = url.charAt(0)\n\n  if (first === '#' || first === '/') {\n    return url\n  }\n\n  const colon = url.indexOf(':')\n  if (colon === -1) {\n    return url\n  }\n\n  let index = -1\n\n  while (++index < protocols.length) {\n    const protocol = protocols[index]\n\n    if (\n      colon === protocol.length &&\n      url.slice(0, protocol.length).toLowerCase() === protocol\n    ) {\n      return url\n    }\n  }\n\n  index = url.indexOf('?')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  index = url.indexOf('#')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  // eslint-disable-next-line no-script-url\n  return 'javascript:void(0)'\n}\n","/**\n * @template T\n * @typedef {import('react').ComponentType<T>} ComponentType<T>\n */\n\n/**\n * @template T\n * @typedef {import('react').ComponentPropsWithoutRef<T>} ComponentPropsWithoutRef<T>\n */\n\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('unist').Position} Position\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').DocType} Doctype\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('./complex-types.js').ReactMarkdownProps} ReactMarkdownProps\n *\n * @typedef Raw\n * @property {'raw'} type\n * @property {string} value\n *\n * @typedef Context\n * @property {Options} options\n * @property {Schema} schema\n * @property {number} listDepth\n *\n * @callback TransformLink\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {string}\n *\n * @callback TransformImage\n * @param {string} src\n * @param {string} alt\n * @param {string?} title\n * @returns {string}\n *\n * @typedef {import('react').HTMLAttributeAnchorTarget} TransformLinkTargetType\n *\n * @callback TransformLinkTarget\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {TransformLinkTargetType|undefined}\n *\n * @typedef {keyof JSX.IntrinsicElements} ReactMarkdownNames\n *\n * To do: is `data-sourcepos` typeable?\n *\n * @typedef {ComponentPropsWithoutRef<'code'> & ReactMarkdownProps & {inline?: boolean}} CodeProps\n * @typedef {ComponentPropsWithoutRef<'h1'> & ReactMarkdownProps & {level: number}} HeadingProps\n * @typedef {ComponentPropsWithoutRef<'li'> & ReactMarkdownProps & {checked: boolean|null, index: number, ordered: boolean}} LiProps\n * @typedef {ComponentPropsWithoutRef<'ol'> & ReactMarkdownProps & {depth: number, ordered: true}} OrderedListProps\n * @typedef {ComponentPropsWithoutRef<'td'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: false}} TableDataCellProps\n * @typedef {ComponentPropsWithoutRef<'th'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: true}} TableHeaderCellProps\n * @typedef {ComponentPropsWithoutRef<'tr'> & ReactMarkdownProps & {isHeader: boolean}} TableRowProps\n * @typedef {ComponentPropsWithoutRef<'ul'> & ReactMarkdownProps & {depth: number, ordered: false}} UnorderedListProps\n *\n * @typedef {ComponentType<CodeProps>} CodeComponent\n * @typedef {ComponentType<HeadingProps>} HeadingComponent\n * @typedef {ComponentType<LiProps>} LiComponent\n * @typedef {ComponentType<OrderedListProps>} OrderedListComponent\n * @typedef {ComponentType<TableDataCellProps>} TableDataCellComponent\n * @typedef {ComponentType<TableHeaderCellProps>} TableHeaderCellComponent\n * @typedef {ComponentType<TableRowProps>} TableRowComponent\n * @typedef {ComponentType<UnorderedListProps>} UnorderedListComponent\n *\n * @typedef SpecialComponents\n * @property {CodeComponent|ReactMarkdownNames} code\n * @property {HeadingComponent|ReactMarkdownNames} h1\n * @property {HeadingComponent|ReactMarkdownNames} h2\n * @property {HeadingComponent|ReactMarkdownNames} h3\n * @property {HeadingComponent|ReactMarkdownNames} h4\n * @property {HeadingComponent|ReactMarkdownNames} h5\n * @property {HeadingComponent|ReactMarkdownNames} h6\n * @property {LiComponent|ReactMarkdownNames} li\n * @property {OrderedListComponent|ReactMarkdownNames} ol\n * @property {TableDataCellComponent|ReactMarkdownNames} td\n * @property {TableHeaderCellComponent|ReactMarkdownNames} th\n * @property {TableRowComponent|ReactMarkdownNames} tr\n * @property {UnorderedListComponent|ReactMarkdownNames} ul\n *\n * @typedef {Partial<Omit<import('./complex-types.js').NormalComponents, keyof SpecialComponents> & SpecialComponents>} Components\n *\n * @typedef Options\n * @property {boolean} [sourcePos=false]\n * @property {boolean} [rawSourcePos=false]\n * @property {boolean} [skipHtml=false]\n * @property {boolean} [includeElementIndex=false]\n * @property {null|false|TransformLink} [transformLinkUri]\n * @property {TransformImage} [transformImageUri]\n * @property {TransformLinkTargetType|TransformLinkTarget} [linkTarget]\n * @property {Components} [components]\n */\n\nimport React from 'react'\nimport ReactIs from 'react-is'\nimport {whitespace} from 'hast-util-whitespace'\nimport {svg, find, hastToReact} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport style from 'style-to-object'\nimport {uriTransformer} from './uri-transformer.js'\n\nconst own = {}.hasOwnProperty\n\n// The table-related elements that must not contain whitespace text according\n// to React.\nconst tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr'])\n\n/**\n * @param {Context} context\n * @param {Element|Root} node\n */\nexport function childrenToReact(context, node) {\n  /** @type {Array<ReactNode>} */\n  const children = []\n  let childIndex = -1\n  /** @type {Comment|Doctype|Element|Raw|Text} */\n  let child\n\n  while (++childIndex < node.children.length) {\n    child = node.children[childIndex]\n\n    if (child.type === 'element') {\n      children.push(toReact(context, child, childIndex, node))\n    } else if (child.type === 'text') {\n      // Currently, a warning is triggered by react for *any* white space in\n      // tables.\n      // So we drop it.\n      // See: <https://github.com/facebook/react/pull/7081>.\n      // See: <https://github.com/facebook/react/pull/7515>.\n      // See: <https://github.com/remarkjs/remark-react/issues/64>.\n      // See: <https://github.com/remarkjs/react-markdown/issues/576>.\n      if (\n        node.type !== 'element' ||\n        !tableElements.has(node.tagName) ||\n        !whitespace(child)\n      ) {\n        children.push(child.value)\n      }\n    } else if (child.type === 'raw' && !context.options.skipHtml) {\n      // Default behavior is to show (encoded) HTML.\n      children.push(child.value)\n    }\n  }\n\n  return children\n}\n\n/**\n * @param {Context} context\n * @param {Element} node\n * @param {number} index\n * @param {Element|Root} parent\n */\nfunction toReact(context, node, index, parent) {\n  const options = context.options\n  const transform =\n    options.transformLinkUri === undefined\n      ? uriTransformer\n      : options.transformLinkUri\n  const parentSchema = context.schema\n  /** @type {ReactMarkdownNames} */\n  // @ts-expect-error assume a known HTML/SVG element.\n  const name = node.tagName\n  /** @type {Record<string, unknown>} */\n  const properties = {}\n  let schema = parentSchema\n  /** @type {string} */\n  let property\n\n  if (parentSchema.space === 'html' && name === 'svg') {\n    schema = svg\n    context.schema = schema\n  }\n\n  if (node.properties) {\n    for (property in node.properties) {\n      if (own.call(node.properties, property)) {\n        addProperty(properties, property, node.properties[property], context)\n      }\n    }\n  }\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth++\n  }\n\n  const children = childrenToReact(context, node)\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth--\n  }\n\n  // Restore parent schema.\n  context.schema = parentSchema\n\n  // Nodes created by plugins do not have positional info, in which case we use\n  // an object that matches the position interface.\n  const position = node.position || {\n    start: {line: null, column: null, offset: null},\n    end: {line: null, column: null, offset: null}\n  }\n  const component =\n    options.components && own.call(options.components, name)\n      ? options.components[name]\n      : name\n  const basic = typeof component === 'string' || component === React.Fragment\n\n  if (!ReactIs.isValidElementType(component)) {\n    throw new TypeError(\n      `Component for name \\`${name}\\` not defined or is not renderable`\n    )\n  }\n\n  properties.key = [\n    name,\n    position.start.line,\n    position.start.column,\n    index\n  ].join('-')\n\n  if (name === 'a' && options.linkTarget) {\n    properties.target =\n      typeof options.linkTarget === 'function'\n        ? options.linkTarget(\n            String(properties.href || ''),\n            node.children,\n            typeof properties.title === 'string' ? properties.title : null\n          )\n        : options.linkTarget\n  }\n\n  if (name === 'a' && transform) {\n    properties.href = transform(\n      String(properties.href || ''),\n      node.children,\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (\n    !basic &&\n    name === 'code' &&\n    parent.type === 'element' &&\n    parent.tagName !== 'pre'\n  ) {\n    properties.inline = true\n  }\n\n  if (\n    !basic &&\n    (name === 'h1' ||\n      name === 'h2' ||\n      name === 'h3' ||\n      name === 'h4' ||\n      name === 'h5' ||\n      name === 'h6')\n  ) {\n    properties.level = Number.parseInt(name.charAt(1), 10)\n  }\n\n  if (name === 'img' && options.transformImageUri) {\n    properties.src = options.transformImageUri(\n      String(properties.src || ''),\n      String(properties.alt || ''),\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (!basic && name === 'li' && parent.type === 'element') {\n    const input = getInputElement(node)\n    properties.checked =\n      input && input.properties ? Boolean(input.properties.checked) : null\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.ordered = parent.tagName === 'ol'\n  }\n\n  if (!basic && (name === 'ol' || name === 'ul')) {\n    properties.ordered = name === 'ol'\n    properties.depth = context.listDepth\n  }\n\n  if (name === 'td' || name === 'th') {\n    if (properties.align) {\n      if (!properties.style) properties.style = {}\n      // @ts-expect-error assume `style` is an object\n      properties.style.textAlign = properties.align\n      delete properties.align\n    }\n\n    if (!basic) {\n      properties.isHeader = name === 'th'\n    }\n  }\n\n  if (!basic && name === 'tr' && parent.type === 'element') {\n    properties.isHeader = Boolean(parent.tagName === 'thead')\n  }\n\n  // If `sourcePos` is given, pass source information (line/column info from markdown source).\n  if (options.sourcePos) {\n    properties['data-sourcepos'] = flattenPosition(position)\n  }\n\n  if (!basic && options.rawSourcePos) {\n    properties.sourcePosition = node.position\n  }\n\n  // If `includeElementIndex` is given, pass node index info to components.\n  if (!basic && options.includeElementIndex) {\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.siblingCount = getElementsBeforeCount(parent)\n  }\n\n  if (!basic) {\n    properties.node = node\n  }\n\n  // Ensure no React warnings are emitted for void elements w/ children.\n  return children.length > 0\n    ? React.createElement(component, properties, children)\n    : React.createElement(component, properties)\n}\n\n/**\n * @param {Element|Root} node\n * @returns {Element?}\n */\nfunction getInputElement(node) {\n  let index = -1\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n\n    if (child.type === 'element' && child.tagName === 'input') {\n      return child\n    }\n  }\n\n  return null\n}\n\n/**\n * @param {Element|Root} parent\n * @param {Element} [node]\n * @returns {number}\n */\nfunction getElementsBeforeCount(parent, node) {\n  let index = -1\n  let count = 0\n\n  while (++index < parent.children.length) {\n    if (parent.children[index] === node) break\n    if (parent.children[index].type === 'element') count++\n  }\n\n  return count\n}\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string} prop\n * @param {unknown} value\n * @param {Context} ctx\n */\nfunction addProperty(props, prop, value, ctx) {\n  const info = find(ctx.schema, prop)\n  let result = value\n\n  // Ignore nullish and `NaN` values.\n  // eslint-disable-next-line no-self-compare\n  if (result === null || result === undefined || result !== result) {\n    return\n  }\n\n  // Accept `array`.\n  // Most props are space-separated.\n  if (Array.isArray(result)) {\n    result = info.commaSeparated ? commas(result) : spaces(result)\n  }\n\n  if (info.property === 'style' && typeof result === 'string') {\n    result = parseStyle(result)\n  }\n\n  if (info.space && info.property) {\n    props[\n      own.call(hastToReact, info.property)\n        ? hastToReact[info.property]\n        : info.property\n    ] = result\n  } else if (info.attribute) {\n    props[info.attribute] = result\n  }\n}\n\n/**\n * @param {string} value\n * @returns {Record<string, string>}\n */\nfunction parseStyle(value) {\n  /** @type {Record<string, string>} */\n  const result = {}\n\n  try {\n    style(value, iterator)\n  } catch {\n    // Silent.\n  }\n\n  return result\n\n  /**\n   * @param {string} name\n   * @param {string} v\n   */\n  function iterator(name, v) {\n    const k = name.slice(0, 4) === '-ms-' ? `ms-${name.slice(4)}` : name\n    result[k.replace(/-([a-z])/g, styleReplacer)] = v\n  }\n}\n\n/**\n * @param {unknown} _\n * @param {string} $1\n */\nfunction styleReplacer(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos\n * @returns {string}\n */\nfunction flattenPosition(pos) {\n  return [\n    pos.start.line,\n    ':',\n    pos.start.column,\n    '-',\n    pos.end.line,\n    ':',\n    pos.end.column\n  ]\n    .map(String)\n    .join('')\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('react').ReactElement<{}>} ReactElement\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('hast').Root} Root\n * @typedef {import('./rehype-filter.js').Options} FilterOptions\n * @typedef {import('./ast-to-react.js').Options} TransformOptions\n *\n * @typedef CoreOptions\n * @property {string} children\n *\n * @typedef PluginOptions\n * @property {PluggableList} [remarkPlugins=[]]\n * @property {PluggableList} [rehypePlugins=[]]\n * @property {import('remark-rehype').Options | undefined} [remarkRehypeOptions={}]\n *\n * @typedef LayoutOptions\n * @property {string} [className]\n *\n * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions\n *\n * @typedef Deprecation\n * @property {string} id\n * @property {string} [to]\n */\n\nimport React from 'react'\nimport {VFile} from 'vfile'\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport PropTypes from 'prop-types'\nimport {html} from 'property-information'\nimport rehypeFilter from './rehype-filter.js'\nimport {childrenToReact} from './ast-to-react.js'\n\nconst own = {}.hasOwnProperty\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {Record<string, Deprecation>} */\nconst deprecated = {\n  plugins: {to: 'remarkPlugins', id: 'change-plugins-to-remarkplugins'},\n  renderers: {to: 'components', id: 'change-renderers-to-components'},\n  astPlugins: {id: 'remove-buggy-html-in-markdown-parser'},\n  allowDangerousHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  escapeHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  source: {to: 'children', id: 'change-source-to-children'},\n  allowNode: {\n    to: 'allowElement',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  allowedTypes: {\n    to: 'allowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  disallowedTypes: {\n    to: 'disallowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  includeNodeIndex: {\n    to: 'includeElementIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  }\n}\n\n/**\n * React component to render markdown.\n *\n * @param {ReactMarkdownOptions} options\n * @returns {ReactElement}\n */\nexport function ReactMarkdown(options) {\n  for (const key in deprecated) {\n    if (own.call(deprecated, key) && own.call(options, key)) {\n      const deprecation = deprecated[key]\n      console.warn(\n        `[react-markdown] Warning: please ${\n          deprecation.to ? `use \\`${deprecation.to}\\` instead of` : 'remove'\n        } \\`${key}\\` (see <${changelog}#${deprecation.id}> for more info)`\n      )\n      delete deprecated[key]\n    }\n  }\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(options.remarkPlugins || [])\n    .use(remarkRehype, {\n      ...options.remarkRehypeOptions,\n      allowDangerousHtml: true\n    })\n    .use(options.rehypePlugins || [])\n    .use(rehypeFilter, options)\n\n  const file = new VFile()\n\n  if (typeof options.children === 'string') {\n    file.value = options.children\n  } else if (options.children !== undefined && options.children !== null) {\n    console.warn(\n      `[react-markdown] Warning: please pass a string as \\`children\\` (not: \\`${options.children}\\`)`\n    )\n  }\n\n  const hastNode = processor.runSync(processor.parse(file), file)\n\n  if (hastNode.type !== 'root') {\n    throw new TypeError('Expected a `root` node')\n  }\n\n  /** @type {ReactElement} */\n  let result = React.createElement(\n    React.Fragment,\n    {},\n    childrenToReact({options, schema: html, listDepth: 0}, hastNode)\n  )\n\n  if (options.className) {\n    result = React.createElement('div', {className: options.className}, result)\n  }\n\n  return result\n}\n\nReactMarkdown.propTypes = {\n  // Core options:\n  children: PropTypes.string,\n  // Layout options:\n  className: PropTypes.string,\n  // Filter options:\n  allowElement: PropTypes.func,\n  allowedElements: PropTypes.arrayOf(PropTypes.string),\n  disallowedElements: PropTypes.arrayOf(PropTypes.string),\n  unwrapDisallowed: PropTypes.bool,\n  // Plugin options:\n  remarkPlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  rehypePlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  // Transform options:\n  sourcePos: PropTypes.bool,\n  rawSourcePos: PropTypes.bool,\n  skipHtml: PropTypes.bool,\n  includeElementIndex: PropTypes.bool,\n  transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  transformImageUri: PropTypes.func,\n  components: PropTypes.object\n}\n"],"names":["Layout","_layout__WEBPACK_IMPORTED_MODULE_0__","ZP","Header","h4","Footer","$_","Content","VY","Sider","_Sider__WEBPACK_IMPORTED_MODULE_1__","Z","__webpack_exports__","__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","_util_type__WEBPACK_IMPORTED_MODULE_3__","b","defaultIndicator","Spin","props","prefixCls","spinPrefixCls","_props$spinning","spinning","customSpinning","delay","className","_props$size","size","tip","wrapperClassName","style","children","restProps","_React$useState","react__WEBPACK_IMPORTED_MODULE_2__","useState","isNaN","Number","_React$useState2","_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__","setSpinning","useEffect","updateSpinning","lodash_debounce__WEBPACK_IMPORTED_MODULE_1___default","_a","cancel","createElement","_config_provider__WEBPACK_IMPORTED_MODULE_9__","C","_ref","indicator","dotClassName","_classNames","direction","spinClassName","classnames__WEBPACK_IMPORTED_MODULE_0___default","_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__","concat","divProps","rc_util_es_omit__WEBPACK_IMPORTED_MODULE_7__","spinElement","_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_8__","_util_reactNode__WEBPACK_IMPORTED_MODULE_4__","l$","Tm","containerClassName","key","SpinFC","customizePrefixCls","getPrefixCls","_React$useContext","useContext","E_","spinClassProps","setDefaultIndicator","roundingMap","ceil","Math","round","floor","trunc","value","getRoundingMethod","method","differenceInMilliseconds","dateLeft","dateRight","_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__","arguments","_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__","getTime","differenceInSeconds","options","diff","_differenceInMilliseconds_index_js__WEBPACK_IMPORTED_MODULE_1__","_lib_roundingMethods_index_js__WEBPACK_IMPORTED_MODULE_2__","u","roundingMethod","hasOwn","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","isPlainObject","obj","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","name","enumerable","configurable","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","trim","str","replace","lineno","column","updatePosition","lines","match","lastIndexOf","position","start","line","node","Position","end","source","content","errorsList","error","msg","err","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","FORWARD_SLASH","charAt","ASTERISK","EMPTY_STRING","type","declarations","decl","decls","declaration","prop","val","ret","property","isBuffer","Symbol","root","__webpack_require__","getRawTag","objectToString","symToStringTag","toStringTag","undefined","trimmedEndIndex","reTrimStart","string","freeGlobal","g","objectProto","nativeObjectToString","isOwn","tag","unmasked","result","freeSelf","self","Function","reWhitespace","index","test","isObject","now","toNumber","nativeMax","max","nativeMin","min","func","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","time","args","thisArg","apply","shouldInvoke","timeSinceLastCall","timeSinceLastInvoke","timerExpired","timeWaiting","trailingEdge","setTimeout","debounced","isInvoking","clearTimeout","flush","baseGetTag","isObjectLike","Date","baseTrim","isSymbol","NAN","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","other","valueOf","isBinary","ReactPropTypesSecret","emptyFunction","emptyFunctionWithReset","resetWarningCache","shim","propName","componentName","location","propFullName","secret","getShim","isRequired","ReactPropTypes","array","bigint","bool","number","object","symbol","any","arrayOf","element","elementType","instanceOf","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes","for","d","f","h","k","l","n","q","v","a","r","$$typeof","ContextConsumer","ContextProvider","Element","ForwardRef","Fragment","Lazy","Memo","Portal","Profiler","StrictMode","Suspense","SuspenseList","isAsyncMode","isConcurrentMode","isContextConsumer","isContextProvider","isElement","isForwardRef","isFragment","isLazy","isMemo","isPortal","isProfiler","isStrictMode","isSuspense","isSuspenseList","isValidElementType","getModuleId","typeOf","parse","StyleToObject","iterator","output","hasIterator","len","stringifyPosition","point","VFileMessage","Error","place","origin","parts","message","stack","fatal","ruleId","file","actual","expected","url","note","path","basename","ext","seenNonSlash","assertPath","charCodeAt","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","code","join","segments","joined","normalize","absolute","normalizeString","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","sep","JSON","stringify","proc","cwd","isUrl","fileURLOrPath","href","order","VFile","is_buffer","data","messages","history","stored","map","includes","urlToPath","URL","protocol","getPathFromURLPosix","hostname","pathname","third","decodeURIComponent","assertNonEmpty","lib_assertPath","assertPart","stem","encoding","info","fail","part","bail","getPrototypeOf","unified","base","frozen","transformers","trough","fns","pipeline","run","values","middlewareIndex","callback","pop","next","fn","wrap","middleware","called","parameters","fnExpectsCallback","done","Promise","then","use","middelware","attachers","namespace","freezeIndex","processor","assertUnfrozen","Parser","Compiler","freeze","attacher","transformer","POSITIVE_INFINITY","settings","addPlugin","addList","addPreset","assign","plugins","thing","add","plugin","entry","doc","vfile","assertParser","newable","String","assertCompiler","assertNode","compile","executor","resolve","reject","tree","runSync","complete","assertDone","process","processSync","destination","own","keys","asyncName","looksLikeAVFile","one","includeImageAlt","alt","mdast_util_to_string_all","splice","list","remove","items","chunkStart","from","unshift","micromark_util_combine_extensions_hasOwnProperty","asciiAlpha","regexCheck","asciiDigit","asciiHexDigit","asciiAlphanumeric","asciiPunctuation","asciiAtext","asciiControl","markdownLineEndingOrSpace","markdownLineEnding","markdownSpace","unicodeWhitespace","unicodePunctuation","regex","fromCharCode","factorySpace","effects","ok","limit","enter","prefix","consume","exit","tokenize","previous","contentStart","attempt","parser","constructs","contentInitial","lineStart","token","contentType","document_document","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","events","indexBeforeFlow","documentContinued","currentConstruct","concrete","flowStart","interrupt","Boolean","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","exitContainers","lazy","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","nok","document","disable","null","blankLine","partial","subtokenize","event","lineIndex","otherIndex","otherEvent","subevents","more","jumps","_isInFirstContentOfListItem","subcontent","eventIndex","context","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","_container","content_content","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","initializeFactory","text_text","field","text","notText","atBreak","resolveAllLineSuffixes","extraResolver","tabs","chunks","bufferIndex","chunk","_index","_bufferIndex","thematicBreak","sequence","initialSize","kind","marker","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","state","open","after","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","destinationEnclosedBefore","destinationRaw","destinationEnclosed","destinationEnclosedEscape","destinationRawEscape","factoryLabel","markerType","label","labelEscape","factoryTitle","atFirstTitleBreak","atTitleBreak","title","titleEscape","factoryWhitespace","normalizeIdentifier","toLowerCase","toUpperCase","titleConstruct","before","codeIndented","afterStartPrefix","afterPrefix","indentedContent","setextUnderline","paragraph","closingSequence","closingSequenceEnd","resolveTo","definition","heading","htmlBlockNames","htmlRawNames","nextBlankConstruct","codeFenced","closingFenceConstruct","sizeOpen","nonLazyLine","initialPrefix","sequenceOpen","infoOpen","openAfter","infoAfter","meta","index_dom_element","decodeNamedCharacterReference","characterReference","innerHTML","char","textContent","numeric","characterEscape","lineEnding","labelEnd","labelStart","defined","_balanced","_inactive","balanced","afterLabelEnd","resourceConstruct","fullReferenceConstruct","collapsedReferenceConstruct","close","media","group","insideSpan","destinationAfter","between","afterLabel","labelStartImage","classifyCharacter","attention","attentionMarkers","_open","_close","openingSequence","nextEvents","movePoint","labelStartLink","constructs_document","identifier","labelAfter","constructs_flow","fenceOpenInside","headingBreak","startTag","buffer","declarationStart","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","basicSelfClosing","completeAttributeNameBefore","completeClosingTagAfter","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCharacterDataInside","continuationAtLineEnding","htmlContinueStart","htmlLineEnd","continuationRawEndTag","constructs_string","constructs_text","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","returnState","declarationOpen","instruction","tagOpen","commentOpen","cdataOpen","commentStart","commentStartDash","commentClose","atLineEnding","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","gap","tailExitIndex","headEnterIndex","search","decodeNumericCharacterReference","characterEscapeOrReference","decode","$0","$1","$2","head","hex","lib_own","fromMarkdown","atCarriageReturn","compiler","config","configure","combined","extensions","extension","maybe","left","right","transforms","canContainEols","autolink","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeText","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreakEscape","hardBreak","hardBreakTrailing","htmlFlow","html","htmlFlowData","htmlText","htmlTextData","image","listItem","spread","_spread","checked","listItemValue","ancestor","listOrdered","listUnordered","reference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","depth","onexitdata","characterEscapeValue","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","resume","codeFencedFence","lang","onexithardbreak","referenceType","getData","fragment","labelText","resource","setextHeadingLineSequence","setextHeadingText","mdastExtensions","tokenStack","listStack","setData","prepareList","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","handler","defaultOnError","create","and","errorHandler","parent","onExitError","mdast_util_to_string_toString","ordered","postprocess","combineExtensions","all","syntaxExtension","hook","existing","constructs_namespaceObject","createTokenizer","initialize","columnStart","resolveAllConstructs","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","serializeChunks","atTab","main","chunkIndex","sliceChunks","view","startIndex","startBufferIndex","endIndex","endBufferIndex","_","restore","onreturn","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","handleConstruct","store","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","preprocess","endPosition","lastIndex","remark_parse","convert","castFactory","anyFactory","tests","checks","visitParents","visitor","reverse","is","step","factory","parents","visit","subresult","grandparents","pointStart","lib_point","pointEnd","mdast_util_definitions_own","clean","traverse_own","unknown","augment","traverse_all","traverse_one","handlers","passThrough","returnNode","unknownHandler","nodes","normalizeUri","skip","encodeURIComponent","wrap_wrap","loose","footnoteReference","counter","id","safeId","footnoteOrder","footnoteCounts","reuseCounter","clobberPrefix","dataFootnoteRef","ariaDescribedBy","revert","subtype","suffix","contents","listItemLoose","trimLine","codePointAt","blockquote","break","delete","footnote","footnoteById","no","dangerous","imageReference","inlineCode","linkReference","listLoose","wrapped","disabled","child","properties","table","rows","align","row","out","cellIndex","cell","trimLines","last","toml","ignore","yaml","footnoteDefinition","mdast_util_to_hast_lib_own","toHast","allowDangerousHtml","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","footnoteBackLabel","definitions","cache","hName","hProperties","hChildren","ctx","foot","footer","listItems","referenceIndex","backReferences","backReference","dataFootnoteBackref","ariaLabel","tailTail","dataFootnotes","lib","Schema","normal","space","merge","normalize_normalize","Info","attribute","boolean","booleanish","overloadedBoolean","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","powers","types_boolean","increment","types_namespaceObject","DefinedInfo","mask","create_own","transform","attributes","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","html_html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","capture","charSet","cite","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","dateTime","decoding","default","defer","dir","dirName","download","draggable","encType","enterKeyHint","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inputMode","integrity","isMap","itemId","itemProp","itemRef","itemScope","itemType","language","loading","loop","low","manifest","maxLength","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","optimum","pattern","ping","placeholder","playsInline","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rowSpan","sandbox","scope","scoped","seamless","selected","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","tabIndex","translate","typeMustMatch","useMap","width","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","charOff","classId","clear","codeBase","codeType","color","compact","declare","face","frame","frameBorder","hSpace","leftMargin","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","opacity","operator","orient","orientation","overflow","overlay","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","property_information_html","property_information_svg","lib_convert","lib_ok","lib_castFactory","lib_anyFactory","unist_util_visit_parents_visitParents","unist_util_visit_visit","rehypeFilter","allowedElements","disallowedElements","allowElement","parent_","unwrapDisallowed","valid","dash","cap","kebab","camelcase","hastToReact","protocols","uriTransformer","uri","first","colon","ast_to_react_own","tableElements","Set","getElementsBeforeCount","count","styleReplacer","react_markdown_own","deprecated","renderers","astPlugins","escapeHtml","allowNode","allowedTypes","disallowedTypes","includeNodeIndex","ReactMarkdown","deprecation","console","warn","remarkPlugins","remarkRehypeOptions","rehypePlugins","hastNode","react","childrenToReact","childIndex","toReact","transformLinkUri","parentSchema","schema","addProperty","find","Type","rest","dashes","comma_separated_tokens_stringify","input","padRight","padLeft","parseStyle","node_modules_style_to_object","listDepth","component","components","basic","react_is","linkTarget","inline","level","transformImageUri","getInputElement","textAlign","isHeader","sourcePos","rawSourcePos","sourcePosition","includeElementIndex","siblingCount","has","whitespace","skipHtml","propTypes","prop_types"],"sourceRoot":""}