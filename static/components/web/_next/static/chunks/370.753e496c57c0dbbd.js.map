{"version":3,"file":"static/chunks/370.753e496c57c0dbbd.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/sparql.js","webpack://_N_E/<anon>"],"sourcesContent":["var curPunc;\n\nfunction wordRegexp(words) {\n  return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n}\nvar ops = wordRegexp([\"str\", \"lang\", \"langmatches\", \"datatype\", \"bound\", \"sameterm\", \"isiri\", \"isuri\",\n                      \"iri\", \"uri\", \"bnode\", \"count\", \"sum\", \"min\", \"max\", \"avg\", \"sample\",\n                      \"group_concat\", \"rand\", \"abs\", \"ceil\", \"floor\", \"round\", \"concat\", \"substr\", \"strlen\",\n                      \"replace\", \"ucase\", \"lcase\", \"encode_for_uri\", \"contains\", \"strstarts\", \"strends\",\n                      \"strbefore\", \"strafter\", \"year\", \"month\", \"day\", \"hours\", \"minutes\", \"seconds\",\n                      \"timezone\", \"tz\", \"now\", \"uuid\", \"struuid\", \"md5\", \"sha1\", \"sha256\", \"sha384\",\n                      \"sha512\", \"coalesce\", \"if\", \"strlang\", \"strdt\", \"isnumeric\", \"regex\", \"exists\",\n                      \"isblank\", \"isliteral\", \"a\", \"bind\"]);\nvar keywords = wordRegexp([\"base\", \"prefix\", \"select\", \"distinct\", \"reduced\", \"construct\", \"describe\",\n                           \"ask\", \"from\", \"named\", \"where\", \"order\", \"limit\", \"offset\", \"filter\", \"optional\",\n                           \"graph\", \"by\", \"asc\", \"desc\", \"as\", \"having\", \"undef\", \"values\", \"group\",\n                           \"minus\", \"in\", \"not\", \"service\", \"silent\", \"using\", \"insert\", \"delete\", \"union\",\n                           \"true\", \"false\", \"with\",\n                           \"data\", \"copy\", \"to\", \"move\", \"add\", \"create\", \"drop\", \"clear\", \"load\", \"into\"]);\nvar operatorChars = /[*+\\-<>=&|\\^\\/!\\?]/;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  curPunc = null;\n  if (ch == \"$\" || ch == \"?\") {\n    if(ch == \"?\" && stream.match(/\\s/, false)){\n      return \"operator\";\n    }\n    stream.match(/^[A-Za-z0-9_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][A-Za-z0-9_\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]*/);\n    return \"variableName.local\";\n  }\n  else if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n    stream.match(/^[^\\s\\u00a0>]*>?/);\n    return \"atom\";\n  }\n  else if (ch == \"\\\"\" || ch == \"'\") {\n    state.tokenize = tokenLiteral(ch);\n    return state.tokenize(stream, state);\n  }\n  else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n    curPunc = ch;\n    return \"bracket\";\n  }\n  else if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  else if (operatorChars.test(ch)) {\n    return \"operator\";\n  }\n  else if (ch == \":\") {\n    eatPnLocal(stream);\n    return \"atom\";\n  }\n  else if (ch == \"@\") {\n    stream.eatWhile(/[a-z\\d\\-]/i);\n    return \"meta\";\n  }\n  else {\n    stream.eatWhile(/[_\\w\\d]/);\n    if (stream.eat(\":\")) {\n      eatPnLocal(stream);\n      return \"atom\";\n    }\n    var word = stream.current();\n    if (ops.test(word))\n      return \"builtin\";\n    else if (keywords.test(word))\n      return \"keyword\";\n    else\n      return \"variable\";\n  }\n}\n\nfunction eatPnLocal(stream) {\n  stream.match(/(\\.(?=[\\w_\\-\\\\%])|[:\\w_-]|\\\\[-\\\\_~.!$&'()*+,;=/?#@%]|%[a-f\\d][a-f\\d])+/i);\n}\n\nfunction tokenLiteral(quote) {\n  return function(stream, state) {\n    var escaped = false, ch;\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && !escaped) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && ch == \"\\\\\";\n    }\n    return \"string\";\n  };\n}\n\nfunction pushContext(state, type, col) {\n  state.context = {prev: state.context, indent: state.indent, col: col, type: type};\n}\nfunction popContext(state) {\n  state.indent = state.context.indent;\n  state.context = state.context.prev;\n}\n\nexport const sparql = {\n  name: \"sparql\",\n\n  startState: function() {\n    return {tokenize: tokenBase,\n            context: null,\n            indent: 0,\n            col: 0};\n  },\n\n  token: function(stream, state) {\n    if (stream.sol()) {\n      if (state.context && state.context.align == null) state.context.align = false;\n      state.indent = stream.indentation();\n    }\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n\n    if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n      state.context.align = true;\n    }\n\n    if (curPunc == \"(\") pushContext(state, \")\", stream.column());\n    else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());\n    else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());\n    else if (/[\\]\\}\\)]/.test(curPunc)) {\n      while (state.context && state.context.type == \"pattern\") popContext(state);\n      if (state.context && curPunc == state.context.type) {\n        popContext(state);\n        if (curPunc == \"}\" && state.context && state.context.type == \"pattern\")\n          popContext(state);\n      }\n    }\n    else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);\n    else if (/atom|string|variable/.test(style) && state.context) {\n      if (/[\\}\\]]/.test(state.context.type))\n        pushContext(state, \"pattern\", stream.column());\n      else if (state.context.type == \"pattern\" && !state.context.align) {\n        state.context.align = true;\n        state.context.col = stream.column();\n      }\n    }\n\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    var firstChar = textAfter && textAfter.charAt(0);\n    var context = state.context;\n    if (/[\\]\\}]/.test(firstChar))\n      while (context && context.type == \"pattern\") context = context.prev;\n\n    var closing = context && firstChar == context.type;\n    if (!context)\n      return 0;\n    else if (context.type == \"pattern\")\n      return context.col;\n    else if (context.align)\n      return context.col + (closing ? 0 : 1);\n    else\n      return context.indent + (closing ? 0 : cx.unit);\n  },\n\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n};\n\n"],"names":["wordRegexp","words","join","curPunc","ops","keywords","operatorChars","tokenBase","stream","state","ch","next","match","tokenize","escaped","test","skipToEnd","eatPnLocal","eatWhile","eat","word","current","pushContext","type","col","context","prev","indent","popContext","sparql","name","startState","token","sol","align","indentation","eatSpace","style","column","textAfter","cx","firstChar","charAt","closing","unit","languageData","commentTokens","line"],"sourceRoot":""}