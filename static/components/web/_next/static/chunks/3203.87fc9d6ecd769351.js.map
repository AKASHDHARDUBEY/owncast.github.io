{"version":3,"file":"static/chunks/3203.87fc9d6ecd769351.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/asn1.js","webpack://_N_E/<anon>"],"sourcesContent":["function words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\n\nconst defaults = {\n  keywords: words(\"DEFINITIONS OBJECTS IF DERIVED INFORMATION ACTION\" +\n                  \" REPLY ANY NAMED CHARACTERIZED BEHAVIOUR REGISTERED\" +\n                  \" WITH AS IDENTIFIED CONSTRAINED BY PRESENT BEGIN\" +\n                  \" IMPORTS FROM UNITS SYNTAX MIN-ACCESS MAX-ACCESS\" +\n                  \" MINACCESS MAXACCESS REVISION STATUS DESCRIPTION\" +\n                  \" SEQUENCE SET COMPONENTS OF CHOICE DistinguishedName\" +\n                  \" ENUMERATED SIZE MODULE END INDEX AUGMENTS EXTENSIBILITY\" +\n                  \" IMPLIED EXPORTS\"),\n  cmipVerbs: words(\"ACTIONS ADD GET NOTIFICATIONS REPLACE REMOVE\"),\n  compareTypes: words(\"OPTIONAL DEFAULT MANAGED MODULE-TYPE MODULE_IDENTITY\" +\n                      \" MODULE-COMPLIANCE OBJECT-TYPE OBJECT-IDENTITY\" +\n                      \" OBJECT-COMPLIANCE MODE CONFIRMED CONDITIONAL\" +\n                      \" SUBORDINATE SUPERIOR CLASS TRUE FALSE NULL\" +\n                      \" TEXTUAL-CONVENTION\"),\n  status: words(\"current deprecated mandatory obsolete\"),\n  tags: words(\"APPLICATION AUTOMATIC EXPLICIT IMPLICIT PRIVATE TAGS\" +\n              \" UNIVERSAL\"),\n  storage: words(\"BOOLEAN INTEGER OBJECT IDENTIFIER BIT OCTET STRING\" +\n                 \" UTCTime InterfaceIndex IANAifType CMIP-Attribute\" +\n                 \" REAL PACKAGE PACKAGES IpAddress PhysAddress\" +\n                 \" NetworkAddress BITS BMPString TimeStamp TimeTicks\" +\n                 \" TruthValue RowStatus DisplayString GeneralString\" +\n                 \" GraphicString IA5String NumericString\" +\n                 \" PrintableString SnmpAdminString TeletexString\" +\n                 \" UTF8String VideotexString VisibleString StringStore\" +\n                 \" ISO646String T61String UniversalString Unsigned32\" +\n                 \" Integer32 Gauge Gauge32 Counter Counter32 Counter64\"),\n  modifier: words(\"ATTRIBUTE ATTRIBUTES MANDATORY-GROUP MANDATORY-GROUPS\" +\n                  \" GROUP GROUPS ELEMENTS EQUALITY ORDERING SUBSTRINGS\" +\n                  \" DEFINED\"),\n  accessTypes: words(\"not-accessible accessible-for-notify read-only\" +\n                     \" read-create read-write\"),\n  multiLineStrings: true\n}\n\nexport function asn1(parserConfig) {\n  var keywords = parserConfig.keywords || defaults.keywords,\n      cmipVerbs = parserConfig.cmipVerbs || defaults.cmipVerbs,\n      compareTypes = parserConfig.compareTypes || defaults.compareTypes,\n      status = parserConfig.status || defaults.status,\n      tags = parserConfig.tags || defaults.tags,\n      storage = parserConfig.storage || defaults.storage,\n      modifier = parserConfig.modifier || defaults.modifier,\n      accessTypes = parserConfig.accessTypes|| defaults.accessTypes,\n      multiLineStrings = parserConfig.multiLineStrings || defaults.multiLineStrings,\n      indentStatements = parserConfig.indentStatements !== false;\n  var isOperatorChar = /[\\|\\^]/;\n  var curPunc;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (/[\\[\\]\\(\\){}:=,;]/.test(ch)) {\n      curPunc = ch;\n      return \"punctuation\";\n    }\n    if (ch == \"-\"){\n      if (stream.eat(\"-\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      return \"number\";\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n\n    stream.eatWhile(/[\\w\\-]/);\n    var cur = stream.current();\n    if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n    if (cmipVerbs.propertyIsEnumerable(cur)) return \"variableName\";\n    if (compareTypes.propertyIsEnumerable(cur)) return \"atom\";\n    if (status.propertyIsEnumerable(cur)) return \"comment\";\n    if (tags.propertyIsEnumerable(cur)) return \"typeName\";\n    if (storage.propertyIsEnumerable(cur)) return \"modifier\";\n    if (modifier.propertyIsEnumerable(cur)) return \"modifier\";\n    if (accessTypes.propertyIsEnumerable(cur)) return \"modifier\";\n\n    return \"variableName\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped){\n          var afterNext = stream.peek();\n          //look if the character if the quote is like the B in '10100010'B\n          if (afterNext){\n            afterNext = afterNext.toLowerCase();\n            if(afterNext == \"b\" || afterNext == \"h\" || afterNext == \"o\")\n              stream.next();\n          }\n          end = true; break;\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = null;\n      return \"string\";\n    };\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n  function pushContext(state, col, type) {\n    var indent = state.indented;\n    if (state.context && state.context.type == \"statement\")\n      indent = state.context.indented;\n    return state.context = new Context(indent, col, type, null, state.context);\n  }\n  function popContext(state) {\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\")\n      state.indented = state.context.indented;\n    return state.context = state.context.prev;\n  }\n\n  //Interface\n  return {\n    name: \"asn1\",\n    startState: function() {\n      return {\n        tokenize: null,\n        context: new Context(-2, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true\n      };\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n      }\n      if (stream.eatSpace()) return null;\n      curPunc = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\")\n          && ctx.type == \"statement\"){\n        popContext(state);\n      }\n      else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n      else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n      else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n      else if (curPunc == \"}\") {\n        while (ctx.type == \"statement\") ctx = popContext(state);\n        if (ctx.type == \"}\") ctx = popContext(state);\n        while (ctx.type == \"statement\") ctx = popContext(state);\n      }\n      else if (curPunc == ctx.type) popContext(state);\n      else if (indentStatements && (((ctx.type == \"}\" || ctx.type == \"top\")\n                                     && curPunc != ';') || (ctx.type == \"statement\"\n                                                            && curPunc == \"newstatement\")))\n        pushContext(state, stream.column(), \"statement\");\n\n      state.startOfLine = false;\n      return style;\n    },\n\n    languageData: {\n      indentOnInput: /^\\s*[{}]$/,\n      commentTokens: {line: \"--\"}\n    }\n  };\n};\n"],"names":["words","str","obj","split","i","length","defaults","keywords","cmipVerbs","compareTypes","status","tags","storage","modifier","accessTypes","multiLineStrings","asn1","parserConfig","curPunc","indentStatements","isOperatorChar","tokenBase","stream","state","ch","next","tokenize","escaped","end","afterNext","peek","toLowerCase","test","eat","skipToEnd","eatWhile","cur","current","propertyIsEnumerable","Context","indented","column","type","align","prev","pushContext","col","indent","context","popContext","t","name","startState","startOfLine","token","ctx","sol","indentation","eatSpace","style","languageData","indentOnInput","commentTokens","line"],"sourceRoot":""}