{"version":3,"file":"static/chunks/5753.aca4da9a0eb67cad.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/xquery.js","webpack://_N_E/<anon>"],"sourcesContent":["// The keywords object is set to the result of this self executing\n// function. Each keyword is a property of the keywords object whose\n// value is {type: atype, style: astyle}\nvar keywords = function(){\n  // convenience functions used to build keywords object\n  function kw(type) {return {type: type, style: \"keyword\"};}\n  var operator = kw(\"operator\")\n  , atom = {type: \"atom\", style: \"atom\"}\n  , punctuation = {type: \"punctuation\", style: null}\n  , qualifier = {type: \"axis_specifier\", style: \"qualifier\"};\n\n  // kwObj is what is return from this function at the end\n  var kwObj = {\n    ',': punctuation\n  };\n\n  // a list of 'basic' keywords. For each add a property to kwObj with the value of\n  // {type: basic[i], style: \"keyword\"} e.g. 'after' --> {type: \"after\", style: \"keyword\"}\n  var basic = ['after', 'all', 'allowing', 'ancestor', 'ancestor-or-self', 'any', 'array', 'as',\n               'ascending', 'at', 'attribute', 'base-uri', 'before', 'boundary-space', 'by', 'case', 'cast',\n               'castable', 'catch', 'child', 'collation', 'comment', 'construction', 'contains', 'content',\n               'context', 'copy', 'copy-namespaces', 'count', 'decimal-format', 'declare', 'default', 'delete',\n               'descendant', 'descendant-or-self', 'descending', 'diacritics', 'different', 'distance',\n               'document', 'document-node', 'element', 'else', 'empty', 'empty-sequence', 'encoding', 'end',\n               'entire', 'every', 'exactly', 'except', 'external', 'first', 'following', 'following-sibling',\n               'for', 'from', 'ftand', 'ftnot', 'ft-option', 'ftor', 'function', 'fuzzy', 'greatest', 'group',\n               'if', 'import', 'in', 'inherit', 'insensitive', 'insert', 'instance', 'intersect', 'into',\n               'invoke', 'is', 'item', 'language', 'last', 'lax', 'least', 'let', 'levels', 'lowercase', 'map',\n               'modify', 'module', 'most', 'namespace', 'next', 'no', 'node', 'nodes', 'no-inherit',\n               'no-preserve', 'not', 'occurs', 'of', 'only', 'option', 'order', 'ordered', 'ordering',\n               'paragraph', 'paragraphs', 'parent', 'phrase', 'preceding', 'preceding-sibling', 'preserve',\n               'previous', 'processing-instruction', 'relationship', 'rename', 'replace', 'return',\n               'revalidation', 'same', 'satisfies', 'schema', 'schema-attribute', 'schema-element', 'score',\n               'self', 'sensitive', 'sentence', 'sentences', 'sequence', 'skip', 'sliding', 'some', 'stable',\n               'start', 'stemming', 'stop', 'strict', 'strip', 'switch', 'text', 'then', 'thesaurus', 'times',\n               'to', 'transform', 'treat', 'try', 'tumbling', 'type', 'typeswitch', 'union', 'unordered',\n               'update', 'updating', 'uppercase', 'using', 'validate', 'value', 'variable', 'version',\n               'weight', 'when', 'where', 'wildcards', 'window', 'with', 'without', 'word', 'words', 'xquery'];\n  for(var i=0, l=basic.length; i < l; i++) { kwObj[basic[i]] = kw(basic[i]);};\n\n  // a list of types. For each add a property to kwObj with the value of\n  // {type: \"atom\", style: \"atom\"}\n  var types = ['xs:anyAtomicType', 'xs:anySimpleType', 'xs:anyType', 'xs:anyURI',\n               'xs:base64Binary', 'xs:boolean', 'xs:byte', 'xs:date', 'xs:dateTime', 'xs:dateTimeStamp',\n               'xs:dayTimeDuration', 'xs:decimal', 'xs:double', 'xs:duration', 'xs:ENTITIES', 'xs:ENTITY',\n               'xs:float', 'xs:gDay', 'xs:gMonth', 'xs:gMonthDay', 'xs:gYear', 'xs:gYearMonth', 'xs:hexBinary',\n               'xs:ID', 'xs:IDREF', 'xs:IDREFS', 'xs:int', 'xs:integer', 'xs:item', 'xs:java', 'xs:language',\n               'xs:long', 'xs:Name', 'xs:NCName', 'xs:negativeInteger', 'xs:NMTOKEN', 'xs:NMTOKENS',\n               'xs:nonNegativeInteger', 'xs:nonPositiveInteger', 'xs:normalizedString', 'xs:NOTATION',\n               'xs:numeric', 'xs:positiveInteger', 'xs:precisionDecimal', 'xs:QName', 'xs:short', 'xs:string',\n               'xs:time', 'xs:token', 'xs:unsignedByte', 'xs:unsignedInt', 'xs:unsignedLong',\n               'xs:unsignedShort', 'xs:untyped', 'xs:untypedAtomic', 'xs:yearMonthDuration'];\n  for(var i=0, l=types.length; i < l; i++) { kwObj[types[i]] = atom;};\n\n  // each operator will add a property to kwObj with value of {type: \"operator\", style: \"keyword\"}\n  var operators = ['eq', 'ne', 'lt', 'le', 'gt', 'ge', ':=', '=', '>', '>=', '<', '<=', '.', '|', '?', 'and', 'or', 'div', 'idiv', 'mod', '*', '/', '+', '-'];\n  for(var i=0, l=operators.length; i < l; i++) { kwObj[operators[i]] = operator;};\n\n  // each axis_specifiers will add a property to kwObj with value of {type: \"axis_specifier\", style: \"qualifier\"}\n  var axis_specifiers = [\"self::\", \"attribute::\", \"child::\", \"descendant::\", \"descendant-or-self::\", \"parent::\",\n                         \"ancestor::\", \"ancestor-or-self::\", \"following::\", \"preceding::\", \"following-sibling::\", \"preceding-sibling::\"];\n  for(var i=0, l=axis_specifiers.length; i < l; i++) { kwObj[axis_specifiers[i]] = qualifier; };\n\n  return kwObj;\n}();\n\nfunction chain(stream, state, f) {\n  state.tokenize = f;\n  return f(stream, state);\n}\n\n// the primary mode tokenizer\nfunction tokenBase(stream, state) {\n  var ch = stream.next(),\n      mightBeFunction = false,\n      isEQName = isEQNameAhead(stream);\n\n  // an XML tag (if not in some sub, chained tokenizer)\n  if (ch == \"<\") {\n    if(stream.match(\"!--\", true))\n      return chain(stream, state, tokenXMLComment);\n\n    if(stream.match(\"![CDATA\", false)) {\n      state.tokenize = tokenCDATA;\n      return \"tag\";\n    }\n\n    if(stream.match(\"?\", false)) {\n      return chain(stream, state, tokenPreProcessing);\n    }\n\n    var isclose = stream.eat(\"/\");\n    stream.eatSpace();\n    var tagName = \"\", c;\n    while ((c = stream.eat(/[^\\s\\u00a0=<>\\\"\\'\\/?]/))) tagName += c;\n\n    return chain(stream, state, tokenTag(tagName, isclose));\n  }\n  // start code block\n  else if(ch == \"{\") {\n    pushStateStack(state, { type: \"codeblock\"});\n    return null;\n  }\n  // end code block\n  else if(ch == \"}\") {\n    popStateStack(state);\n    return null;\n  }\n  // if we're in an XML block\n  else if(isInXmlBlock(state)) {\n    if(ch == \">\")\n      return \"tag\";\n    else if(ch == \"/\" && stream.eat(\">\")) {\n      popStateStack(state);\n      return \"tag\";\n    }\n    else\n      return \"variable\";\n  }\n  // if a number\n  else if (/\\d/.test(ch)) {\n    stream.match(/^\\d*(?:\\.\\d*)?(?:E[+\\-]?\\d+)?/);\n    return \"atom\";\n  }\n  // comment start\n  else if (ch === \"(\" && stream.eat(\":\")) {\n    pushStateStack(state, { type: \"comment\"});\n    return chain(stream, state, tokenComment);\n  }\n  // quoted string\n  else if (!isEQName && (ch === '\"' || ch === \"'\"))\n    return chain(stream, state, tokenString(ch));\n  // variable\n  else if(ch === \"$\") {\n    return chain(stream, state, tokenVariable);\n  }\n  // assignment\n  else if(ch ===\":\" && stream.eat(\"=\")) {\n    return \"keyword\";\n  }\n  // open paren\n  else if(ch === \"(\") {\n    pushStateStack(state, { type: \"paren\"});\n    return null;\n  }\n  // close paren\n  else if(ch === \")\") {\n    popStateStack(state);\n    return null;\n  }\n  // open paren\n  else if(ch === \"[\") {\n    pushStateStack(state, { type: \"bracket\"});\n    return null;\n  }\n  // close paren\n  else if(ch === \"]\") {\n    popStateStack(state);\n    return null;\n  }\n  else {\n    var known = keywords.propertyIsEnumerable(ch) && keywords[ch];\n\n    // if there's a EQName ahead, consume the rest of the string portion, it's likely a function\n    if(isEQName && ch === '\\\"') while(stream.next() !== '\"'){}\n    if(isEQName && ch === '\\'') while(stream.next() !== '\\''){}\n\n    // gobble up a word if the character is not known\n    if(!known) stream.eatWhile(/[\\w\\$_-]/);\n\n    // gobble a colon in the case that is a lib func type call fn:doc\n    var foundColon = stream.eat(\":\");\n\n    // if there's not a second colon, gobble another word. Otherwise, it's probably an axis specifier\n    // which should get matched as a keyword\n    if(!stream.eat(\":\") && foundColon) {\n      stream.eatWhile(/[\\w\\$_-]/);\n    }\n    // if the next non whitespace character is an open paren, this is probably a function (if not a keyword of other sort)\n    if(stream.match(/^[ \\t]*\\(/, false)) {\n      mightBeFunction = true;\n    }\n    // is the word a keyword?\n    var word = stream.current();\n    known = keywords.propertyIsEnumerable(word) && keywords[word];\n\n    // if we think it's a function call but not yet known,\n    // set style to variable for now for lack of something better\n    if(mightBeFunction && !known) known = {type: \"function_call\", style: \"def\"};\n\n    // if the previous word was element, attribute, axis specifier, this word should be the name of that\n    if(isInXmlConstructor(state)) {\n      popStateStack(state);\n      return \"variable\";\n    }\n    // as previously checked, if the word is element,attribute, axis specifier, call it an \"xmlconstructor\" and\n    // push the stack so we know to look for it on the next word\n    if(word == \"element\" || word == \"attribute\" || known.type == \"axis_specifier\") pushStateStack(state, {type: \"xmlconstructor\"});\n\n    // if the word is known, return the details of that else just call this a generic 'word'\n    return known ? known.style : \"variable\";\n  }\n}\n\n// handle comments, including nested\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, maybeNested = false, nestedCount = 0, ch;\n  while (ch = stream.next()) {\n    if (ch == \")\" && maybeEnd) {\n      if(nestedCount > 0)\n        nestedCount--;\n      else {\n        popStateStack(state);\n        break;\n      }\n    }\n    else if(ch == \":\" && maybeNested) {\n      nestedCount++;\n    }\n    maybeEnd = (ch == \":\");\n    maybeNested = (ch == \"(\");\n  }\n\n  return \"comment\";\n}\n\n// tokenizer for string literals\n// optionally pass a tokenizer function to set state.tokenize back to when finished\nfunction tokenString(quote, f) {\n  return function(stream, state) {\n    var ch;\n\n    if(isInString(state) && stream.current() == quote) {\n      popStateStack(state);\n      if(f) state.tokenize = f;\n      return \"string\";\n    }\n\n    pushStateStack(state, { type: \"string\", name: quote, tokenize: tokenString(quote, f) });\n\n    // if we're in a string and in an XML block, allow an embedded code block\n    if(stream.match(\"{\", false) && isInXmlAttributeBlock(state)) {\n      state.tokenize = tokenBase;\n      return \"string\";\n    }\n\n\n    while (ch = stream.next()) {\n      if (ch ==  quote) {\n        popStateStack(state);\n        if(f) state.tokenize = f;\n        break;\n      }\n      else {\n        // if we're in a string and in an XML block, allow an embedded code block in an attribute\n        if(stream.match(\"{\", false) && isInXmlAttributeBlock(state)) {\n          state.tokenize = tokenBase;\n          return \"string\";\n        }\n\n      }\n    }\n\n    return \"string\";\n  };\n}\n\n// tokenizer for variables\nfunction tokenVariable(stream, state) {\n  var isVariableChar = /[\\w\\$_-]/;\n\n  // a variable may start with a quoted EQName so if the next character is quote, consume to the next quote\n  if(stream.eat(\"\\\"\")) {\n    while(stream.next() !== '\\\"'){};\n    stream.eat(\":\");\n  } else {\n    stream.eatWhile(isVariableChar);\n    if(!stream.match(\":=\", false)) stream.eat(\":\");\n  }\n  stream.eatWhile(isVariableChar);\n  state.tokenize = tokenBase;\n  return \"variable\";\n}\n\n// tokenizer for XML tags\nfunction tokenTag(name, isclose) {\n  return function(stream, state) {\n    stream.eatSpace();\n    if(isclose && stream.eat(\">\")) {\n      popStateStack(state);\n      state.tokenize = tokenBase;\n      return \"tag\";\n    }\n    // self closing tag without attributes?\n    if(!stream.eat(\"/\"))\n      pushStateStack(state, { type: \"tag\", name: name, tokenize: tokenBase});\n    if(!stream.eat(\">\")) {\n      state.tokenize = tokenAttribute;\n      return \"tag\";\n    }\n    else {\n      state.tokenize = tokenBase;\n    }\n    return \"tag\";\n  };\n}\n\n// tokenizer for XML attributes\nfunction tokenAttribute(stream, state) {\n  var ch = stream.next();\n\n  if(ch == \"/\" && stream.eat(\">\")) {\n    if(isInXmlAttributeBlock(state)) popStateStack(state);\n    if(isInXmlBlock(state)) popStateStack(state);\n    return \"tag\";\n  }\n  if(ch == \">\") {\n    if(isInXmlAttributeBlock(state)) popStateStack(state);\n    return \"tag\";\n  }\n  if(ch == \"=\")\n    return null;\n  // quoted string\n  if (ch == '\"' || ch == \"'\")\n    return chain(stream, state, tokenString(ch, tokenAttribute));\n\n  if(!isInXmlAttributeBlock(state))\n    pushStateStack(state, { type: \"attribute\", tokenize: tokenAttribute});\n\n  stream.eat(/[a-zA-Z_:]/);\n  stream.eatWhile(/[-a-zA-Z0-9_:.]/);\n  stream.eatSpace();\n\n  // the case where the attribute has not value and the tag was closed\n  if(stream.match(\">\", false) || stream.match(\"/\", false)) {\n    popStateStack(state);\n    state.tokenize = tokenBase;\n  }\n\n  return \"attribute\";\n}\n\n// handle comments, including nested\nfunction tokenXMLComment(stream, state) {\n  var ch;\n  while (ch = stream.next()) {\n    if (ch == \"-\" && stream.match(\"->\", true)) {\n      state.tokenize = tokenBase;\n      return \"comment\";\n    }\n  }\n}\n\n\n// handle CDATA\nfunction tokenCDATA(stream, state) {\n  var ch;\n  while (ch = stream.next()) {\n    if (ch == \"]\" && stream.match(\"]\", true)) {\n      state.tokenize = tokenBase;\n      return \"comment\";\n    }\n  }\n}\n\n// handle preprocessing instructions\nfunction tokenPreProcessing(stream, state) {\n  var ch;\n  while (ch = stream.next()) {\n    if (ch == \"?\" && stream.match(\">\", true)) {\n      state.tokenize = tokenBase;\n      return \"processingInstruction\";\n    }\n  }\n}\n\n\n// functions to test the current context of the state\nfunction isInXmlBlock(state) { return isIn(state, \"tag\"); }\nfunction isInXmlAttributeBlock(state) { return isIn(state, \"attribute\"); }\nfunction isInXmlConstructor(state) { return isIn(state, \"xmlconstructor\"); }\nfunction isInString(state) { return isIn(state, \"string\"); }\n\nfunction isEQNameAhead(stream) {\n  // assume we've already eaten a quote (\")\n  if(stream.current() === '\"')\n    return stream.match(/^[^\\\"]+\\\"\\:/, false);\n  else if(stream.current() === '\\'')\n    return stream.match(/^[^\\\"]+\\'\\:/, false);\n  else\n    return false;\n}\n\nfunction isIn(state, type) {\n  return (state.stack.length && state.stack[state.stack.length - 1].type == type);\n}\n\nfunction pushStateStack(state, newState) {\n  state.stack.push(newState);\n}\n\nfunction popStateStack(state) {\n  state.stack.pop();\n  var reinstateTokenize = state.stack.length && state.stack[state.stack.length-1].tokenize;\n  state.tokenize = reinstateTokenize || tokenBase;\n}\n\n// the interface for the mode API\nexport const xQuery = {\n  name: \"xquery\",\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      cc: [],\n      stack: []\n    };\n  },\n\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n    return style;\n  },\n\n  languageData: {\n    commentTokens: {block: {open: \"(:\", close: \":)\"}}\n  }\n};\n"],"names":["keywords","kw","type","style","operator","atom","qualifier","kwObj","basic","i","l","length","types","operators","axis_specifiers","chain","stream","state","f","tokenize","tokenBase","ch","next","mightBeFunction","isEQName","current","match","tokenXMLComment","tokenCDATA","tokenPreProcessing","name","isclose","eat","eatSpace","c","tagName","popStateStack","pushStateStack","tokenAttribute","isIn","test","tokenComment","tokenString","tokenVariable","known","propertyIsEnumerable","eatWhile","foundColon","word","maybeEnd","maybeNested","nestedCount","quote","isInString","isInXmlAttributeBlock","isVariableChar","stack","newState","push","pop","reinstateTokenize","xQuery","startState","cc","token","languageData","commentTokens","block","open","close"],"sourceRoot":""}