{"version":3,"file":"static/chunks/673.a6f19e33b95f15ef.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/cypher.js","webpack://_N_E/<anon>"],"sourcesContent":["var wordRegexp = function(words) {\n  return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n};\n\nvar tokenBase = function(stream/*, state*/) {\n  curPunc = null;\n  var ch = stream.next();\n  if (ch ==='\"') {\n    stream.match(/^.*?\"/);\n    return \"string\";\n  }\n  if (ch === \"'\") {\n    stream.match(/^.*?'/);\n    return \"string\";\n  }\n  if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n    curPunc = ch;\n    return \"punctuation\";\n  } else if (ch === \"/\" && stream.eat(\"/\")) {\n    stream.skipToEnd();\n    return \"comment\";\n  } else if (operatorChars.test(ch)) {\n    stream.eatWhile(operatorChars);\n    return null;\n  } else {\n    stream.eatWhile(/[_\\w\\d]/);\n    if (stream.eat(\":\")) {\n      stream.eatWhile(/[\\w\\d_\\-]/);\n      return \"atom\";\n    }\n    var word = stream.current();\n    if (funcs.test(word)) return \"builtin\";\n    if (preds.test(word)) return \"def\";\n    if (keywords.test(word) || systemKeywords.test(word)) return \"keyword\";\n    return \"variable\";\n  }\n};\nvar pushContext = function(state, type, col) {\n  return state.context = {\n    prev: state.context,\n    indent: state.indent,\n    col: col,\n    type: type\n  };\n};\nvar popContext = function(state) {\n  state.indent = state.context.indent;\n  return state.context = state.context.prev;\n};\nvar curPunc;\nvar funcs = wordRegexp([\"abs\", \"acos\", \"allShortestPaths\", \"asin\", \"atan\", \"atan2\", \"avg\", \"ceil\", \"coalesce\", \"collect\", \"cos\", \"cot\", \"count\", \"degrees\", \"e\", \"endnode\", \"exp\", \"extract\", \"filter\", \"floor\", \"haversin\", \"head\", \"id\", \"keys\", \"labels\", \"last\", \"left\", \"length\", \"log\", \"log10\", \"lower\", \"ltrim\", \"max\", \"min\", \"node\", \"nodes\", \"percentileCont\", \"percentileDisc\", \"pi\", \"radians\", \"rand\", \"range\", \"reduce\", \"rel\", \"relationship\", \"relationships\", \"replace\", \"reverse\", \"right\", \"round\", \"rtrim\", \"shortestPath\", \"sign\", \"sin\", \"size\", \"split\", \"sqrt\", \"startnode\", \"stdev\", \"stdevp\", \"str\", \"substring\", \"sum\", \"tail\", \"tan\", \"timestamp\", \"toFloat\", \"toInt\", \"toString\", \"trim\", \"type\", \"upper\"]);\nvar preds = wordRegexp([\"all\", \"and\", \"any\", \"contains\", \"exists\", \"has\", \"in\", \"none\", \"not\", \"or\", \"single\", \"xor\"]);\nvar keywords = wordRegexp([\"as\", \"asc\", \"ascending\", \"assert\", \"by\", \"case\", \"commit\", \"constraint\", \"create\", \"csv\", \"cypher\", \"delete\", \"desc\", \"descending\", \"detach\", \"distinct\", \"drop\", \"else\", \"end\", \"ends\", \"explain\", \"false\", \"fieldterminator\", \"foreach\", \"from\", \"headers\", \"in\", \"index\", \"is\", \"join\", \"limit\", \"load\", \"match\", \"merge\", \"null\", \"on\", \"optional\", \"order\", \"periodic\", \"profile\", \"remove\", \"return\", \"scan\", \"set\", \"skip\", \"start\", \"starts\", \"then\", \"true\", \"union\", \"unique\", \"unwind\", \"using\", \"when\", \"where\", \"with\", \"call\", \"yield\"]);\nvar systemKeywords = wordRegexp([\"access\", \"active\", \"assign\", \"all\", \"alter\", \"as\", \"catalog\", \"change\", \"copy\", \"create\", \"constraint\", \"constraints\", \"current\", \"database\", \"databases\", \"dbms\", \"default\", \"deny\", \"drop\", \"element\", \"elements\", \"exists\", \"from\", \"grant\", \"graph\", \"graphs\", \"if\", \"index\", \"indexes\", \"label\", \"labels\", \"management\", \"match\", \"name\", \"names\", \"new\", \"node\", \"nodes\", \"not\", \"of\", \"on\", \"or\", \"password\", \"populated\", \"privileges\", \"property\", \"read\", \"relationship\", \"relationships\", \"remove\", \"replace\", \"required\", \"revoke\", \"role\", \"roles\", \"set\", \"show\", \"start\", \"status\", \"stop\", \"suspended\", \"to\", \"traverse\", \"type\", \"types\", \"user\", \"users\", \"with\", \"write\"]);\nvar operatorChars = /[*+\\-<>=&|~%^]/;\n\nexport const cypher = {\n  name: \"cypher\",\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      context: null,\n      indent: 0,\n      col: 0\n    };\n  },\n  token: function(stream, state) {\n    if (stream.sol()) {\n      if (state.context && (state.context.align == null)) {\n        state.context.align = false;\n      }\n      state.indent = stream.indentation();\n    }\n    if (stream.eatSpace()) {\n      return null;\n    }\n    var style = state.tokenize(stream, state);\n    if (style !== \"comment\" && state.context && (state.context.align == null) && state.context.type !== \"pattern\") {\n      state.context.align = true;\n    }\n    if (curPunc === \"(\") {\n      pushContext(state, \")\", stream.column());\n    } else if (curPunc === \"[\") {\n      pushContext(state, \"]\", stream.column());\n    } else if (curPunc === \"{\") {\n      pushContext(state, \"}\", stream.column());\n    } else if (/[\\]\\}\\)]/.test(curPunc)) {\n      while (state.context && state.context.type === \"pattern\") {\n        popContext(state);\n      }\n      if (state.context && curPunc === state.context.type) {\n        popContext(state);\n      }\n    } else if (curPunc === \".\" && state.context && state.context.type === \"pattern\") {\n      popContext(state);\n    } else if (/atom|string|variable/.test(style) && state.context) {\n      if (/[\\}\\]]/.test(state.context.type)) {\n        pushContext(state, \"pattern\", stream.column());\n      } else if (state.context.type === \"pattern\" && !state.context.align) {\n        state.context.align = true;\n        state.context.col = stream.column();\n      }\n    }\n    return style;\n  },\n  indent: function(state, textAfter, cx) {\n    var firstChar = textAfter && textAfter.charAt(0);\n    var context = state.context;\n    if (/[\\]\\}]/.test(firstChar)) {\n      while (context && context.type === \"pattern\") {\n        context = context.prev;\n      }\n    }\n    var closing = context && firstChar === context.type;\n    if (!context) return 0;\n    if (context.type === \"keywords\") return null\n    if (context.align) return context.col + (closing ? 0 : 1);\n    return context.indent + (closing ? 0 : cx.unit);\n  }\n};\n"],"names":["curPunc","wordRegexp","words","join","tokenBase","stream","ch","next","match","test","eat","skipToEnd","operatorChars","eatWhile","word","current","preds","keywords","systemKeywords","pushContext","state","type","col","context","prev","indent","popContext","funcs","cypher","name","startState","tokenize","token","sol","align","indentation","eatSpace","style","column","textAfter","cx","firstChar","charAt","closing","unit"],"sourceRoot":""}