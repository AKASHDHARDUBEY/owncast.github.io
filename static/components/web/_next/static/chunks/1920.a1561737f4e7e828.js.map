{"version":3,"file":"static/chunks/1920.a1561737f4e7e828.js","mappings":"8IAAA,IAAAA,EAAA,GAEA,SAAAC,EAAAC,CAAA,EACA,GAAAA,EAAAC,QAAA,eAEA,IAAAC,EAAAF,EAAAE,GAAA,GACAC,EAAAH,EAAAI,IAAA,GAEA,GAAAD,OAAAA,SACA,EAAAE,KAAA,QAAAL,EAAAK,KAAA,QAAAL,EAAAK,KAAA,QACAL,EAAAK,KAAA,OAAAL,EAAAK,KAAA,OACAL,EAAAK,KAAA,OAAAL,EAAAK,KAAA,MACA,SAEAL,EAAAK,KAAA,QACAL,EAAAM,MAAA,MACAN,EAAAI,IAAA,GACA,UAEAJ,EAAAK,KAAA,QAAAL,EAAAK,KAAA,QACAL,EAAAO,QAAA,UACA,WAEAP,CAAAA,EAAAK,KAAA,OAAAL,EAAAK,KAAA,SACAL,EAAAO,QAAA,UAGA,SAdA,CAgBA,GAAAL,GAAAC,CAAAA,MAAAA,GAAAA,MAAAA,CAAA,GACAH,EAAAQ,GAAA,QAAAR,EAAAQ,GAAA,MAEA,OADAR,EAAAS,SAAA,GACA,SAEA,CACA,GAAAP,GAAAC,MAAAA,EAAA,CACA,GAAAH,EAAAK,KAAA,QAAAL,EAAAK,KAAA,QAAAL,EAAAK,KAAA,OACA,iBACA,CACA,GAAAL,EAAAK,KAAA,SAAAL,EAAAK,KAAA,SAAAL,EAAAK,KAAA,SAAAL,EAAAK,KAAA,QAEA,OADAL,EAAAS,SAAA,GACA,OACA,CACA,KAAAJ,KAAA,WAAAL,EAAAK,KAAA,WAAAL,EAAAK,KAAA,WAAAL,EAAAK,KAAA,UACA,iBACA,CACA,EACAE,QAAA,UACA,IAAAG,EAAAV,EAAAW,OAAA,GACA,OAAAb,EAAAc,cAAA,CAAAF,GAAAZ,CAAA,CAAAY,EAAA,MAOO,IAAAG,EAAA,CACPC,KAAA,QACAC,WAAA,WAA0B,OAAQC,OAAA,KAClCC,MAAA,SAAAjB,CAAA,CAAAkB,CAAA,EACA,MAPA,CAAAA,EAAAF,MAAA,KAAAjB,CAAA,EAOAC,EAAAkB,EACA,CACA","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/troff.js","webpack://_N_E/<anon>"],"sourcesContent":["var words = {};\n\nfunction tokenBase(stream) {\n  if (stream.eatSpace()) return null;\n\n  var sol = stream.sol();\n  var ch = stream.next();\n\n  if (ch === '\\\\') {\n    if (stream.match('fB') || stream.match('fR') || stream.match('fI') ||\n        stream.match('u')  || stream.match('d')  ||\n        stream.match('%')  || stream.match('&')) {\n      return 'string';\n    }\n    if (stream.match('m[')) {\n      stream.skipTo(']');\n      stream.next();\n      return 'string';\n    }\n    if (stream.match('s+') || stream.match('s-')) {\n      stream.eatWhile(/[\\d-]/);\n      return 'string';\n    }\n    if (stream.match('\\(') || stream.match('*\\(')) {\n      stream.eatWhile(/[\\w-]/);\n      return 'string';\n    }\n    return 'string';\n  }\n  if (sol && (ch === '.' || ch === '\\'')) {\n    if (stream.eat('\\\\') && stream.eat('\\\"')) {\n      stream.skipToEnd();\n      return 'comment';\n    }\n  }\n  if (sol && ch === '.') {\n    if (stream.match('B ') || stream.match('I ') || stream.match('R ')) {\n      return 'attribute';\n    }\n    if (stream.match('TH ') || stream.match('SH ') || stream.match('SS ') || stream.match('HP ')) {\n      stream.skipToEnd();\n      return 'quote';\n    }\n    if ((stream.match(/[A-Z]/) && stream.match(/[A-Z]/)) || (stream.match(/[a-z]/) && stream.match(/[a-z]/))) {\n      return 'attribute';\n    }\n  }\n  stream.eatWhile(/[\\w-]/);\n  var cur = stream.current();\n  return words.hasOwnProperty(cur) ? words[cur] : null;\n}\n\nfunction tokenize(stream, state) {\n  return (state.tokens[0] || tokenBase) (stream, state);\n};\n\nexport const troff = {\n  name: \"troff\",\n  startState: function() {return {tokens:[]};},\n  token: function(stream, state) {\n    return tokenize(stream, state);\n  }\n};\n"],"names":["words","tokenBase","stream","eatSpace","sol","ch","next","match","skipTo","eatWhile","eat","skipToEnd","cur","current","hasOwnProperty","troff","name","startState","tokens","token","state"],"sourceRoot":""}