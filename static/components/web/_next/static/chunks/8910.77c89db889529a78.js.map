{"version":3,"file":"static/chunks/8910.77c89db889529a78.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/go.js","webpack://_N_E/<anon>"],"sourcesContent":["var keywords = {\n  \"break\":true, \"case\":true, \"chan\":true, \"const\":true, \"continue\":true,\n  \"default\":true, \"defer\":true, \"else\":true, \"fallthrough\":true, \"for\":true,\n  \"func\":true, \"go\":true, \"goto\":true, \"if\":true, \"import\":true,\n  \"interface\":true, \"map\":true, \"package\":true, \"range\":true, \"return\":true,\n  \"select\":true, \"struct\":true, \"switch\":true, \"type\":true, \"var\":true,\n  \"bool\":true, \"byte\":true, \"complex64\":true, \"complex128\":true,\n  \"float32\":true, \"float64\":true, \"int8\":true, \"int16\":true, \"int32\":true,\n  \"int64\":true, \"string\":true, \"uint8\":true, \"uint16\":true, \"uint32\":true,\n  \"uint64\":true, \"int\":true, \"uint\":true, \"uintptr\":true, \"error\": true,\n  \"rune\":true, \"any\":true, \"comparable\":true\n};\n\nvar atoms = {\n  \"true\":true, \"false\":true, \"iota\":true, \"nil\":true, \"append\":true,\n  \"cap\":true, \"close\":true, \"complex\":true, \"copy\":true, \"delete\":true, \"imag\":true,\n  \"len\":true, \"make\":true, \"new\":true, \"panic\":true, \"print\":true,\n  \"println\":true, \"real\":true, \"recover\":true\n};\n\nvar isOperatorChar = /[+\\-*&^%:=<>!|\\/]/;\n\nvar curPunc;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (ch == '\"' || ch == \"'\" || ch == \"`\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n  if (/[\\d\\.]/.test(ch)) {\n    if (ch == \".\") {\n      stream.match(/^[0-9]+([eE][\\-+]?[0-9]+)?/);\n    } else if (ch == \"0\") {\n      stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);\n    } else {\n      stream.match(/^[0-9]*\\.?[0-9]*([eE][\\-+]?[0-9]+)?/);\n    }\n    return \"number\";\n  }\n  if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n    curPunc = ch;\n    return null;\n  }\n  if (ch == \"/\") {\n    if (stream.eat(\"*\")) {\n      state.tokenize = tokenComment;\n      return tokenComment(stream, state);\n    }\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n  if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n  var cur = stream.current();\n  if (keywords.propertyIsEnumerable(cur)) {\n    if (cur == \"case\" || cur == \"default\") curPunc = \"case\";\n    return \"keyword\";\n  }\n  if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n  return \"variable\";\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {end = true; break;}\n      escaped = !escaped && quote != \"`\" && next == \"\\\\\";\n    }\n    if (end || !(escaped || quote == \"`\"))\n      state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction Context(indented, column, type, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.align = align;\n  this.prev = prev;\n}\nfunction pushContext(state, col, type) {\n  return state.context = new Context(state.indented, col, type, null, state.context);\n}\nfunction popContext(state) {\n  if (!state.context.prev) return;\n  var t = state.context.type;\n  if (t == \")\" || t == \"]\" || t == \"}\")\n    state.indented = state.context.indented;\n  return state.context = state.context.prev;\n}\n\n// Interface\n\nexport const go = {\n  name: \"go\",\n  startState: function(indentUnit) {\n    return {\n      tokenize: null,\n      context: new Context(-indentUnit, 0, \"top\", false),\n      indented: 0,\n      startOfLine: true\n    };\n  },\n\n  token: function(stream, state) {\n    var ctx = state.context;\n    if (stream.sol()) {\n      if (ctx.align == null) ctx.align = false;\n      state.indented = stream.indentation();\n      state.startOfLine = true;\n      if (ctx.type == \"case\") ctx.type = \"}\";\n    }\n    if (stream.eatSpace()) return null;\n    curPunc = null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\") return style;\n    if (ctx.align == null) ctx.align = true;\n\n    if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n    else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n    else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n    else if (curPunc == \"case\") ctx.type = \"case\";\n    else if (curPunc == \"}\" && ctx.type == \"}\") popContext(state);\n    else if (curPunc == ctx.type) popContext(state);\n    state.startOfLine = false;\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    if (state.tokenize != tokenBase && state.tokenize != null) return null;\n    var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);\n    if (ctx.type == \"case\" && /^(?:case|default)\\b/.test(textAfter)) {\n      state.context.type = \"}\";\n      return ctx.indented;\n    }\n    var closing = firstChar == ctx.type;\n    if (ctx.align) return ctx.column + (closing ? 0 : 1);\n    else return ctx.indented + (closing ? 0 : cx.unit);\n  },\n\n  languageData: {\n    indentOnInput: /^\\s([{}]|case |default\\s*:)$/,\n    commentTokens: {line: \"//\", block: {open: \"/*\", close: \"*/\"}}\n  }\n};\n\n"],"names":["curPunc","keywords","atoms","isOperatorChar","tokenBase","stream","state","ch","next","tokenize","escaped","end","quote","test","match","eat","tokenComment","skipToEnd","eatWhile","cur","current","propertyIsEnumerable","maybeEnd","Context","indented","column","type","align","prev","pushContext","col","context","popContext","t","go","name","startState","indentUnit","startOfLine","token","ctx","sol","indentation","eatSpace","style","indent","textAfter","cx","firstChar","charAt","closing","unit","languageData","indentOnInput","commentTokens","line","block","open","close"],"sourceRoot":""}