{"version":3,"file":"static/chunks/7590.8712d50d14509c0b.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/erlang.js","webpack://_N_E/<anon>"],"sourcesContent":["/////////////////////////////////////////////////////////////////////////////\n// constants\n\nvar typeWords = [\n  \"-type\", \"-spec\", \"-export_type\", \"-opaque\"];\n\nvar keywordWords = [\n  \"after\",\"begin\",\"catch\",\"case\",\"cond\",\"end\",\"fun\",\"if\",\n  \"let\",\"of\",\"query\",\"receive\",\"try\",\"when\"];\n\nvar separatorRE    = /[\\->,;]/;\nvar separatorWords = [\n  \"->\",\";\",\",\"];\n\nvar operatorAtomWords = [\n  \"and\",\"andalso\",\"band\",\"bnot\",\"bor\",\"bsl\",\"bsr\",\"bxor\",\n  \"div\",\"not\",\"or\",\"orelse\",\"rem\",\"xor\"];\n\nvar operatorSymbolRE    = /[\\+\\-\\*\\/<>=\\|:!]/;\nvar operatorSymbolWords = [\n  \"=\",\"+\",\"-\",\"*\",\"/\",\">\",\">=\",\"<\",\"=<\",\"=:=\",\"==\",\"=/=\",\"/=\",\"||\",\"<-\",\"!\"];\n\nvar openParenRE    = /[<\\(\\[\\{]/;\nvar openParenWords = [\n  \"<<\",\"(\",\"[\",\"{\"];\n\nvar closeParenRE    = /[>\\)\\]\\}]/;\nvar closeParenWords = [\n  \"}\",\"]\",\")\",\">>\"];\n\nvar guardWords = [\n  \"is_atom\",\"is_binary\",\"is_bitstring\",\"is_boolean\",\"is_float\",\n  \"is_function\",\"is_integer\",\"is_list\",\"is_number\",\"is_pid\",\n  \"is_port\",\"is_record\",\"is_reference\",\"is_tuple\",\n  \"atom\",\"binary\",\"bitstring\",\"boolean\",\"function\",\"integer\",\"list\",\n  \"number\",\"pid\",\"port\",\"record\",\"reference\",\"tuple\"];\n\nvar bifWords = [\n  \"abs\",\"adler32\",\"adler32_combine\",\"alive\",\"apply\",\"atom_to_binary\",\n  \"atom_to_list\",\"binary_to_atom\",\"binary_to_existing_atom\",\n  \"binary_to_list\",\"binary_to_term\",\"bit_size\",\"bitstring_to_list\",\n  \"byte_size\",\"check_process_code\",\"contact_binary\",\"crc32\",\n  \"crc32_combine\",\"date\",\"decode_packet\",\"delete_module\",\n  \"disconnect_node\",\"element\",\"erase\",\"exit\",\"float\",\"float_to_list\",\n  \"garbage_collect\",\"get\",\"get_keys\",\"group_leader\",\"halt\",\"hd\",\n  \"integer_to_list\",\"internal_bif\",\"iolist_size\",\"iolist_to_binary\",\n  \"is_alive\",\"is_atom\",\"is_binary\",\"is_bitstring\",\"is_boolean\",\n  \"is_float\",\"is_function\",\"is_integer\",\"is_list\",\"is_number\",\"is_pid\",\n  \"is_port\",\"is_process_alive\",\"is_record\",\"is_reference\",\"is_tuple\",\n  \"length\",\"link\",\"list_to_atom\",\"list_to_binary\",\"list_to_bitstring\",\n  \"list_to_existing_atom\",\"list_to_float\",\"list_to_integer\",\n  \"list_to_pid\",\"list_to_tuple\",\"load_module\",\"make_ref\",\"module_loaded\",\n  \"monitor_node\",\"node\",\"node_link\",\"node_unlink\",\"nodes\",\"notalive\",\n  \"now\",\"open_port\",\"pid_to_list\",\"port_close\",\"port_command\",\n  \"port_connect\",\"port_control\",\"pre_loaded\",\"process_flag\",\n  \"process_info\",\"processes\",\"purge_module\",\"put\",\"register\",\n  \"registered\",\"round\",\"self\",\"setelement\",\"size\",\"spawn\",\"spawn_link\",\n  \"spawn_monitor\",\"spawn_opt\",\"split_binary\",\"statistics\",\n  \"term_to_binary\",\"time\",\"throw\",\"tl\",\"trunc\",\"tuple_size\",\n  \"tuple_to_list\",\"unlink\",\"unregister\",\"whereis\"];\n\n// upper case: [A-Z] [Ø-Þ] [À-Ö]\n// lower case: [a-z] [ß-ö] [ø-ÿ]\nvar anumRE       = /[\\w@Ø-ÞÀ-Öß-öø-ÿ]/;\nvar escapesRE    =\n    /[0-7]{1,3}|[bdefnrstv\\\\\"']|\\^[a-zA-Z]|x[0-9a-zA-Z]{2}|x{[0-9a-zA-Z]+}/;\n\n/////////////////////////////////////////////////////////////////////////////\n// tokenizer\n\nfunction tokenizer(stream,state) {\n  // in multi-line string\n  if (state.in_string) {\n    state.in_string = (!doubleQuote(stream));\n    return rval(state,stream,\"string\");\n  }\n\n  // in multi-line atom\n  if (state.in_atom) {\n    state.in_atom = (!singleQuote(stream));\n    return rval(state,stream,\"atom\");\n  }\n\n  // whitespace\n  if (stream.eatSpace()) {\n    return rval(state,stream,\"whitespace\");\n  }\n\n  // attributes and type specs\n  if (!peekToken(state) &&\n      stream.match(/-\\s*[a-zß-öø-ÿ][\\wØ-ÞÀ-Öß-öø-ÿ]*/)) {\n    if (is_member(stream.current(),typeWords)) {\n      return rval(state,stream,\"type\");\n    }else{\n      return rval(state,stream,\"attribute\");\n    }\n  }\n\n  var ch = stream.next();\n\n  // comment\n  if (ch == '%') {\n    stream.skipToEnd();\n    return rval(state,stream,\"comment\");\n  }\n\n  // colon\n  if (ch == \":\") {\n    return rval(state,stream,\"colon\");\n  }\n\n  // macro\n  if (ch == '?') {\n    stream.eatSpace();\n    stream.eatWhile(anumRE);\n    return rval(state,stream,\"macro\");\n  }\n\n  // record\n  if (ch == \"#\") {\n    stream.eatSpace();\n    stream.eatWhile(anumRE);\n    return rval(state,stream,\"record\");\n  }\n\n  // dollar escape\n  if (ch == \"$\") {\n    if (stream.next() == \"\\\\\" && !stream.match(escapesRE)) {\n      return rval(state,stream,\"error\");\n    }\n    return rval(state,stream,\"number\");\n  }\n\n  // dot\n  if (ch == \".\") {\n    return rval(state,stream,\"dot\");\n  }\n\n  // quoted atom\n  if (ch == '\\'') {\n    if (!(state.in_atom = (!singleQuote(stream)))) {\n      if (stream.match(/\\s*\\/\\s*[0-9]/,false)) {\n        stream.match(/\\s*\\/\\s*[0-9]/,true);\n        return rval(state,stream,\"fun\");      // 'f'/0 style fun\n      }\n      if (stream.match(/\\s*\\(/,false) || stream.match(/\\s*:/,false)) {\n        return rval(state,stream,\"function\");\n      }\n    }\n    return rval(state,stream,\"atom\");\n  }\n\n  // string\n  if (ch == '\"') {\n    state.in_string = (!doubleQuote(stream));\n    return rval(state,stream,\"string\");\n  }\n\n  // variable\n  if (/[A-Z_Ø-ÞÀ-Ö]/.test(ch)) {\n    stream.eatWhile(anumRE);\n    return rval(state,stream,\"variable\");\n  }\n\n  // atom/keyword/BIF/function\n  if (/[a-z_ß-öø-ÿ]/.test(ch)) {\n    stream.eatWhile(anumRE);\n\n    if (stream.match(/\\s*\\/\\s*[0-9]/,false)) {\n      stream.match(/\\s*\\/\\s*[0-9]/,true);\n      return rval(state,stream,\"fun\");      // f/0 style fun\n    }\n\n    var w = stream.current();\n\n    if (is_member(w,keywordWords)) {\n      return rval(state,stream,\"keyword\");\n    }else if (is_member(w,operatorAtomWords)) {\n      return rval(state,stream,\"operator\");\n    }else if (stream.match(/\\s*\\(/,false)) {\n      // 'put' and 'erlang:put' are bifs, 'foo:put' is not\n      if (is_member(w,bifWords) &&\n          ((peekToken(state).token != \":\") ||\n           (peekToken(state,2).token == \"erlang\"))) {\n        return rval(state,stream,\"builtin\");\n      }else if (is_member(w,guardWords)) {\n        return rval(state,stream,\"guard\");\n      }else{\n        return rval(state,stream,\"function\");\n      }\n    }else if (lookahead(stream) == \":\") {\n      if (w == \"erlang\") {\n        return rval(state,stream,\"builtin\");\n      } else {\n        return rval(state,stream,\"function\");\n      }\n    }else if (is_member(w,[\"true\",\"false\"])) {\n      return rval(state,stream,\"boolean\");\n    }else{\n      return rval(state,stream,\"atom\");\n    }\n  }\n\n  // number\n  var digitRE      = /[0-9]/;\n  var radixRE      = /[0-9a-zA-Z]/;         // 36#zZ style int\n  if (digitRE.test(ch)) {\n    stream.eatWhile(digitRE);\n    if (stream.eat('#')) {                // 36#aZ  style integer\n      if (!stream.eatWhile(radixRE)) {\n        stream.backUp(1);                 //\"36#\" - syntax error\n      }\n    } else if (stream.eat('.')) {       // float\n      if (!stream.eatWhile(digitRE)) {\n        stream.backUp(1);        // \"3.\" - probably end of function\n      } else {\n        if (stream.eat(/[eE]/)) {        // float with exponent\n          if (stream.eat(/[-+]/)) {\n            if (!stream.eatWhile(digitRE)) {\n              stream.backUp(2);            // \"2e-\" - syntax error\n            }\n          } else {\n            if (!stream.eatWhile(digitRE)) {\n              stream.backUp(1);            // \"2e\" - syntax error\n            }\n          }\n        }\n      }\n    }\n    return rval(state,stream,\"number\");   // normal integer\n  }\n\n  // open parens\n  if (nongreedy(stream,openParenRE,openParenWords)) {\n    return rval(state,stream,\"open_paren\");\n  }\n\n  // close parens\n  if (nongreedy(stream,closeParenRE,closeParenWords)) {\n    return rval(state,stream,\"close_paren\");\n  }\n\n  // separators\n  if (greedy(stream,separatorRE,separatorWords)) {\n    return rval(state,stream,\"separator\");\n  }\n\n  // operators\n  if (greedy(stream,operatorSymbolRE,operatorSymbolWords)) {\n    return rval(state,stream,\"operator\");\n  }\n\n  return rval(state,stream,null);\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// utilities\nfunction nongreedy(stream,re,words) {\n  if (stream.current().length == 1 && re.test(stream.current())) {\n    stream.backUp(1);\n    while (re.test(stream.peek())) {\n      stream.next();\n      if (is_member(stream.current(),words)) {\n        return true;\n      }\n    }\n    stream.backUp(stream.current().length-1);\n  }\n  return false;\n}\n\nfunction greedy(stream,re,words) {\n  if (stream.current().length == 1 && re.test(stream.current())) {\n    while (re.test(stream.peek())) {\n      stream.next();\n    }\n    while (0 < stream.current().length) {\n      if (is_member(stream.current(),words)) {\n        return true;\n      }else{\n        stream.backUp(1);\n      }\n    }\n    stream.next();\n  }\n  return false;\n}\n\nfunction doubleQuote(stream) {\n  return quote(stream, '\"', '\\\\');\n}\n\nfunction singleQuote(stream) {\n  return quote(stream,'\\'','\\\\');\n}\n\nfunction quote(stream,quoteChar,escapeChar) {\n  while (!stream.eol()) {\n    var ch = stream.next();\n    if (ch == quoteChar) {\n      return true;\n    }else if (ch == escapeChar) {\n      stream.next();\n    }\n  }\n  return false;\n}\n\nfunction lookahead(stream) {\n  var m = stream.match(/^\\s*([^\\s%])/, false)\n  return m ? m[1] : \"\";\n}\n\nfunction is_member(element,list) {\n  return (-1 < list.indexOf(element));\n}\n\nfunction rval(state,stream,type) {\n\n  // parse stack\n  pushToken(state,realToken(type,stream));\n\n  // map erlang token type to CodeMirror style class\n  //     erlang             -> CodeMirror tag\n  switch (type) {\n  case \"atom\":        return \"atom\";\n  case \"attribute\":   return \"attribute\";\n  case \"boolean\":     return \"atom\";\n  case \"builtin\":     return \"builtin\";\n  case \"close_paren\": return null;\n  case \"colon\":       return null;\n  case \"comment\":     return \"comment\";\n  case \"dot\":         return null;\n  case \"error\":       return \"error\";\n  case \"fun\":         return \"meta\";\n  case \"function\":    return \"tag\";\n  case \"guard\":       return \"property\";\n  case \"keyword\":     return \"keyword\";\n  case \"macro\":       return \"macroName\";\n  case \"number\":      return \"number\";\n  case \"open_paren\":  return null;\n  case \"operator\":    return \"operator\";\n  case \"record\":      return \"bracket\";\n  case \"separator\":   return null;\n  case \"string\":      return \"string\";\n  case \"type\":        return \"def\";\n  case \"variable\":    return \"variable\";\n  default:            return null;\n  }\n}\n\nfunction aToken(tok,col,ind,typ) {\n  return {token:  tok,\n          column: col,\n          indent: ind,\n          type:   typ};\n}\n\nfunction realToken(type,stream) {\n  return aToken(stream.current(),\n                stream.column(),\n                stream.indentation(),\n                type);\n}\n\nfunction fakeToken(type) {\n  return aToken(type,0,0,type);\n}\n\nfunction peekToken(state,depth) {\n  var len = state.tokenStack.length;\n  var dep = (depth ? depth : 1);\n\n  if (len < dep) {\n    return false;\n  }else{\n    return state.tokenStack[len-dep];\n  }\n}\n\nfunction pushToken(state,token) {\n\n  if (!(token.type == \"comment\" || token.type == \"whitespace\")) {\n    state.tokenStack = maybe_drop_pre(state.tokenStack,token);\n    state.tokenStack = maybe_drop_post(state.tokenStack);\n  }\n}\n\nfunction maybe_drop_pre(s,token) {\n  var last = s.length-1;\n\n  if (0 < last && s[last].type === \"record\" && token.type === \"dot\") {\n    s.pop();\n  }else if (0 < last && s[last].type === \"group\") {\n    s.pop();\n    s.push(token);\n  }else{\n    s.push(token);\n  }\n  return s;\n}\n\nfunction maybe_drop_post(s) {\n  if (!s.length) return s\n  var last = s.length-1;\n\n  if (s[last].type === \"dot\") {\n    return [];\n  }\n  if (last > 1 && s[last].type === \"fun\" && s[last-1].token === \"fun\") {\n    return s.slice(0,last-1);\n  }\n  switch (s[last].token) {\n  case \"}\":    return d(s,{g:[\"{\"]});\n  case \"]\":    return d(s,{i:[\"[\"]});\n  case \")\":    return d(s,{i:[\"(\"]});\n  case \">>\":   return d(s,{i:[\"<<\"]});\n  case \"end\":  return d(s,{i:[\"begin\",\"case\",\"fun\",\"if\",\"receive\",\"try\"]});\n  case \",\":    return d(s,{e:[\"begin\",\"try\",\"when\",\"->\",\n                              \",\",\"(\",\"[\",\"{\",\"<<\"]});\n  case \"->\":   return d(s,{r:[\"when\"],\n                           m:[\"try\",\"if\",\"case\",\"receive\"]});\n  case \";\":    return d(s,{E:[\"case\",\"fun\",\"if\",\"receive\",\"try\",\"when\"]});\n  case \"catch\":return d(s,{e:[\"try\"]});\n  case \"of\":   return d(s,{e:[\"case\"]});\n  case \"after\":return d(s,{e:[\"receive\",\"try\"]});\n  default:     return s;\n  }\n}\n\nfunction d(stack,tt) {\n  // stack is a stack of Token objects.\n  // tt is an object; {type:tokens}\n  // type is a char, tokens is a list of token strings.\n  // The function returns (possibly truncated) stack.\n  // It will descend the stack, looking for a Token such that Token.token\n  //  is a member of tokens. If it does not find that, it will normally (but\n  //  see \"E\" below) return stack. If it does find a match, it will remove\n  //  all the Tokens between the top and the matched Token.\n  // If type is \"m\", that is all it does.\n  // If type is \"i\", it will also remove the matched Token and the top Token.\n  // If type is \"g\", like \"i\", but add a fake \"group\" token at the top.\n  // If type is \"r\", it will remove the matched Token, but not the top Token.\n  // If type is \"e\", it will keep the matched Token but not the top Token.\n  // If type is \"E\", it behaves as for type \"e\", except if there is no match,\n  //  in which case it will return an empty stack.\n\n  for (var type in tt) {\n    var len = stack.length-1;\n    var tokens = tt[type];\n    for (var i = len-1; -1 < i ; i--) {\n      if (is_member(stack[i].token,tokens)) {\n        var ss = stack.slice(0,i);\n        switch (type) {\n        case \"m\": return ss.concat(stack[i]).concat(stack[len]);\n        case \"r\": return ss.concat(stack[len]);\n        case \"i\": return ss;\n        case \"g\": return ss.concat(fakeToken(\"group\"));\n        case \"E\": return ss.concat(stack[i]);\n        case \"e\": return ss.concat(stack[i]);\n        }\n      }\n    }\n  }\n  return (type == \"E\" ? [] : stack);\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// indenter\n\nfunction indenter(state, textAfter, cx) {\n  var t;\n  var wordAfter = wordafter(textAfter);\n  var currT = peekToken(state,1);\n  var prevT = peekToken(state,2);\n\n  if (state.in_string || state.in_atom) {\n    return null;\n  }else if (!prevT) {\n    return 0;\n  }else if (currT.token == \"when\") {\n    return currT.column + cx.unit;\n  }else if (wordAfter === \"when\" && prevT.type === \"function\") {\n    return prevT.indent+cx.unit;\n  }else if (wordAfter === \"(\" && currT.token === \"fun\") {\n    return  currT.column+3;\n  }else if (wordAfter === \"catch\" && (t = getToken(state,[\"try\"]))) {\n    return t.column;\n  }else if (is_member(wordAfter,[\"end\",\"after\",\"of\"])) {\n    t = getToken(state,[\"begin\",\"case\",\"fun\",\"if\",\"receive\",\"try\"]);\n    return t ? t.column : null;\n  }else if (is_member(wordAfter,closeParenWords)) {\n    t = getToken(state,openParenWords);\n    return t ? t.column : null;\n  }else if (is_member(currT.token,[\",\",\"|\",\"||\"]) ||\n            is_member(wordAfter,[\",\",\"|\",\"||\"])) {\n    t = postcommaToken(state);\n    return t ? t.column+t.token.length : cx.unit;\n  }else if (currT.token == \"->\") {\n    if (is_member(prevT.token, [\"receive\",\"case\",\"if\",\"try\"])) {\n      return prevT.column+cx.unit+cx.unit;\n    }else{\n      return prevT.column+cx.unit;\n    }\n  }else if (is_member(currT.token,openParenWords)) {\n    return currT.column+currT.token.length;\n  }else{\n    t = defaultToken(state);\n    return truthy(t) ? t.column+cx.unit : 0;\n  }\n}\n\nfunction wordafter(str) {\n  var m = str.match(/,|[a-z]+|\\}|\\]|\\)|>>|\\|+|\\(/);\n\n  return truthy(m) && (m.index === 0) ? m[0] : \"\";\n}\n\nfunction postcommaToken(state) {\n  var objs = state.tokenStack.slice(0,-1);\n  var i = getTokenIndex(objs,\"type\",[\"open_paren\"]);\n\n  return truthy(objs[i]) ? objs[i] : false;\n}\n\nfunction defaultToken(state) {\n  var objs = state.tokenStack;\n  var stop = getTokenIndex(objs,\"type\",[\"open_paren\",\"separator\",\"keyword\"]);\n  var oper = getTokenIndex(objs,\"type\",[\"operator\"]);\n\n  if (truthy(stop) && truthy(oper) && stop < oper) {\n    return objs[stop+1];\n  } else if (truthy(stop)) {\n    return objs[stop];\n  } else {\n    return false;\n  }\n}\n\nfunction getToken(state,tokens) {\n  var objs = state.tokenStack;\n  var i = getTokenIndex(objs,\"token\",tokens);\n\n  return truthy(objs[i]) ? objs[i] : false;\n}\n\nfunction getTokenIndex(objs,propname,propvals) {\n\n  for (var i = objs.length-1; -1 < i ; i--) {\n    if (is_member(objs[i][propname],propvals)) {\n      return i;\n    }\n  }\n  return false;\n}\n\nfunction truthy(x) {\n  return (x !== false) && (x != null);\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// this object defines the mode\n\nexport const erlang = {\n  name: \"erlang\",\n  startState() {\n    return {tokenStack: [],\n            in_string:  false,\n            in_atom:    false};\n  },\n\n  token: tokenizer,\n\n  indent: indenter,\n\n  languageData: {\n    commentTokens: {line: \"%\"}\n  }\n};\n\n"],"names":["typeWords","keywordWords","separatorRE","separatorWords","operatorAtomWords","operatorSymbolRE","operatorSymbolWords","openParenRE","openParenWords","closeParenRE","closeParenWords","guardWords","bifWords","anumRE","escapesRE","nongreedy","stream","re","words","current","length","test","backUp","peek","next","is_member","greedy","doubleQuote","quote","singleQuote","quoteChar","escapeChar","eol","ch","element","list","indexOf","rval","state","type","token","s","last","aToken","column","indentation","tokenStack","pop","push","maybe_drop_post","slice","d","g","i","e","r","m","E","tok","col","ind","typ","indent","peekToken","depth","len","dep","stack","tt","tokens","ss","concat","getToken","objs","getTokenIndex","truthy","propname","propvals","x","erlang","name","startState","in_string","in_atom","eatSpace","match","skipToEnd","eatWhile","w","digitRE","eat","textAfter","cx","stop","oper","t","wordAfter","str","index","currT","prevT","unit","languageData","commentTokens","line"],"sourceRoot":""}