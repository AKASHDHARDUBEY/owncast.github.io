{"version":3,"file":"static/chunks/6692.9944f3ed43584dcf.js","mappings":"mGAAA,SAAAA,EAAAC,CAAA,EACA,oBAAAA,EAAAC,IAAA,gBACA,6CAEA,IAAAC,EAAA,CACA,QACA,cACA,eACA,UACA,eACA,yBACA,mBACA,oCACA,cACA,mBACA,YACA,oBACA,mBACA,cACA,cACA,aACA,uBACA,cACA,cACA,cACA,cACA,CACAC,EAAAJ,EAAAG,GAEAE,EAAA,CACA,0BACA,gCACA,yBACA,UACA,+DACA,6DACA,8BACA,kEACA,qCACA,MACA,OACA,CACAC,EAAAN,EAAAK,GAEAE,EAAA,CACA,sEACA,uEACA,8DACA,wBAEA,2BACA,CACAC,EAAAR,EAAAO,GAEAE,EAAA,CACA,eACA,iBACA,OACA,CACAC,EAAAV,EAAAS,GAGAE,EAAAX,EADA,8CAIAY,EAAAZ,EADA,aAGAa,EAAA,WACAC,EAAA,6CACAC,EAAA,+EACAC,EAAA,4BACAC,EAAA,oCACAC,EAAA,WACAC,EAAA,eACAC,EAAA,UACAC,EAAA,WAqEO,IAAAC,EAAA,CACPC,KAAA,SACAC,WAAA,WACA,OAEAC,UAAA,GAEAC,UAAA,GAEAC,SAAA,GAEAC,OAAA,EACA,CACA,EACAC,MAAA,SAAAC,CAAA,CAAAC,CAAA,EACA,IAAAC,EAAAC,SAlFAH,CAAA,CAAAC,CAAA,EAEA,GAAAD,EAAAI,QAAA,eAGA,GAAAH,EAAAN,SAAA,QACA,EAAAU,KAAA,CAAAd,IACAU,EAAAN,SAAA,IACA,YAEAK,EAAAM,SAAA,GACA,UAFA,CAIA,GAAAN,EAAAK,KAAA,OAEA,OADAL,EAAAM,SAAA,GACA,SACA,CACA,GAAAN,EAAAK,KAAA,CAAAhB,GAAA,gBACA,GAAAW,EAAAK,KAAA,CAAAf,GAEA,OADAW,EAAAN,SAAA,IACA,SACA,CAGA,GAAAK,EAAAK,KAAA,mBACAL,CAAAA,EAAAK,KAAA,CAAArB,IAAAgB,EAAAK,KAAA,CAAApB,EAAA,gBACA,CAGA,GAAAe,EAAAK,KAAA,CAAAjB,GAAA,eAGA,GAAAa,EAAAJ,QAAA,EAAAG,EAAAK,KAAA,CAAAnB,GAAA,YAEA,GAAAe,EAAAH,MAAA,EAAAE,EAAAK,KAAA,CAAAlB,GAEA,OADAc,EAAAH,MAAA,IACA,KACA,CAEA,GAAAE,EAAAK,KAAA,CAAA3B,GAAA,gBAEA,GAAAsB,EAAAK,KAAA,CAAA7B,GAAA,CACA,IAAAoB,EAAAK,EAAAL,SAAA,CACAW,EAAA,CAAAP,EAAAK,KAAA,iCAEA,MAAAT,GAAAA,eAAAA,GACAW,eAAAA,GAAAA,MAAAA,EAEA,UAGA,MACA,CACA,OAEA,EAAAF,KAAA,CAAA/B,GAAA,UACA0B,EAAAK,KAAA,CAAAzB,GAAA,OACAoB,EAAAK,KAAA,CAAAnB,GAAA,WAGAc,EAAAK,KAAA,CAAAtB,GAAA,YAGAiB,EAAAQ,IAAA,GACA,KATA,EA2BAR,EAAAC,GAEA,GAAAC,EAAA,CACA,IAAAO,EAAAT,EAAAU,OAAA,EACAT,CAAAA,EAAAL,SAAA,CAAAa,EACAP,YAAAA,GACAD,EAAAJ,QAAA,CAAAhB,EAAA8B,IAAA,CAAAF,GACAR,EAAAH,MAAA,CAAAG,EAAAH,MAAA,EAAAhB,EAAA6B,IAAA,CAAAF,IAEAR,EAAAJ,QAAA,GAEA,QAEAK,CACA,EAEAU,aAAA,CACAC,aAAAxC,EAAAyC,MAAA,CAAAvC,GAAAuC,MAAA,CAAArC,GAAAqC,MAAA,CAAAnC,EACA,CACA","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/webidl.js","webpack://_N_E/<anon>"],"sourcesContent":["function wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n};\n\nvar builtinArray = [\n  \"Clamp\",\n  \"Constructor\",\n  \"EnforceRange\",\n  \"Exposed\",\n  \"ImplicitThis\",\n  \"Global\", \"PrimaryGlobal\",\n  \"LegacyArrayClass\",\n  \"LegacyUnenumerableNamedProperties\",\n  \"LenientThis\",\n  \"NamedConstructor\",\n  \"NewObject\",\n  \"NoInterfaceObject\",\n  \"OverrideBuiltins\",\n  \"PutForwards\",\n  \"Replaceable\",\n  \"SameObject\",\n  \"TreatNonObjectAsNull\",\n  \"TreatNullAs\",\n    \"EmptyString\",\n  \"Unforgeable\",\n  \"Unscopeable\"\n];\nvar builtins = wordRegexp(builtinArray);\n\nvar typeArray = [\n  \"unsigned\", \"short\", \"long\",                  // UnsignedIntegerType\n  \"unrestricted\", \"float\", \"double\",            // UnrestrictedFloatType\n  \"boolean\", \"byte\", \"octet\",                   // Rest of PrimitiveType\n  \"Promise\",                                    // PromiseType\n  \"ArrayBuffer\", \"DataView\", \"Int8Array\", \"Int16Array\", \"Int32Array\",\n  \"Uint8Array\", \"Uint16Array\", \"Uint32Array\", \"Uint8ClampedArray\",\n  \"Float32Array\", \"Float64Array\",               // BufferRelatedType\n  \"ByteString\", \"DOMString\", \"USVString\", \"sequence\", \"object\", \"RegExp\",\n  \"Error\", \"DOMException\", \"FrozenArray\",       // Rest of NonAnyType\n  \"any\",                                        // Rest of SingleType\n  \"void\"                                        // Rest of ReturnType\n];\nvar types = wordRegexp(typeArray);\n\nvar keywordArray = [\n  \"attribute\", \"callback\", \"const\", \"deleter\", \"dictionary\", \"enum\", \"getter\",\n  \"implements\", \"inherit\", \"interface\", \"iterable\", \"legacycaller\", \"maplike\",\n  \"partial\", \"required\", \"serializer\", \"setlike\", \"setter\", \"static\",\n  \"stringifier\", \"typedef\",                     // ArgumentNameKeyword except\n                                                // \"unrestricted\"\n  \"optional\", \"readonly\", \"or\"\n];\nvar keywords = wordRegexp(keywordArray);\n\nvar atomArray = [\n  \"true\", \"false\",                              // BooleanLiteral\n  \"Infinity\", \"NaN\",                            // FloatLiteral\n  \"null\"                                        // Rest of ConstValue\n];\nvar atoms = wordRegexp(atomArray);\n\nvar startDefArray = [\"callback\", \"dictionary\", \"enum\", \"interface\"];\nvar startDefs = wordRegexp(startDefArray);\n\nvar endDefArray = [\"typedef\"];\nvar endDefs = wordRegexp(endDefArray);\n\nvar singleOperators = /^[:<=>?]/;\nvar integers = /^-?([1-9][0-9]*|0[Xx][0-9A-Fa-f]+|0[0-7]*)/;\nvar floats = /^-?(([0-9]+\\.[0-9]*|[0-9]*\\.[0-9]+)([Ee][+-]?[0-9]+)?|[0-9]+[Ee][+-]?[0-9]+)/;\nvar identifiers = /^_?[A-Za-z][0-9A-Z_a-z-]*/;\nvar identifiersEnd = /^_?[A-Za-z][0-9A-Z_a-z-]*(?=\\s*;)/;\nvar strings = /^\"[^\"]*\"/;\nvar multilineComments = /^\\/\\*.*?\\*\\//;\nvar multilineCommentsStart = /^\\/\\*.*/;\nvar multilineCommentsEnd = /^.*?\\*\\//;\n\nfunction readToken(stream, state) {\n  // whitespace\n  if (stream.eatSpace()) return null;\n\n  // comment\n  if (state.inComment) {\n    if (stream.match(multilineCommentsEnd)) {\n      state.inComment = false;\n      return \"comment\";\n    }\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  if (stream.match(\"//\")) {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  if (stream.match(multilineComments)) return \"comment\";\n  if (stream.match(multilineCommentsStart)) {\n    state.inComment = true;\n    return \"comment\";\n  }\n\n  // integer and float\n  if (stream.match(/^-?[0-9\\.]/, false)) {\n    if (stream.match(integers) || stream.match(floats)) return \"number\";\n  }\n\n  // string\n  if (stream.match(strings)) return \"string\";\n\n  // identifier\n  if (state.startDef && stream.match(identifiers)) return \"def\";\n\n  if (state.endDef && stream.match(identifiersEnd)) {\n    state.endDef = false;\n    return \"def\";\n  }\n\n  if (stream.match(keywords)) return \"keyword\";\n\n  if (stream.match(types)) {\n    var lastToken = state.lastToken;\n    var nextToken = (stream.match(/^\\s*(.+?)\\b/, false) || [])[1];\n\n    if (lastToken === \":\" || lastToken === \"implements\" ||\n        nextToken === \"implements\" || nextToken === \"=\") {\n      // Used as identifier\n      return \"builtin\";\n    } else {\n      // Used as type\n      return \"type\";\n    }\n  }\n\n  if (stream.match(builtins)) return \"builtin\";\n  if (stream.match(atoms)) return \"atom\";\n  if (stream.match(identifiers)) return \"variable\";\n\n  // other\n  if (stream.match(singleOperators)) return \"operator\";\n\n  // unrecognized\n  stream.next();\n  return null;\n};\n\nexport const webIDL = {\n  name: \"webidl\",\n  startState: function() {\n    return {\n      // Is in multiline comment\n      inComment: false,\n      // Last non-whitespace, matched token\n      lastToken: \"\",\n      // Next token is a definition\n      startDef: false,\n      // Last token of the statement is a definition\n      endDef: false\n    };\n  },\n  token: function(stream, state) {\n    var style = readToken(stream, state);\n\n    if (style) {\n      var cur = stream.current();\n      state.lastToken = cur;\n      if (style === \"keyword\") {\n        state.startDef = startDefs.test(cur);\n        state.endDef = state.endDef || endDefs.test(cur);\n      } else {\n        state.startDef = false;\n      }\n    }\n\n    return style;\n  },\n\n  languageData: {\n    autocomplete: builtinArray.concat(typeArray).concat(keywordArray).concat(atomArray)\n  }\n};\n"],"names":["wordRegexp","words","join","builtinArray","builtins","typeArray","types","keywordArray","keywords","atomArray","atoms","startDefs","endDefs","singleOperators","integers","floats","identifiers","identifiersEnd","strings","multilineComments","multilineCommentsStart","multilineCommentsEnd","webIDL","name","startState","inComment","lastToken","startDef","endDef","token","stream","state","style","readToken","eatSpace","match","skipToEnd","nextToken","next","cur","current","test","languageData","autocomplete","concat"],"sourceRoot":""}