{"version":3,"file":"static/chunks/2040.6a27bf7f0309af22.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/ebnf.js","webpack://_N_E/<anon>"],"sourcesContent":["var commentType = {slash: 0, parenthesis: 1};\nvar stateType = {comment: 0, _string: 1, characterClass: 2};\n\nexport const ebnf = {\n  name: \"ebnf\",\n  startState: function () {\n    return {\n      stringType: null,\n      commentType: null,\n      braced: 0,\n      lhs: true,\n      localState: null,\n      stack: [],\n      inDefinition: false\n    };\n  },\n  token: function (stream, state) {\n    if (!stream) return;\n\n    //check for state changes\n    if (state.stack.length === 0) {\n      //strings\n      if ((stream.peek() == '\"') || (stream.peek() == \"'\")) {\n        state.stringType = stream.peek();\n        stream.next(); // Skip quote\n        state.stack.unshift(stateType._string);\n      } else if (stream.match('/*')) { //comments starting with /*\n        state.stack.unshift(stateType.comment);\n        state.commentType = commentType.slash;\n      } else if (stream.match('(*')) { //comments starting with (*\n        state.stack.unshift(stateType.comment);\n        state.commentType = commentType.parenthesis;\n      }\n    }\n\n    //return state\n    //stack has\n    switch (state.stack[0]) {\n    case stateType._string:\n      while (state.stack[0] === stateType._string && !stream.eol()) {\n        if (stream.peek() === state.stringType) {\n          stream.next(); // Skip quote\n          state.stack.shift(); // Clear flag\n        } else if (stream.peek() === \"\\\\\") {\n          stream.next();\n          stream.next();\n        } else {\n          stream.match(/^.[^\\\\\\\"\\']*/);\n        }\n      }\n      return state.lhs ? \"property\" : \"string\"; // Token style\n\n    case stateType.comment:\n      while (state.stack[0] === stateType.comment && !stream.eol()) {\n        if (state.commentType === commentType.slash && stream.match('*/')) {\n          state.stack.shift(); // Clear flag\n          state.commentType = null;\n        } else if (state.commentType === commentType.parenthesis && stream.match('*)')) {\n          state.stack.shift(); // Clear flag\n          state.commentType = null;\n        } else {\n          stream.match(/^.[^\\*]*/);\n        }\n      }\n      return \"comment\";\n\n    case stateType.characterClass:\n      while (state.stack[0] === stateType.characterClass && !stream.eol()) {\n        if (!(stream.match(/^[^\\]\\\\]+/) || stream.match('.'))) {\n          state.stack.shift();\n        }\n      }\n      return \"operator\";\n    }\n\n    var peek = stream.peek();\n\n    //no stack\n    switch (peek) {\n    case \"[\":\n      stream.next();\n      state.stack.unshift(stateType.characterClass);\n      return \"bracket\";\n    case \":\":\n    case \"|\":\n    case \";\":\n      stream.next();\n      return \"operator\";\n    case \"%\":\n      if (stream.match(\"%%\")) {\n        return \"header\";\n      } else if (stream.match(/[%][A-Za-z]+/)) {\n        return \"keyword\";\n      } else if (stream.match(/[%][}]/)) {\n        return \"bracket\";\n      }\n      break;\n    case \"/\":\n      if (stream.match(/[\\/][A-Za-z]+/)) {\n        return \"keyword\";\n      }\n    case \"\\\\\":\n      if (stream.match(/[\\][a-z]+/)) {\n        return \"string.special\";\n      }\n    case \".\":\n      if (stream.match(\".\")) {\n        return \"atom\";\n      }\n    case \"*\":\n    case \"-\":\n    case \"+\":\n    case \"^\":\n      if (stream.match(peek)) {\n        return \"atom\";\n      }\n    case \"$\":\n      if (stream.match(\"$$\")) {\n        return \"builtin\";\n      } else if (stream.match(/[$][0-9]+/)) {\n        return \"variableName.special\";\n      }\n    case \"<\":\n      if (stream.match(/<<[a-zA-Z_]+>>/)) {\n        return \"builtin\";\n      }\n    }\n\n    if (stream.match('//')) {\n      stream.skipToEnd();\n      return \"comment\";\n    } else if (stream.match('return')) {\n      return \"operator\";\n    } else if (stream.match(/^[a-zA-Z_][a-zA-Z0-9_]*/)) {\n      if (stream.match(/(?=[\\(.])/)) {\n        return \"variable\";\n      } else if (stream.match(/(?=[\\s\\n]*[:=])/)) {\n        return \"def\";\n      }\n      return \"variableName.special\";\n    } else if ([\"[\", \"]\", \"(\", \")\"].indexOf(stream.peek()) != -1) {\n      stream.next();\n      return \"bracket\";\n    } else if (!stream.eatSpace()) {\n      stream.next();\n    }\n    return null;\n  }\n};\n"],"names":["commentType","slash","parenthesis","stateType","comment","_string","characterClass","ebnf","name","startState","stringType","braced","lhs","localState","stack","inDefinition","token","stream","state","length","peek","next","unshift","match","eol","shift","skipToEnd","indexOf","eatSpace"],"sourceRoot":""}