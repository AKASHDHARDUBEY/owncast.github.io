{"version":3,"file":"static/chunks/5815.262081945a79cf09.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/turtle.js","webpack://_N_E/<anon>"],"sourcesContent":["var curPunc;\n\nfunction wordRegexp(words) {\n  return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n}\nvar ops = wordRegexp([]);\nvar keywords = wordRegexp([\"@prefix\", \"@base\", \"a\"]);\nvar operatorChars = /[*+\\-<>=&|]/;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  curPunc = null;\n  if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n    stream.match(/^[^\\s\\u00a0>]*>?/);\n    return \"atom\";\n  }\n  else if (ch == \"\\\"\" || ch == \"'\") {\n    state.tokenize = tokenLiteral(ch);\n    return state.tokenize(stream, state);\n  }\n  else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n    curPunc = ch;\n    return null;\n  }\n  else if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  else if (operatorChars.test(ch)) {\n    stream.eatWhile(operatorChars);\n    return null;\n  }\n  else if (ch == \":\") {\n    return \"operator\";\n  } else {\n    stream.eatWhile(/[_\\w\\d]/);\n    if(stream.peek() == \":\") {\n      return \"variableName.special\";\n    } else {\n      var word = stream.current();\n\n      if(keywords.test(word)) {\n        return \"meta\";\n      }\n\n      if(ch >= \"A\" && ch <= \"Z\") {\n        return \"comment\";\n      } else {\n        return \"keyword\";\n      }\n    }\n    var word = stream.current();\n    if (ops.test(word))\n      return null;\n    else if (keywords.test(word))\n      return \"meta\";\n    else\n      return \"variable\";\n  }\n}\n\nfunction tokenLiteral(quote) {\n  return function(stream, state) {\n    var escaped = false, ch;\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && !escaped) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && ch == \"\\\\\";\n    }\n    return \"string\";\n  };\n}\n\nfunction pushContext(state, type, col) {\n  state.context = {prev: state.context, indent: state.indent, col: col, type: type};\n}\nfunction popContext(state) {\n  state.indent = state.context.indent;\n  state.context = state.context.prev;\n}\n\nexport const turtle = {\n  name: \"turtle\",\n  startState: function() {\n    return {tokenize: tokenBase,\n            context: null,\n            indent: 0,\n            col: 0};\n  },\n\n  token: function(stream, state) {\n    if (stream.sol()) {\n      if (state.context && state.context.align == null) state.context.align = false;\n      state.indent = stream.indentation();\n    }\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n\n    if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n      state.context.align = true;\n    }\n\n    if (curPunc == \"(\") pushContext(state, \")\", stream.column());\n    else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());\n    else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());\n    else if (/[\\]\\}\\)]/.test(curPunc)) {\n      while (state.context && state.context.type == \"pattern\") popContext(state);\n      if (state.context && curPunc == state.context.type) popContext(state);\n    }\n    else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);\n    else if (/atom|string|variable/.test(style) && state.context) {\n      if (/[\\}\\]]/.test(state.context.type))\n        pushContext(state, \"pattern\", stream.column());\n      else if (state.context.type == \"pattern\" && !state.context.align) {\n        state.context.align = true;\n        state.context.col = stream.column();\n      }\n    }\n\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    var firstChar = textAfter && textAfter.charAt(0);\n    var context = state.context;\n    if (/[\\]\\}]/.test(firstChar))\n      while (context && context.type == \"pattern\") context = context.prev;\n\n    var closing = context && firstChar == context.type;\n    if (!context)\n      return 0;\n    else if (context.type == \"pattern\")\n      return context.col;\n    else if (context.align)\n      return context.col + (closing ? 0 : 1);\n    else\n      return context.indent + (closing ? 0 : cx.unit);\n  },\n\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n};\n"],"names":["wordRegexp","words","join","curPunc","keywords","operatorChars","tokenBase","stream","state","word","ch","next","match","tokenize","escaped","test","skipToEnd","eatWhile","peek","current","pushContext","type","col","context","prev","indent","popContext","turtle","name","startState","token","sol","align","indentation","eatSpace","style","column","textAfter","cx","firstChar","charAt","closing","unit","languageData","commentTokens","line"],"sourceRoot":""}