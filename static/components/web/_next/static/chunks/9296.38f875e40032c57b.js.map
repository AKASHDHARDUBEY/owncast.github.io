{"version":3,"file":"static/chunks/9296.38f875e40032c57b.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/javascript.js","webpack://_N_E/<anon>"],"sourcesContent":["function mkJavaScript(parserConfig) {\n  var statementIndent = parserConfig.statementIndent;\n  var jsonldMode = parserConfig.jsonld;\n  var jsonMode = parserConfig.json || jsonldMode;\n  var isTS = parserConfig.typescript;\n  var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/;\n\n  // Tokenizer\n\n  var keywords = function(){\n    function kw(type) {return {type: type, style: \"keyword\"};}\n    var A = kw(\"keyword a\"), B = kw(\"keyword b\"), C = kw(\"keyword c\"), D = kw(\"keyword d\");\n    var operator = kw(\"operator\"), atom = {type: \"atom\", style: \"atom\"};\n\n    return {\n      \"if\": kw(\"if\"), \"while\": A, \"with\": A, \"else\": B, \"do\": B, \"try\": B, \"finally\": B,\n      \"return\": D, \"break\": D, \"continue\": D, \"new\": kw(\"new\"), \"delete\": C, \"void\": C, \"throw\": C,\n      \"debugger\": kw(\"debugger\"), \"var\": kw(\"var\"), \"const\": kw(\"var\"), \"let\": kw(\"var\"),\n      \"function\": kw(\"function\"), \"catch\": kw(\"catch\"),\n      \"for\": kw(\"for\"), \"switch\": kw(\"switch\"), \"case\": kw(\"case\"), \"default\": kw(\"default\"),\n      \"in\": operator, \"typeof\": operator, \"instanceof\": operator,\n      \"true\": atom, \"false\": atom, \"null\": atom, \"undefined\": atom, \"NaN\": atom, \"Infinity\": atom,\n      \"this\": kw(\"this\"), \"class\": kw(\"class\"), \"super\": kw(\"atom\"),\n      \"yield\": C, \"export\": kw(\"export\"), \"import\": kw(\"import\"), \"extends\": C,\n      \"await\": C\n    };\n  }();\n\n  var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n  var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n\n  function readRegexp(stream) {\n    var escaped = false, next, inSet = false;\n    while ((next = stream.next()) != null) {\n      if (!escaped) {\n        if (next == \"/\" && !inSet) return;\n        if (next == \"[\") inSet = true;\n        else if (inSet && next == \"]\") inSet = false;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n  }\n\n  // Used as scratch variables to communicate multiple values without\n  // consing up tons of objects.\n  var type, content;\n  function ret(tp, style, cont) {\n    type = tp; content = cont;\n    return style;\n  }\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    } else if (ch == \".\" && stream.match(/^\\d[\\d_]*(?:[eE][+\\-]?[\\d_]+)?/)) {\n      return ret(\"number\", \"number\");\n    } else if (ch == \".\" && stream.match(\"..\")) {\n      return ret(\"spread\", \"meta\");\n    } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      return ret(ch);\n    } else if (ch == \"=\" && stream.eat(\">\")) {\n      return ret(\"=>\", \"operator\");\n    } else if (ch == \"0\" && stream.match(/^(?:x[\\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {\n      return ret(\"number\", \"number\");\n    } else if (/\\d/.test(ch)) {\n      stream.match(/^[\\d_]*(?:n|(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)?/);\n      return ret(\"number\", \"number\");\n    } else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      } else if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else if (expressionAllowed(stream, state, 1)) {\n        readRegexp(stream);\n        stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n        return ret(\"regexp\", \"string.special\");\n      } else {\n        stream.eat(\"=\");\n        return ret(\"operator\", \"operator\", stream.current());\n      }\n    } else if (ch == \"`\") {\n      state.tokenize = tokenQuasi;\n      return tokenQuasi(stream, state);\n    } else if (ch == \"#\" && stream.peek() == \"!\") {\n      stream.skipToEnd();\n      return ret(\"meta\", \"meta\");\n    } else if (ch == \"#\" && stream.eatWhile(wordRE)) {\n      return ret(\"variable\", \"property\")\n    } else if (ch == \"<\" && stream.match(\"!--\") ||\n               (ch == \"-\" && stream.match(\"->\") && !/\\S/.test(stream.string.slice(0, stream.start)))) {\n      stream.skipToEnd()\n      return ret(\"comment\", \"comment\")\n    } else if (isOperatorChar.test(ch)) {\n      if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n        if (stream.eat(\"=\")) {\n          if (ch == \"!\" || ch == \"=\") stream.eat(\"=\")\n        } else if (/[<>*+\\-|&?]/.test(ch)) {\n          stream.eat(ch)\n          if (ch == \">\") stream.eat(ch)\n        }\n      }\n      if (ch == \"?\" && stream.eat(\".\")) return ret(\".\")\n      return ret(\"operator\", \"operator\", stream.current());\n    } else if (wordRE.test(ch)) {\n      stream.eatWhile(wordRE);\n      var word = stream.current()\n      if (state.lastType != \".\") {\n        if (keywords.propertyIsEnumerable(word)) {\n          var kw = keywords[word]\n          return ret(kw.type, kw.style, word)\n        }\n        if (word == \"async\" && stream.match(/^(\\s|\\/\\*([^*]|\\*(?!\\/))*?\\*\\/)*[\\[\\(\\w]/, false))\n          return ret(\"async\", \"keyword\", word)\n      }\n      return ret(\"variable\", \"variable\", word)\n    }\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next;\n      if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)){\n        state.tokenize = tokenBase;\n        return ret(\"jsonld-keyword\", \"meta\");\n      }\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) break;\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (!escaped) state.tokenize = tokenBase;\n      return ret(\"string\", \"string\");\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return ret(\"comment\", \"comment\");\n  }\n\n  function tokenQuasi(stream, state) {\n    var escaped = false, next;\n    while ((next = stream.next()) != null) {\n      if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    return ret(\"quasi\", \"string.special\", stream.current());\n  }\n\n  var brackets = \"([{}])\";\n  // This is a crude lookahead trick to try and notice that we're\n  // parsing the argument patterns for a fat-arrow function before we\n  // actually hit the arrow token. It only works if the arrow is on\n  // the same line as the arguments and there's no strange noise\n  // (comments) in between. Fallback is to only notice when we hit the\n  // arrow, and not declare the arguments as locals for the arrow\n  // body.\n  function findFatArrow(stream, state) {\n    if (state.fatArrowAt) state.fatArrowAt = null;\n    var arrow = stream.string.indexOf(\"=>\", stream.start);\n    if (arrow < 0) return;\n\n    if (isTS) { // Try to skip TypeScript return type declarations after the arguments\n      var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow))\n      if (m) arrow = m.index\n    }\n\n    var depth = 0, sawSomething = false;\n    for (var pos = arrow - 1; pos >= 0; --pos) {\n      var ch = stream.string.charAt(pos);\n      var bracket = brackets.indexOf(ch);\n      if (bracket >= 0 && bracket < 3) {\n        if (!depth) { ++pos; break; }\n        if (--depth == 0) { if (ch == \"(\") sawSomething = true; break; }\n      } else if (bracket >= 3 && bracket < 6) {\n        ++depth;\n      } else if (wordRE.test(ch)) {\n        sawSomething = true;\n      } else if (/[\"'\\/`]/.test(ch)) {\n        for (;; --pos) {\n          if (pos == 0) return\n          var next = stream.string.charAt(pos - 1)\n          if (next == ch && stream.string.charAt(pos - 2) != \"\\\\\") { pos--; break }\n        }\n      } else if (sawSomething && !depth) {\n        ++pos;\n        break;\n      }\n    }\n    if (sawSomething && !depth) state.fatArrowAt = pos;\n  }\n\n  // Parser\n\n  var atomicTypes = {\"atom\": true, \"number\": true, \"variable\": true, \"string\": true,\n                     \"regexp\": true, \"this\": true, \"import\": true, \"jsonld-keyword\": true};\n\n  function JSLexical(indented, column, type, align, prev, info) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.prev = prev;\n    this.info = info;\n    if (align != null) this.align = align;\n  }\n\n  function inScope(state, varname) {\n    for (var v = state.localVars; v; v = v.next)\n      if (v.name == varname) return true;\n    for (var cx = state.context; cx; cx = cx.prev) {\n      for (var v = cx.vars; v; v = v.next)\n        if (v.name == varname) return true;\n    }\n  }\n\n  function parseJS(state, style, type, content, stream) {\n    var cc = state.cc;\n    // Communicate our context to the combinators.\n    // (Less wasteful than consing up a hundred closures on every call.)\n    cx.state = state; cx.stream = stream; cx.marked = null; cx.cc = cc; cx.style = style;\n\n    if (!state.lexical.hasOwnProperty(\"align\"))\n      state.lexical.align = true;\n\n    while(true) {\n      var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n      if (combinator(type, content)) {\n        while(cc.length && cc[cc.length - 1].lex)\n          cc.pop()();\n        if (cx.marked) return cx.marked;\n        if (type == \"variable\" && inScope(state, content)) return \"variableName.local\";\n        return style;\n      }\n    }\n  }\n\n  // Combinator utils\n\n  var cx = {state: null, column: null, marked: null, cc: null};\n  function pass() {\n    for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);\n  }\n  function cont() {\n    pass.apply(null, arguments);\n    return true;\n  }\n  function inList(name, list) {\n    for (var v = list; v; v = v.next) if (v.name == name) return true\n    return false;\n  }\n  function register(varname) {\n    var state = cx.state;\n    cx.marked = \"def\";\n    if (state.context) {\n      if (state.lexical.info == \"var\" && state.context && state.context.block) {\n        // FIXME function decls are also not block scoped\n        var newContext = registerVarScoped(varname, state.context)\n        if (newContext != null) {\n          state.context = newContext\n          return\n        }\n      } else if (!inList(varname, state.localVars)) {\n        state.localVars = new Var(varname, state.localVars)\n        return\n      }\n    }\n    // Fall through means this is global\n    if (parserConfig.globalVars && !inList(varname, state.globalVars))\n      state.globalVars = new Var(varname, state.globalVars)\n  }\n  function registerVarScoped(varname, context) {\n    if (!context) {\n      return null\n    } else if (context.block) {\n      var inner = registerVarScoped(varname, context.prev)\n      if (!inner) return null\n      if (inner == context.prev) return context\n      return new Context(inner, context.vars, true)\n    } else if (inList(varname, context.vars)) {\n      return context\n    } else {\n      return new Context(context.prev, new Var(varname, context.vars), false)\n    }\n  }\n\n  function isModifier(name) {\n    return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\"\n  }\n\n  // Combinators\n\n  function Context(prev, vars, block) { this.prev = prev; this.vars = vars; this.block = block }\n  function Var(name, next) { this.name = name; this.next = next }\n\n  var defaultVars = new Var(\"this\", new Var(\"arguments\", null))\n  function pushcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, false)\n    cx.state.localVars = defaultVars\n  }\n  function pushblockcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, true)\n    cx.state.localVars = null\n  }\n  pushcontext.lex = pushblockcontext.lex = true\n  function popcontext() {\n    cx.state.localVars = cx.state.context.vars\n    cx.state.context = cx.state.context.prev\n  }\n  popcontext.lex = true\n  function pushlex(type, info) {\n    var result = function() {\n      var state = cx.state, indent = state.indented;\n      if (state.lexical.type == \"stat\") indent = state.lexical.indented;\n      else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev)\n        indent = outer.indented;\n      state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\n    };\n    result.lex = true;\n    return result;\n  }\n  function poplex() {\n    var state = cx.state;\n    if (state.lexical.prev) {\n      if (state.lexical.type == \")\")\n        state.indented = state.lexical.indented;\n      state.lexical = state.lexical.prev;\n    }\n  }\n  poplex.lex = true;\n\n  function expect(wanted) {\n    function exp(type) {\n      if (type == wanted) return cont();\n      else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();\n      else return cont(exp);\n    };\n    return exp;\n  }\n\n  function statement(type, value) {\n    if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\n    if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n    if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n    if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n    if (type == \"debugger\") return cont(expect(\";\"));\n    if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\n    if (type == \";\") return cont();\n    if (type == \"if\") {\n      if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex)\n        cx.state.cc.pop()();\n      return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n    }\n    if (type == \"function\") return cont(functiondef);\n    if (type == \"for\") return cont(pushlex(\"form\"), pushblockcontext, forspec, statement, popcontext, poplex);\n    if (type == \"class\" || (isTS && value == \"interface\")) {\n      cx.marked = \"keyword\"\n      return cont(pushlex(\"form\", type == \"class\" ? type : value), className, poplex)\n    }\n    if (type == \"variable\") {\n      if (isTS && value == \"declare\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n        cx.marked = \"keyword\"\n        if (value == \"enum\") return cont(enumdef);\n        else if (value == \"type\") return cont(typename, expect(\"operator\"), typeexpr, expect(\";\"));\n        else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex)\n      } else if (isTS && value == \"namespace\") {\n        cx.marked = \"keyword\"\n        return cont(pushlex(\"form\"), expression, statement, poplex)\n      } else if (isTS && value == \"abstract\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else {\n        return cont(pushlex(\"stat\"), maybelabel);\n      }\n    }\n    if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext,\n                                      block, poplex, poplex, popcontext);\n    if (type == \"case\") return cont(expression, expect(\":\"));\n    if (type == \"default\") return cont(expect(\":\"));\n    if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n    if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\n    if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\n    if (type == \"async\") return cont(statement)\n    if (value == \"@\") return cont(expression, statement)\n    return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n  }\n  function maybeCatchBinding(type) {\n    if (type == \"(\") return cont(funarg, expect(\")\"))\n  }\n  function expression(type, value) {\n    return expressionInner(type, value, false);\n  }\n  function expressionNoComma(type, value) {\n    return expressionInner(type, value, true);\n  }\n  function parenExpr(type) {\n    if (type != \"(\") return pass()\n    return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex)\n  }\n  function expressionInner(type, value, noComma) {\n    if (cx.state.fatArrowAt == cx.stream.start) {\n      var body = noComma ? arrowBodyNoComma : arrowBody;\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);\n      else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n    }\n\n    var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n    if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\n    if (type == \"function\") return cont(functiondef, maybeop);\n    if (type == \"class\" || (isTS && value == \"interface\")) { cx.marked = \"keyword\"; return cont(pushlex(\"form\"), classExpression, poplex); }\n    if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n    if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n    if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\n    if (type == \"quasi\") return pass(quasi, maybeop);\n    if (type == \"new\") return cont(maybeTarget(noComma));\n    return cont();\n  }\n  function maybeexpression(type) {\n    if (type.match(/[;\\}\\)\\],]/)) return pass();\n    return pass(expression);\n  }\n\n  function maybeoperatorComma(type, value) {\n    if (type == \",\") return cont(maybeexpression);\n    return maybeoperatorNoComma(type, value, false);\n  }\n  function maybeoperatorNoComma(type, value, noComma) {\n    var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n    var expr = noComma == false ? expression : expressionNoComma;\n    if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n    if (type == \"operator\") {\n      if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\n      if (isTS && value == \"<\" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\\s*\\(/, false))\n        return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n      if (value == \"?\") return cont(expression, expect(\":\"), expr);\n      return cont(expr);\n    }\n    if (type == \"quasi\") { return pass(quasi, me); }\n    if (type == \";\") return;\n    if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\n    if (type == \".\") return cont(property, me);\n    if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n    if (isTS && value == \"as\") { cx.marked = \"keyword\"; return cont(typeexpr, me) }\n    if (type == \"regexp\") {\n      cx.state.lastType = cx.marked = \"operator\"\n      cx.stream.backUp(cx.stream.pos - cx.stream.start - 1)\n      return cont(expr)\n    }\n  }\n  function quasi(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasi);\n    return cont(maybeexpression, continueQuasi);\n  }\n  function continueQuasi(type) {\n    if (type == \"}\") {\n      cx.marked = \"string.special\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasi);\n    }\n  }\n  function arrowBody(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expression);\n  }\n  function arrowBodyNoComma(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expressionNoComma);\n  }\n  function maybeTarget(noComma) {\n    return function(type) {\n      if (type == \".\") return cont(noComma ? targetNoComma : target);\n      else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma)\n      else return pass(noComma ? expressionNoComma : expression);\n    };\n  }\n  function target(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorComma); }\n  }\n  function targetNoComma(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorNoComma); }\n  }\n  function maybelabel(type) {\n    if (type == \":\") return cont(poplex, statement);\n    return pass(maybeoperatorComma, expect(\";\"), poplex);\n  }\n  function property(type) {\n    if (type == \"variable\") {cx.marked = \"property\"; return cont();}\n  }\n  function objprop(type, value) {\n    if (type == \"async\") {\n      cx.marked = \"property\";\n      return cont(objprop);\n    } else if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      if (value == \"get\" || value == \"set\") return cont(getterSetter);\n      var m // Work around fat-arrow-detection complication for detecting typescript typed arrow params\n      if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false)))\n        cx.state.fatArrowAt = cx.stream.pos + m[0].length\n      return cont(afterprop);\n    } else if (type == \"number\" || type == \"string\") {\n      cx.marked = jsonldMode ? \"property\" : (cx.style + \" property\");\n      return cont(afterprop);\n    } else if (type == \"jsonld-keyword\") {\n      return cont(afterprop);\n    } else if (isTS && isModifier(value)) {\n      cx.marked = \"keyword\"\n      return cont(objprop)\n    } else if (type == \"[\") {\n      return cont(expression, maybetype, expect(\"]\"), afterprop);\n    } else if (type == \"spread\") {\n      return cont(expressionNoComma, afterprop);\n    } else if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(objprop);\n    } else if (type == \":\") {\n      return pass(afterprop)\n    }\n  }\n  function getterSetter(type) {\n    if (type != \"variable\") return pass(afterprop);\n    cx.marked = \"property\";\n    return cont(functiondef);\n  }\n  function afterprop(type) {\n    if (type == \":\") return cont(expressionNoComma);\n    if (type == \"(\") return pass(functiondef);\n  }\n  function commasep(what, end, sep) {\n    function proceed(type, value) {\n      if (sep ? sep.indexOf(type) > -1 : type == \",\") {\n        var lex = cx.state.lexical;\n        if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\n        return cont(function(type, value) {\n          if (type == end || value == end) return pass()\n          return pass(what)\n        }, proceed);\n      }\n      if (type == end || value == end) return cont();\n      if (sep && sep.indexOf(\";\") > -1) return pass(what)\n      return cont(expect(end));\n    }\n    return function(type, value) {\n      if (type == end || value == end) return cont();\n      return pass(what, proceed);\n    };\n  }\n  function contCommasep(what, end, info) {\n    for (var i = 3; i < arguments.length; i++)\n      cx.cc.push(arguments[i]);\n    return cont(pushlex(end, info), commasep(what, end), poplex);\n  }\n  function block(type) {\n    if (type == \"}\") return cont();\n    return pass(statement, block);\n  }\n  function maybetype(type, value) {\n    if (isTS) {\n      if (type == \":\") return cont(typeexpr);\n      if (value == \"?\") return cont(maybetype);\n    }\n  }\n  function maybetypeOrIn(type, value) {\n    if (isTS && (type == \":\" || value == \"in\")) return cont(typeexpr)\n  }\n  function mayberettype(type) {\n    if (isTS && type == \":\") {\n      if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr)\n      else return cont(typeexpr)\n    }\n  }\n  function isKW(_, value) {\n    if (value == \"is\") {\n      cx.marked = \"keyword\"\n      return cont()\n    }\n  }\n  function typeexpr(type, value) {\n    if (value == \"keyof\" || value == \"typeof\" || value == \"infer\" || value == \"readonly\") {\n      cx.marked = \"keyword\"\n      return cont(value == \"typeof\" ? expressionNoComma : typeexpr)\n    }\n    if (type == \"variable\" || value == \"void\") {\n      cx.marked = \"type\"\n      return cont(afterType)\n    }\n    if (value == \"|\" || value == \"&\") return cont(typeexpr)\n    if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\n    if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType)\n    if (type == \"{\") return cont(pushlex(\"}\"), typeprops, poplex, afterType)\n    if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType, afterType)\n    if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr)\n    if (type == \"quasi\") return pass(quasiType, afterType)\n  }\n  function maybeReturnType(type) {\n    if (type == \"=>\") return cont(typeexpr)\n  }\n  function typeprops(type) {\n    if (type.match(/[\\}\\)\\]]/)) return cont()\n    if (type == \",\" || type == \";\") return cont(typeprops)\n    return pass(typeprop, typeprops)\n  }\n  function typeprop(type, value) {\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\"\n      return cont(typeprop)\n    } else if (value == \"?\" || type == \"number\" || type == \"string\") {\n      return cont(typeprop)\n    } else if (type == \":\") {\n      return cont(typeexpr)\n    } else if (type == \"[\") {\n      return cont(expect(\"variable\"), maybetypeOrIn, expect(\"]\"), typeprop)\n    } else if (type == \"(\") {\n      return pass(functiondecl, typeprop)\n    } else if (!type.match(/[;\\}\\)\\],]/)) {\n      return cont()\n    }\n  }\n  function quasiType(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasiType);\n    return cont(typeexpr, continueQuasiType);\n  }\n  function continueQuasiType(type) {\n   if (type == \"}\") {\n      cx.marked = \"string-2\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasiType);\n    }\n  }\n  function typearg(type, value) {\n    if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg)\n    if (type == \":\") return cont(typeexpr)\n    if (type == \"spread\") return cont(typearg)\n    return pass(typeexpr)\n  }\n  function afterType(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n    if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr)\n    if (type == \"[\") return cont(typeexpr, expect(\"]\"), afterType)\n    if (value == \"extends\" || value == \"implements\") { cx.marked = \"keyword\"; return cont(typeexpr) }\n    if (value == \"?\") return cont(typeexpr, expect(\":\"), typeexpr)\n  }\n  function maybeTypeArgs(_, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n  }\n  function typeparam() {\n    return pass(typeexpr, maybeTypeDefault)\n  }\n  function maybeTypeDefault(_, value) {\n    if (value == \"=\") return cont(typeexpr)\n  }\n  function vardef(_, value) {\n    if (value == \"enum\") {cx.marked = \"keyword\"; return cont(enumdef)}\n    return pass(pattern, maybetype, maybeAssign, vardefCont);\n  }\n  function pattern(type, value) {\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(pattern) }\n    if (type == \"variable\") { register(value); return cont(); }\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"[\") return contCommasep(eltpattern, \"]\");\n    if (type == \"{\") return contCommasep(proppattern, \"}\");\n  }\n  function proppattern(type, value) {\n    if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n      register(value);\n      return cont(maybeAssign);\n    }\n    if (type == \"variable\") cx.marked = \"property\";\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"}\") return pass();\n    if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\n    return cont(expect(\":\"), pattern, maybeAssign);\n  }\n  function eltpattern() {\n    return pass(pattern, maybeAssign)\n  }\n  function maybeAssign(_type, value) {\n    if (value == \"=\") return cont(expressionNoComma);\n  }\n  function vardefCont(type) {\n    if (type == \",\") return cont(vardef);\n  }\n  function maybeelse(type, value) {\n    if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\n  }\n  function forspec(type, value) {\n    if (value == \"await\") return cont(forspec);\n    if (type == \"(\") return cont(pushlex(\")\"), forspec1, poplex);\n  }\n  function forspec1(type) {\n    if (type == \"var\") return cont(vardef, forspec2);\n    if (type == \"variable\") return cont(forspec2);\n    return pass(forspec2)\n  }\n  function forspec2(type, value) {\n    if (type == \")\") return cont()\n    if (type == \";\") return cont(forspec2)\n    if (value == \"in\" || value == \"of\") { cx.marked = \"keyword\"; return cont(expression, forspec2) }\n    return pass(expression, forspec2)\n  }\n  function functiondef(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondef);}\n    if (type == \"variable\") {register(value); return cont(functiondef);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef)\n  }\n  function functiondecl(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondecl);}\n    if (type == \"variable\") {register(value); return cont(functiondecl);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondecl)\n  }\n  function typename(type, value) {\n    if (type == \"keyword\" || type == \"variable\") {\n      cx.marked = \"type\"\n      return cont(typename)\n    } else if (value == \"<\") {\n      return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex)\n    }\n  }\n  function funarg(type, value) {\n    if (value == \"@\") cont(expression, funarg)\n    if (type == \"spread\") return cont(funarg);\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(funarg); }\n    if (isTS && type == \"this\") return cont(maybetype, maybeAssign)\n    return pass(pattern, maybetype, maybeAssign);\n  }\n  function classExpression(type, value) {\n    // Class expressions may have an optional name.\n    if (type == \"variable\") return className(type, value);\n    return classNameAfter(type, value);\n  }\n  function className(type, value) {\n    if (type == \"variable\") {register(value); return cont(classNameAfter);}\n  }\n  function classNameAfter(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter)\n    if (value == \"extends\" || value == \"implements\" || (isTS && type == \",\")) {\n      if (value == \"implements\") cx.marked = \"keyword\";\n      return cont(isTS ? typeexpr : expression, classNameAfter);\n    }\n    if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\n  }\n  function classBody(type, value) {\n    if (type == \"async\" ||\n        (type == \"variable\" &&\n         (value == \"static\" || value == \"get\" || value == \"set\" || (isTS && isModifier(value))) &&\n         cx.stream.match(/^\\s+#?[\\w$\\xa1-\\uffff]/, false))) {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      return cont(classfield, classBody);\n    }\n    if (type == \"number\" || type == \"string\") return cont(classfield, classBody);\n    if (type == \"[\")\n      return cont(expression, maybetype, expect(\"]\"), classfield, classBody)\n    if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (isTS && type == \"(\") return pass(functiondecl, classBody)\n    if (type == \";\" || type == \",\") return cont(classBody);\n    if (type == \"}\") return cont();\n    if (value == \"@\") return cont(expression, classBody)\n  }\n  function classfield(type, value) {\n    if (value == \"!\" || value == \"?\") return cont(classfield)\n    if (type == \":\") return cont(typeexpr, maybeAssign)\n    if (value == \"=\") return cont(expressionNoComma)\n    var context = cx.state.lexical.prev, isInterface = context && context.info == \"interface\"\n    return pass(isInterface ? functiondecl : functiondef)\n  }\n  function afterExport(type, value) {\n    if (value == \"*\") { cx.marked = \"keyword\"; return cont(maybeFrom, expect(\";\")); }\n    if (value == \"default\") { cx.marked = \"keyword\"; return cont(expression, expect(\";\")); }\n    if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n    return pass(statement);\n  }\n  function exportField(type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(expect(\"variable\")); }\n    if (type == \"variable\") return pass(expressionNoComma, exportField);\n  }\n  function afterImport(type) {\n    if (type == \"string\") return cont();\n    if (type == \"(\") return pass(expression);\n    if (type == \".\") return pass(maybeoperatorComma);\n    return pass(importSpec, maybeMoreImports, maybeFrom);\n  }\n  function importSpec(type, value) {\n    if (type == \"{\") return contCommasep(importSpec, \"}\");\n    if (type == \"variable\") register(value);\n    if (value == \"*\") cx.marked = \"keyword\";\n    return cont(maybeAs);\n  }\n  function maybeMoreImports(type) {\n    if (type == \",\") return cont(importSpec, maybeMoreImports)\n  }\n  function maybeAs(_type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(importSpec); }\n  }\n  function maybeFrom(_type, value) {\n    if (value == \"from\") { cx.marked = \"keyword\"; return cont(expression); }\n  }\n  function arrayLiteral(type) {\n    if (type == \"]\") return cont();\n    return pass(commasep(expressionNoComma, \"]\"));\n  }\n  function enumdef() {\n    return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex)\n  }\n  function enummember() {\n    return pass(pattern, maybeAssign);\n  }\n\n  function isContinuedStatement(state, textAfter) {\n    return state.lastType == \"operator\" || state.lastType == \",\" ||\n      isOperatorChar.test(textAfter.charAt(0)) ||\n      /[,.]/.test(textAfter.charAt(0));\n  }\n\n  function expressionAllowed(stream, state, backUp) {\n    return state.tokenize == tokenBase &&\n      /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) ||\n      (state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0))))\n  }\n\n  // Interface\n\n  return {\n    name: parserConfig.name,\n\n    startState: function(indentUnit) {\n      var state = {\n        tokenize: tokenBase,\n        lastType: \"sof\",\n        cc: [],\n        lexical: new JSLexical(-indentUnit, 0, \"block\", false),\n        localVars: parserConfig.localVars,\n        context: parserConfig.localVars && new Context(null, null, false),\n        indented: 0\n      };\n      if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\")\n        state.globalVars = parserConfig.globalVars;\n      return state;\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (!state.lexical.hasOwnProperty(\"align\"))\n          state.lexical.align = false;\n        state.indented = stream.indentation();\n        findFatArrow(stream, state);\n      }\n      if (state.tokenize != tokenComment && stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      if (type == \"comment\") return style;\n      state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n      return parseJS(state, style, type, content, stream);\n    },\n\n    indent: function(state, textAfter, cx) {\n      if (state.tokenize == tokenComment || state.tokenize == tokenQuasi) return null;\n      if (state.tokenize != tokenBase) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top\n      // Kludge to prevent 'maybelse' from blocking lexical scope pops\n      if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\n        var c = state.cc[i];\n        if (c == poplex) lexical = lexical.prev;\n        else if (c != maybeelse && c != popcontext) break;\n      }\n      while ((lexical.type == \"stat\" || lexical.type == \"form\") &&\n             (firstChar == \"}\" || ((top = state.cc[state.cc.length - 1]) &&\n                                   (top == maybeoperatorComma || top == maybeoperatorNoComma) &&\n                                   !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))))\n        lexical = lexical.prev;\n      if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\")\n        lexical = lexical.prev;\n      var type = lexical.type, closing = firstChar == type;\n\n      if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);\n      else if (type == \"form\" && firstChar == \"{\") return lexical.indented;\n      else if (type == \"form\") return lexical.indented + cx.unit;\n      else if (type == \"stat\")\n        return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || cx.unit : 0);\n      else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false)\n        return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? cx.unit : 2 * cx.unit);\n      else if (lexical.align) return lexical.column + (closing ? 0 : 1);\n      else return lexical.indented + (closing ? 0 : cx.unit);\n    },\n\n    languageData: {\n      indentOnInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n      commentTokens: jsonMode ? undefined : {line: \"//\", block: {open: \"/*\", close: \"*/\"}},\n      closeBrackets: {brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"`\"]},\n      wordChars: \"$\"\n    }\n  };\n};\n\nexport const javascript = mkJavaScript({name: \"javascript\"})\nexport const json = mkJavaScript({name: \"json\", json: true})\nexport const jsonld = mkJavaScript({name: \"json\", jsonld: true})\nexport const typescript = mkJavaScript({name: \"typescript\", typescript: true})\n"],"names":["mkJavaScript","parserConfig","type","content","statementIndent","jsonldMode","jsonld","jsonMode","json","isTS","typescript","wordRE","wordCharacters","keywords","kw","style","A","B","C","D","operator","atom","isOperatorChar","isJsonldKeyword","ret","tp","cont","tokenBase","stream","state","ch","next","tokenize","escaped","peek","match","test","eat","tokenComment","skipToEnd","lastType","string","slice","pos","readRegexp","inSet","current","tokenQuasi","eatWhile","start","lexical","word","propertyIsEnumerable","maybeEnd","findFatArrow","fatArrowAt","arrow","indexOf","m","exec","index","depth","sawSomething","charAt","bracket","brackets","atomicTypes","JSLexical","indented","column","align","prev","info","cx","marked","cc","pass","i","arguments","length","push","apply","inList","name","list","v","register","varname","context","block","newContext","registerVarScoped","inner","Context","vars","Var","localVars","globalVars","isModifier","defaultVars","pushcontext","pushblockcontext","popcontext","pushlex","result","indent","outer","lex","poplex","expect","wanted","exp","statement","value","vardef","parenExpr","maybeexpression","pop","maybeelse","functiondef","forspec","className","enumdef","typename","typeexpr","pattern","expression","maybelabel","maybeCatchBinding","afterExport","afterImport","funarg","expressionInner","expressionNoComma","noComma","body","arrowBodyNoComma","arrowBody","commasep","maybeop","maybeoperatorNoComma","maybeoperatorComma","hasOwnProperty","classExpression","arrayLiteral","contCommasep","objprop","quasi","targetNoComma","target","maybeTypeArgs","me","expr","property","backUp","continueQuasi","_","getterSetter","afterprop","maybetype","what","end","sep","proceed","maybetypeOrIn","mayberettype","isKW","afterType","typeprops","typearg","maybeReturnType","quasiType","typeprop","functiondecl","continueQuasiType","typeparam","maybeTypeDefault","maybeAssign","vardefCont","eltpattern","proppattern","_type","forspec1","forspec2","classNameAfter","classBody","classfield","isInterface","maybeFrom","exportField","importSpec","maybeMoreImports","maybeAs","enummember","startState","indentUnit","token","sol","indentation","eatSpace","parseJS","combinator","inScope","textAfter","top","firstChar","c","closing","unit","isContinuedStatement","doubleIndentSwitch","languageData","indentOnInput","commentTokens","undefined","line","open","close","closeBrackets","wordChars","javascript"],"sourceRoot":""}