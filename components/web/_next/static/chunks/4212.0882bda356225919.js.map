{"version":3,"file":"static/chunks/4212.0882bda356225919.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/vb.js","webpack://_N_E/<anon>"],"sourcesContent":["var ERRORCLASS = 'error';\n\nfunction wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n}\n\nvar singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/%&\\\\\\\\|\\\\^~<>!]\");\nvar singleDelimiters = new RegExp('^[\\\\(\\\\)\\\\[\\\\]\\\\{\\\\}@,:`=;\\\\.]');\nvar doubleOperators = new RegExp(\"^((==)|(<>)|(<=)|(>=)|(<>)|(<<)|(>>)|(//)|(\\\\*\\\\*))\");\nvar doubleDelimiters = new RegExp(\"^((\\\\+=)|(\\\\-=)|(\\\\*=)|(%=)|(/=)|(&=)|(\\\\|=)|(\\\\^=))\");\nvar tripleDelimiters = new RegExp(\"^((//=)|(>>=)|(<<=)|(\\\\*\\\\*=))\");\nvar identifiers = new RegExp(\"^[_A-Za-z][_A-Za-z0-9]*\");\n\nvar openingKeywords = ['class','module', 'sub','enum','select','while','if','function', 'get','set','property', 'try', 'structure', 'synclock', 'using', 'with'];\nvar middleKeywords = ['else','elseif','case', 'catch', 'finally'];\nvar endKeywords = ['next','loop'];\n\nvar operatorKeywords = ['and', \"andalso\", 'or', 'orelse', 'xor', 'in', 'not', 'is', 'isnot', 'like'];\nvar wordOperators = wordRegexp(operatorKeywords);\n\nvar commonKeywords = [\"#const\", \"#else\", \"#elseif\", \"#end\", \"#if\", \"#region\", \"addhandler\", \"addressof\", \"alias\", \"as\", \"byref\", \"byval\", \"cbool\", \"cbyte\", \"cchar\", \"cdate\", \"cdbl\", \"cdec\", \"cint\", \"clng\", \"cobj\", \"compare\", \"const\", \"continue\", \"csbyte\", \"cshort\", \"csng\", \"cstr\", \"cuint\", \"culng\", \"cushort\", \"declare\", \"default\", \"delegate\", \"dim\", \"directcast\", \"each\", \"erase\", \"error\", \"event\", \"exit\", \"explicit\", \"false\", \"for\", \"friend\", \"gettype\", \"goto\", \"handles\", \"implements\", \"imports\", \"infer\", \"inherits\", \"interface\", \"isfalse\", \"istrue\", \"lib\", \"me\", \"mod\", \"mustinherit\", \"mustoverride\", \"my\", \"mybase\", \"myclass\", \"namespace\", \"narrowing\", \"new\", \"nothing\", \"notinheritable\", \"notoverridable\", \"of\", \"off\", \"on\", \"operator\", \"option\", \"optional\", \"out\", \"overloads\", \"overridable\", \"overrides\", \"paramarray\", \"partial\", \"private\", \"protected\", \"public\", \"raiseevent\", \"readonly\", \"redim\", \"removehandler\", \"resume\", \"return\", \"shadows\", \"shared\", \"static\", \"step\", \"stop\", \"strict\", \"then\", \"throw\", \"to\", \"true\", \"trycast\", \"typeof\", \"until\", \"until\", \"when\", \"widening\", \"withevents\", \"writeonly\"];\n\nvar commontypes = ['object', 'boolean', 'char', 'string', 'byte', 'sbyte', 'short', 'ushort', 'int16', 'uint16', 'integer', 'uinteger', 'int32', 'uint32', 'long', 'ulong', 'int64', 'uint64', 'decimal', 'single', 'double', 'float', 'date', 'datetime', 'intptr', 'uintptr'];\n\nvar keywords = wordRegexp(commonKeywords);\nvar types = wordRegexp(commontypes);\nvar stringPrefixes = '\"';\n\nvar opening = wordRegexp(openingKeywords);\nvar middle = wordRegexp(middleKeywords);\nvar closing = wordRegexp(endKeywords);\nvar doubleClosing = wordRegexp(['end']);\nvar doOpening = wordRegexp(['do']);\n\nvar indentInfo = null;\n\nfunction indent(_stream, state) {\n  state.currentIndent++;\n}\n\nfunction dedent(_stream, state) {\n  state.currentIndent--;\n}\n// tokenizers\nfunction tokenBase(stream, state) {\n  if (stream.eatSpace()) {\n    return null;\n  }\n\n  var ch = stream.peek();\n\n  // Handle Comments\n  if (ch === \"'\") {\n    stream.skipToEnd();\n    return 'comment';\n  }\n\n\n  // Handle Number Literals\n  if (stream.match(/^((&H)|(&O))?[0-9\\.a-f]/i, false)) {\n    var floatLiteral = false;\n    // Floats\n    if (stream.match(/^\\d*\\.\\d+F?/i)) { floatLiteral = true; }\n    else if (stream.match(/^\\d+\\.\\d*F?/)) { floatLiteral = true; }\n    else if (stream.match(/^\\.\\d+F?/)) { floatLiteral = true; }\n\n    if (floatLiteral) {\n      // Float literals may be \"imaginary\"\n      stream.eat(/J/i);\n      return 'number';\n    }\n    // Integers\n    var intLiteral = false;\n    // Hex\n    if (stream.match(/^&H[0-9a-f]+/i)) { intLiteral = true; }\n    // Octal\n    else if (stream.match(/^&O[0-7]+/i)) { intLiteral = true; }\n    // Decimal\n    else if (stream.match(/^[1-9]\\d*F?/)) {\n      // Decimal literals may be \"imaginary\"\n      stream.eat(/J/i);\n      // TODO - Can you have imaginary longs?\n      intLiteral = true;\n    }\n    // Zero by itself with no other piece of number.\n    else if (stream.match(/^0(?![\\dx])/i)) { intLiteral = true; }\n    if (intLiteral) {\n      // Integer literals may be \"long\"\n      stream.eat(/L/i);\n      return 'number';\n    }\n  }\n\n  // Handle Strings\n  if (stream.match(stringPrefixes)) {\n    state.tokenize = tokenStringFactory(stream.current());\n    return state.tokenize(stream, state);\n  }\n\n  // Handle operators and Delimiters\n  if (stream.match(tripleDelimiters) || stream.match(doubleDelimiters)) {\n    return null;\n  }\n  if (stream.match(doubleOperators)\n      || stream.match(singleOperators)\n      || stream.match(wordOperators)) {\n    return 'operator';\n  }\n  if (stream.match(singleDelimiters)) {\n    return null;\n  }\n  if (stream.match(doOpening)) {\n    indent(stream,state);\n    state.doInCurrentLine = true;\n    return 'keyword';\n  }\n  if (stream.match(opening)) {\n    if (! state.doInCurrentLine)\n      indent(stream,state);\n    else\n      state.doInCurrentLine = false;\n    return 'keyword';\n  }\n  if (stream.match(middle)) {\n    return 'keyword';\n  }\n\n  if (stream.match(doubleClosing)) {\n    dedent(stream,state);\n    dedent(stream,state);\n    return 'keyword';\n  }\n  if (stream.match(closing)) {\n    dedent(stream,state);\n    return 'keyword';\n  }\n\n  if (stream.match(types)) {\n    return 'keyword';\n  }\n\n  if (stream.match(keywords)) {\n    return 'keyword';\n  }\n\n  if (stream.match(identifiers)) {\n    return 'variable';\n  }\n\n  // Handle non-detected items\n  stream.next();\n  return ERRORCLASS;\n}\n\nfunction tokenStringFactory(delimiter) {\n  var singleline = delimiter.length == 1;\n  var OUTCLASS = 'string';\n\n  return function(stream, state) {\n    while (!stream.eol()) {\n      stream.eatWhile(/[^'\"]/);\n      if (stream.match(delimiter)) {\n        state.tokenize = tokenBase;\n        return OUTCLASS;\n      } else {\n        stream.eat(/['\"]/);\n      }\n    }\n    if (singleline) {\n      state.tokenize = tokenBase;\n    }\n    return OUTCLASS;\n  };\n}\n\n\nfunction tokenLexer(stream, state) {\n  var style = state.tokenize(stream, state);\n  var current = stream.current();\n\n  // Handle '.' connected identifiers\n  if (current === '.') {\n    style = state.tokenize(stream, state);\n    if (style === 'variable') {\n      return 'variable';\n    } else {\n      return ERRORCLASS;\n    }\n  }\n\n\n  var delimiter_index = '[({'.indexOf(current);\n  if (delimiter_index !== -1) {\n    indent(stream, state );\n  }\n  if (indentInfo === 'dedent') {\n    if (dedent(stream, state)) {\n      return ERRORCLASS;\n    }\n  }\n  delimiter_index = '])}'.indexOf(current);\n  if (delimiter_index !== -1) {\n    if (dedent(stream, state)) {\n      return ERRORCLASS;\n    }\n  }\n\n  return style;\n}\n\nexport const vb = {\n  name: \"vb\",\n\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      lastToken: null,\n      currentIndent: 0,\n      nextLineIndent: 0,\n      doInCurrentLine: false\n\n\n    };\n  },\n\n  token: function(stream, state) {\n    if (stream.sol()) {\n      state.currentIndent += state.nextLineIndent;\n      state.nextLineIndent = 0;\n      state.doInCurrentLine = 0;\n    }\n    var style = tokenLexer(stream, state);\n\n    state.lastToken = {style:style, content: stream.current()};\n\n\n\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    var trueText = textAfter.replace(/^\\s+|\\s+$/g, '') ;\n    if (trueText.match(closing) || trueText.match(doubleClosing) || trueText.match(middle)) return cx.unit*(state.currentIndent-1);\n    if(state.currentIndent < 0) return 0;\n    return state.currentIndent * cx.unit;\n  },\n\n  languageData: {\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", '\"']},\n    commentTokens: {line: \"'\"},\n    autocomplete: openingKeywords.concat(middleKeywords).concat(endKeywords)\n      .concat(operatorKeywords).concat(commonKeywords).concat(commontypes)\n  }\n};\n"],"names":["ERRORCLASS","wordRegexp","words","join","singleOperators","singleDelimiters","doubleOperators","doubleDelimiters","tripleDelimiters","identifiers","openingKeywords","middleKeywords","endKeywords","operatorKeywords","wordOperators","commonKeywords","commontypes","keywords","types","opening","middle","closing","doubleClosing","doOpening","indent","_stream","state","currentIndent","dedent","tokenBase","stream","eatSpace","ch","peek","skipToEnd","match","delimiter","singleline","OUTCLASS","floatLiteral","eat","intLiteral","tokenize","current","length","eol","eatWhile","doInCurrentLine","next","vb","name","startState","lastToken","nextLineIndent","token","sol","style","tokenLexer","delimiter_index","indexOf","content","textAfter","cx","trueText","replace","unit","languageData","closeBrackets","brackets","commentTokens","line","autocomplete","concat"],"sourceRoot":""}