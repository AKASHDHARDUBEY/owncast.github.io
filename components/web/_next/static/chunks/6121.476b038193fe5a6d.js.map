{"version":3,"file":"static/chunks/6121.476b038193fe5a6d.js","mappings":"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A,CACA,cACA,iBACA,gBACA,gBACA,qBACA,eACA,iBACA,mBACA,mBACA,sBACA,eACA,gBACA,iBACA,iBACA,kBACA,cACA,iBACA,iBACA,kBACA,cACA,aACA,cACA,gBACA,kBACA,eAGA,gBACA,mBACA,eACA,gBAGA,cACA,eACA,cACA,cACA,cACA,eACA,cACA,aAGA,wBACA,gBACA,eACA,uBACA,wBAEA,WACA,aACA,YACA,YACA,cACA,YAGA,cACA,CACA,GAEOyC,EAAA5C,EAAA,CACP2C,KAAA,SACAxC,WAAA,CACA,mBACA,iBACA,eACA,gBACA,gBACA,kBACA,mBACA,gBACA,eACA,mBACA,iBACA,eACA,iBACA,kBACA,cACA,mBACA,iBACA,kBACA,iBACA,oBACA,mBACA,eACA,iBACA,gBACA,iBACA,iBACA,kBACA,oBACA,cACA,eACA,mBACA,kBACA,iBACA,oBACA,iBACA,iBACA,iBACA,aACA,cACA,iBACA,iBACA,cACA,eACA,eACA,mBACA,gBAGA,iBACA,gBACA,kBACA,oBACA,gBACA,qBACA,sBACA,mBACA,gBACA,gBACA,mBACA,gBACA,iBACA,gBACA,iBACA,mBACA,kBACA,oBACA,eACA,iBACA,mBACA,gBACA,kBACA,mBAGA,eACA,cACA,cACA,cACA,iBACA,cACA,iBACA,cACA,eACA,gBAEA,gBACA,kBACA,EACAoB,cAAA,EACA,GAEOsB,EAAA7C,EAAA,CACP2C,KAAA,MACAxC,WAAA,CACA,kBACA,cACA,kBACA,eACA,mBACA,aACA,iBACA,gBACA,iBACA,gBACA,iBACA,aACA,iBACA,gBACA,mBACA,iBACA,kBACA,cACA,oBACA,oBACA,gBACA,eACA,gBAGA,cACA,eACA,iBACA,eACA,cACA,EACAoB,cAAA,EACA","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/mllike.js","webpack://_N_E/<anon>"],"sourcesContent":["function mlLike(parserConfig) {\n  var words = {\n    'as': 'keyword',\n    'do': 'keyword',\n    'else': 'keyword',\n    'end': 'keyword',\n    'exception': 'keyword',\n    'fun': 'keyword',\n    'functor': 'keyword',\n    'if': 'keyword',\n    'in': 'keyword',\n    'include': 'keyword',\n    'let': 'keyword',\n    'of': 'keyword',\n    'open': 'keyword',\n    'rec': 'keyword',\n    'struct': 'keyword',\n    'then': 'keyword',\n    'type': 'keyword',\n    'val': 'keyword',\n    'while': 'keyword',\n    'with': 'keyword'\n  };\n\n  var extraWords = parserConfig.extraWords || {};\n  for (var prop in extraWords) {\n    if (extraWords.hasOwnProperty(prop)) {\n      words[prop] = parserConfig.extraWords[prop];\n    }\n  }\n  var hintWords = [];\n  for (var k in words) { hintWords.push(k); }\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n\n    if (ch === '\"') {\n      state.tokenize = tokenString;\n      return state.tokenize(stream, state);\n    }\n    if (ch === '{') {\n      if (stream.eat('|')) {\n        state.longString = true;\n        state.tokenize = tokenLongString;\n        return state.tokenize(stream, state);\n      }\n    }\n    if (ch === '(') {\n      if (stream.match(/^\\*(?!\\))/)) {\n        state.commentLevel++;\n        state.tokenize = tokenComment;\n        return state.tokenize(stream, state);\n      }\n    }\n    if (ch === '~' || ch === '?') {\n      stream.eatWhile(/\\w/);\n      return 'variableName.special';\n    }\n    if (ch === '`') {\n      stream.eatWhile(/\\w/);\n      return 'quote';\n    }\n    if (ch === '/' && parserConfig.slashComments && stream.eat('/')) {\n      stream.skipToEnd();\n      return 'comment';\n    }\n    if (/\\d/.test(ch)) {\n      if (ch === '0' && stream.eat(/[bB]/)) {\n        stream.eatWhile(/[01]/);\n      } if (ch === '0' && stream.eat(/[xX]/)) {\n        stream.eatWhile(/[0-9a-fA-F]/)\n      } if (ch === '0' && stream.eat(/[oO]/)) {\n        stream.eatWhile(/[0-7]/);\n      } else {\n        stream.eatWhile(/[\\d_]/);\n        if (stream.eat('.')) {\n          stream.eatWhile(/[\\d]/);\n        }\n        if (stream.eat(/[eE]/)) {\n          stream.eatWhile(/[\\d\\-+]/);\n        }\n      }\n      return 'number';\n    }\n    if ( /[+\\-*&%=<>!?|@\\.~:]/.test(ch)) {\n      return 'operator';\n    }\n    if (/[\\w\\xa1-\\uffff]/.test(ch)) {\n      stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n      var cur = stream.current();\n      return words.hasOwnProperty(cur) ? words[cur] : 'variable';\n    }\n    return null\n  }\n\n  function tokenString(stream, state) {\n    var next, end = false, escaped = false;\n    while ((next = stream.next()) != null) {\n      if (next === '\"' && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next === '\\\\';\n    }\n    if (end && !escaped) {\n      state.tokenize = tokenBase;\n    }\n    return 'string';\n  };\n\n  function tokenComment(stream, state) {\n    var prev, next;\n    while(state.commentLevel > 0 && (next = stream.next()) != null) {\n      if (prev === '(' && next === '*') state.commentLevel++;\n      if (prev === '*' && next === ')') state.commentLevel--;\n      prev = next;\n    }\n    if (state.commentLevel <= 0) {\n      state.tokenize = tokenBase;\n    }\n    return 'comment';\n  }\n\n  function tokenLongString(stream, state) {\n    var prev, next;\n    while (state.longString && (next = stream.next()) != null) {\n      if (prev === '|' && next === '}') state.longString = false;\n      prev = next;\n    }\n    if (!state.longString) {\n      state.tokenize = tokenBase;\n    }\n    return 'string';\n  }\n\n  return {\n    startState: function() {return {tokenize: tokenBase, commentLevel: 0, longString: false};},\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      return state.tokenize(stream, state);\n    },\n\n    languageData: {\n      autocomplete: hintWords,\n      commentTokens: {\n        line: parserConfig.slashComments ? \"//\" : undefined,\n        block: {open: \"(*\", close: \"*)\"}\n      }\n    }\n  };\n};\n\nexport const oCaml = mlLike({\n  name: \"ocaml\",\n  extraWords: {\n    'and': 'keyword',\n    'assert': 'keyword',\n    'begin': 'keyword',\n    'class': 'keyword',\n    'constraint': 'keyword',\n    'done': 'keyword',\n    'downto': 'keyword',\n    'external': 'keyword',\n    'function': 'keyword',\n    'initializer': 'keyword',\n    'lazy': 'keyword',\n    'match': 'keyword',\n    'method': 'keyword',\n    'module': 'keyword',\n    'mutable': 'keyword',\n    'new': 'keyword',\n    'nonrec': 'keyword',\n    'object': 'keyword',\n    'private': 'keyword',\n    'sig': 'keyword',\n    'to': 'keyword',\n    'try': 'keyword',\n    'value': 'keyword',\n    'virtual': 'keyword',\n    'when': 'keyword',\n\n    // builtins\n    'raise': 'builtin',\n    'failwith': 'builtin',\n    'true': 'builtin',\n    'false': 'builtin',\n\n    // Pervasives builtins\n    'asr': 'builtin',\n    'land': 'builtin',\n    'lor': 'builtin',\n    'lsl': 'builtin',\n    'lsr': 'builtin',\n    'lxor': 'builtin',\n    'mod': 'builtin',\n    'or': 'builtin',\n\n    // More Pervasives\n    'raise_notrace': 'builtin',\n    'trace': 'builtin',\n    'exit': 'builtin',\n    'print_string': 'builtin',\n    'print_endline': 'builtin',\n\n     'int': 'type',\n     'float': 'type',\n     'bool': 'type',\n     'char': 'type',\n     'string': 'type',\n     'unit': 'type',\n\n     // Modules\n     'List': 'builtin'\n  }\n});\n\nexport const fSharp = mlLike({\n  name: \"fsharp\",\n  extraWords: {\n    'abstract': 'keyword',\n    'assert': 'keyword',\n    'base': 'keyword',\n    'begin': 'keyword',\n    'class': 'keyword',\n    'default': 'keyword',\n    'delegate': 'keyword',\n    'do!': 'keyword',\n    'done': 'keyword',\n    'downcast': 'keyword',\n    'downto': 'keyword',\n    'elif': 'keyword',\n    'extern': 'keyword',\n    'finally': 'keyword',\n    'for': 'keyword',\n    'function': 'keyword',\n    'global': 'keyword',\n    'inherit': 'keyword',\n    'inline': 'keyword',\n    'interface': 'keyword',\n    'internal': 'keyword',\n    'lazy': 'keyword',\n    'let!': 'keyword',\n    'match': 'keyword',\n    'member': 'keyword',\n    'module': 'keyword',\n    'mutable': 'keyword',\n    'namespace': 'keyword',\n    'new': 'keyword',\n    'null': 'keyword',\n    'override': 'keyword',\n    'private': 'keyword',\n    'public': 'keyword',\n    'return!': 'keyword',\n    'return': 'keyword',\n    'select': 'keyword',\n    'static': 'keyword',\n    'to': 'keyword',\n    'try': 'keyword',\n    'upcast': 'keyword',\n    'use!': 'keyword',\n    'use': 'keyword',\n    'void': 'keyword',\n    'when': 'keyword',\n    'yield!': 'keyword',\n    'yield': 'keyword',\n\n    // Reserved words\n    'atomic': 'keyword',\n    'break': 'keyword',\n    'checked': 'keyword',\n    'component': 'keyword',\n    'const': 'keyword',\n    'constraint': 'keyword',\n    'constructor': 'keyword',\n    'continue': 'keyword',\n    'eager': 'keyword',\n    'event': 'keyword',\n    'external': 'keyword',\n    'fixed': 'keyword',\n    'method': 'keyword',\n    'mixin': 'keyword',\n    'object': 'keyword',\n    'parallel': 'keyword',\n    'process': 'keyword',\n    'protected': 'keyword',\n    'pure': 'keyword',\n    'sealed': 'keyword',\n    'tailcall': 'keyword',\n    'trait': 'keyword',\n    'virtual': 'keyword',\n    'volatile': 'keyword',\n\n    // builtins\n    'List': 'builtin',\n    'Seq': 'builtin',\n    'Map': 'builtin',\n    'Set': 'builtin',\n    'Option': 'builtin',\n    'int': 'builtin',\n    'string': 'builtin',\n    'not': 'builtin',\n    'true': 'builtin',\n    'false': 'builtin',\n\n    'raise': 'builtin',\n    'failwith': 'builtin'\n  },\n  slashComments: true\n});\n\nexport const sml = mlLike({\n  name: \"sml\",\n  extraWords: {\n    'abstype': 'keyword',\n    'and': 'keyword',\n    'andalso': 'keyword',\n    'case': 'keyword',\n    'datatype': 'keyword',\n    'fn': 'keyword',\n    'handle': 'keyword',\n    'infix': 'keyword',\n    'infixr': 'keyword',\n    'local': 'keyword',\n    'nonfix': 'keyword',\n    'op': 'keyword',\n    'orelse': 'keyword',\n    'raise': 'keyword',\n    'withtype': 'keyword',\n    'eqtype': 'keyword',\n    'sharing': 'keyword',\n    'sig': 'keyword',\n    'signature': 'keyword',\n    'structure': 'keyword',\n    'where': 'keyword',\n    'true': 'keyword',\n    'false': 'keyword',\n\n    // types\n    'int': 'builtin',\n    'real': 'builtin',\n    'string': 'builtin',\n    'char': 'builtin',\n    'bool': 'builtin'\n  },\n  slashComments: true\n});\n"],"names":["mlLike","parserConfig","words","extraWords","prop","hasOwnProperty","hintWords","k","push","tokenBase","stream","state","ch","next","tokenize","tokenString","eat","longString","tokenLongString","match","commentLevel","tokenComment","eatWhile","slashComments","skipToEnd","test","cur","current","end","escaped","prev","startState","token","eatSpace","languageData","autocomplete","commentTokens","line","undefined","block","open","close","oCaml","name","fSharp","sml"],"sourceRoot":""}