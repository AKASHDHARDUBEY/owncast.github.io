{"version":3,"file":"static/chunks/6665.d7b1226314ab9378.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/ttcn.js","webpack://_N_E/<anon>"],"sourcesContent":["function words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\n\nconst parserConfig = {\n  name: \"ttcn\",\n  keywords: words(\"activate address alive all alt altstep and and4b any\" +\n                  \" break case component const continue control deactivate\" +\n                  \" display do else encode enumerated except exception\" +\n                  \" execute extends extension external for from function\" +\n                  \" goto group if import in infinity inout interleave\" +\n                  \" label language length log match message mixed mod\" +\n                  \" modifies module modulepar mtc noblock not not4b nowait\" +\n                  \" of on optional or or4b out override param pattern port\" +\n                  \" procedure record recursive rem repeat return runs select\" +\n                  \" self sender set signature system template testcase to\" +\n                  \" type union value valueof var variant while with xor xor4b\"),\n  builtin: words(\"bit2hex bit2int bit2oct bit2str char2int char2oct encvalue\" +\n                 \" decomp decvalue float2int float2str hex2bit hex2int\" +\n                 \" hex2oct hex2str int2bit int2char int2float int2hex\" +\n                 \" int2oct int2str int2unichar isbound ischosen ispresent\" +\n                 \" isvalue lengthof log2str oct2bit oct2char oct2hex oct2int\" +\n                 \" oct2str regexp replace rnd sizeof str2bit str2float\" +\n                 \" str2hex str2int str2oct substr unichar2int unichar2char\" +\n                 \" enum2int\"),\n  types: words(\"anytype bitstring boolean char charstring default float\" +\n               \" hexstring integer objid octetstring universal verdicttype timer\"),\n  timerOps: words(\"read running start stop timeout\"),\n  portOps: words(\"call catch check clear getcall getreply halt raise receive\" +\n                 \" reply send trigger\"),\n  configOps: words(\"create connect disconnect done kill killed map unmap\"),\n  verdictOps: words(\"getverdict setverdict\"),\n  sutOps: words(\"action\"),\n  functionOps: words(\"apply derefers refers\"),\n\n  verdictConsts: words(\"error fail inconc none pass\"),\n  booleanConsts: words(\"true false\"),\n  otherConsts: words(\"null NULL omit\"),\n\n  visibilityModifiers: words(\"private public friend\"),\n  templateMatch: words(\"complement ifpresent subset superset permutation\"),\n  multiLineStrings: true\n}\n\nvar wordList = []\nfunction add(obj) {\n  if (obj) for (var prop in obj) if (obj.hasOwnProperty(prop))\n    wordList.push(prop);\n}\nadd(parserConfig.keywords);\nadd(parserConfig.builtin);\nadd(parserConfig.timerOps);\nadd(parserConfig.portOps);\n\nvar keywords = parserConfig.keywords || {},\n    builtin = parserConfig.builtin || {},\n    timerOps = parserConfig.timerOps || {},\n    portOps  = parserConfig.portOps || {},\n    configOps = parserConfig.configOps || {},\n    verdictOps = parserConfig.verdictOps || {},\n    sutOps = parserConfig.sutOps || {},\n    functionOps = parserConfig.functionOps || {},\n\n    verdictConsts = parserConfig.verdictConsts || {},\n    booleanConsts = parserConfig.booleanConsts || {},\n    otherConsts   = parserConfig.otherConsts || {},\n\n    types = parserConfig.types || {},\n    visibilityModifiers = parserConfig.visibilityModifiers || {},\n    templateMatch = parserConfig.templateMatch || {},\n    multiLineStrings = parserConfig.multiLineStrings,\n    indentStatements = parserConfig.indentStatements !== false;\nvar isOperatorChar = /[+\\-*&@=<>!\\/]/;\nvar curPunc;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n\n  if (ch == '\"' || ch == \"'\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n  if (/[\\[\\]{}\\(\\),;\\\\:\\?\\.]/.test(ch)) {\n    curPunc = ch;\n    return \"punctuation\";\n  }\n  if (ch == \"#\"){\n    stream.skipToEnd();\n    return \"atom\";\n  }\n  if (ch == \"%\"){\n    stream.eatWhile(/\\b/);\n    return \"atom\";\n  }\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n  if (ch == \"/\") {\n    if (stream.eat(\"*\")) {\n      state.tokenize = tokenComment;\n      return tokenComment(stream, state);\n    }\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n  if (isOperatorChar.test(ch)) {\n    if(ch == \"@\"){\n      if(stream.match(\"try\") || stream.match(\"catch\")\n         || stream.match(\"lazy\")){\n        return \"keyword\";\n      }\n    }\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n  var cur = stream.current();\n\n  if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n  if (builtin.propertyIsEnumerable(cur)) return \"builtin\";\n\n  if (timerOps.propertyIsEnumerable(cur)) return \"def\";\n  if (configOps.propertyIsEnumerable(cur)) return \"def\";\n  if (verdictOps.propertyIsEnumerable(cur)) return \"def\";\n  if (portOps.propertyIsEnumerable(cur)) return \"def\";\n  if (sutOps.propertyIsEnumerable(cur)) return \"def\";\n  if (functionOps.propertyIsEnumerable(cur)) return \"def\";\n\n  if (verdictConsts.propertyIsEnumerable(cur)) return \"string\";\n  if (booleanConsts.propertyIsEnumerable(cur)) return \"string\";\n  if (otherConsts.propertyIsEnumerable(cur)) return \"string\";\n\n  if (types.propertyIsEnumerable(cur)) return \"typeName.standard\";\n  if (visibilityModifiers.propertyIsEnumerable(cur))\n    return \"modifier\";\n  if (templateMatch.propertyIsEnumerable(cur)) return \"atom\";\n\n  return \"variable\";\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped){\n        var afterQuote = stream.peek();\n        //look if the character after the quote is like the B in '10100010'B\n        if (afterQuote){\n          afterQuote = afterQuote.toLowerCase();\n          if(afterQuote == \"b\" || afterQuote == \"h\" || afterQuote == \"o\")\n            stream.next();\n        }\n        end = true; break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !(escaped || multiLineStrings))\n      state.tokenize = null;\n    return \"string\";\n  };\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize = null;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction Context(indented, column, type, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.align = align;\n  this.prev = prev;\n}\n\nfunction pushContext(state, col, type) {\n  var indent = state.indented;\n  if (state.context && state.context.type == \"statement\")\n    indent = state.context.indented;\n  return state.context = new Context(indent, col, type, null, state.context);\n}\n\nfunction popContext(state) {\n  var t = state.context.type;\n  if (t == \")\" || t == \"]\" || t == \"}\")\n    state.indented = state.context.indented;\n  return state.context = state.context.prev;\n}\n\n//Interface\nexport const ttcn = {\n  name: \"ttcn\",\n  startState: function() {\n    return {\n      tokenize: null,\n      context: new Context(0, 0, \"top\", false),\n      indented: 0,\n      startOfLine: true\n    };\n  },\n\n  token: function(stream, state) {\n    var ctx = state.context;\n    if (stream.sol()) {\n      if (ctx.align == null) ctx.align = false;\n      state.indented = stream.indentation();\n      state.startOfLine = true;\n    }\n    if (stream.eatSpace()) return null;\n    curPunc = null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\") return style;\n    if (ctx.align == null) ctx.align = true;\n\n    if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\")\n        && ctx.type == \"statement\"){\n      popContext(state);\n    }\n    else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n    else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n    else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n    else if (curPunc == \"}\") {\n      while (ctx.type == \"statement\") ctx = popContext(state);\n      if (ctx.type == \"}\") ctx = popContext(state);\n      while (ctx.type == \"statement\") ctx = popContext(state);\n    }\n    else if (curPunc == ctx.type) popContext(state);\n    else if (indentStatements &&\n             (((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';') ||\n              (ctx.type == \"statement\" && curPunc == \"newstatement\")))\n      pushContext(state, stream.column(), \"statement\");\n\n    state.startOfLine = false;\n\n    return style;\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*[{}]$/,\n    commentTokens: {line: \"//\", block: {open: \"/*\", close: \"*/\"}},\n    autocomplete: wordList\n  }\n};\n"],"names":["words","str","obj","split","i","length","parserConfig","name","keywords","builtin","types","timerOps","portOps","configOps","verdictOps","sutOps","functionOps","verdictConsts","booleanConsts","otherConsts","visibilityModifiers","templateMatch","multiLineStrings","curPunc","wordList","add","prop","hasOwnProperty","push","indentStatements","isOperatorChar","tokenBase","stream","state","ch","next","tokenize","escaped","end","afterQuote","peek","toLowerCase","test","skipToEnd","eatWhile","eat","tokenComment","match","cur","current","propertyIsEnumerable","maybeEnd","Context","indented","column","type","align","prev","pushContext","col","indent","context","popContext","t","ttcn","startState","startOfLine","token","ctx","sol","indentation","eatSpace","style","languageData","indentOnInput","commentTokens","line","block","open","close","autocomplete"],"sourceRoot":""}