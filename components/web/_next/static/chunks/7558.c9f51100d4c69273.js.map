{"version":3,"file":"static/chunks/7558.c9f51100d4c69273.js","mappings":"mGAAA,SAAAA,EAAAC,CAAA,CAAAC,CAAA,EAGA,OAFAD,EAAAE,SAAA,GACAD,EAAAE,GAAA,CAAAC,EACA,OACA,CAEA,SAAAC,EAAAL,CAAA,CAAAC,CAAA,SACA,EAAAK,KAAA,mBACAL,EAAAE,GAAA,CAAAI,EACA,WACIP,EAAAM,KAAA,qBAAAE,IAAA,CAAAR,EAAAS,IAAA,KACJR,EAAAE,GAAA,CAAAO,EACA,WAEAX,EAAAC,EAAAC,EACA,CAGA,SAAAM,EAAAP,CAAA,CAAAC,CAAA,EACA,IAAAU,EAAAX,EAAAM,KAAA,SACA,IAAAK,EAAA,OAAAZ,EAAAC,EAAAC,EAAA,CAEAA,EAAAE,GAAA,CAAAS,EACA,IAAAC,EAAAC,OAAAH,CAAA,YACA,QAAAE,EAAA,IACA,OAEA,OACA,CAGA,SAAAD,EAAAZ,CAAA,CAAAC,CAAA,EAGA,OAFAD,EAAAE,SAAA,GACAD,EAAAE,GAAA,CAAAC,EACA,KAGA,SAAAM,EAAAV,CAAA,CAAAC,CAAA,EAGA,OAFAD,EAAAe,QAAA,OACAd,EAAAE,GAAA,CAAAa,EACA,gBACA,CAEA,SAAAA,EAAAhB,CAAA,CAAAC,CAAA,SACA,EAAAK,KAAA,oBACAL,EAAAE,GAAA,CAAAC,EACA,WAEAL,EAAAC,EAAAC,EACA,CAGA,SAAAG,EAAAJ,CAAA,QACA,CAAAA,EAAAiB,GAAA,IAAAjB,EAAAkB,GAAA,WAQAlB,EAAAE,SAAA,GACA,UARA,EAAAI,KAAA,UACA,QAEAN,EAAAE,SAAA,GACA,QACA,CAOA,SAAAiB,EAAAnB,CAAA,EAEA,OADAA,EAAAE,SAAA,GACA,+CAGO,IAAAkB,EAAA,CACPC,KAAA,OACAC,MAAA,SAAAtB,CAAA,CAAAC,CAAA,EACA,IAAAE,EAAAF,EAAAE,GAAA,QACA,GAAAC,GAAAD,GAAAgB,GAAAnB,EAAAuB,QAAA,QACApB,EAAAH,EAAAC,EADA,EAIAuB,UAAA,SAAAvB,CAAA,EACAA,EAAAE,GAAA,CAAAgB,CACA,EAEAM,WAAA,WACA,OAAYtB,IAAAE,CAAA,CACZ,CACA","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/http.js","webpack://_N_E/<anon>"],"sourcesContent":["function failFirstLine(stream, state) {\n  stream.skipToEnd();\n  state.cur = header;\n  return \"error\";\n}\n\nfunction start(stream, state) {\n  if (stream.match(/^HTTP\\/\\d\\.\\d/)) {\n    state.cur = responseStatusCode;\n    return \"keyword\";\n  } else if (stream.match(/^[A-Z]+/) && /[ \\t]/.test(stream.peek())) {\n    state.cur = requestPath;\n    return \"keyword\";\n  } else {\n    return failFirstLine(stream, state);\n  }\n}\n\nfunction responseStatusCode(stream, state) {\n  var code = stream.match(/^\\d+/);\n  if (!code) return failFirstLine(stream, state);\n\n  state.cur = responseStatusText;\n  var status = Number(code[0]);\n  if (status >= 100 && status < 400) {\n    return \"atom\";\n  } else {\n    return \"error\";\n  }\n}\n\nfunction responseStatusText(stream, state) {\n  stream.skipToEnd();\n  state.cur = header;\n  return null;\n}\n\nfunction requestPath(stream, state) {\n  stream.eatWhile(/\\S/);\n  state.cur = requestProtocol;\n  return \"string.special\";\n}\n\nfunction requestProtocol(stream, state) {\n  if (stream.match(/^HTTP\\/\\d\\.\\d$/)) {\n    state.cur = header;\n    return \"keyword\";\n  } else {\n    return failFirstLine(stream, state);\n  }\n}\n\nfunction header(stream) {\n  if (stream.sol() && !stream.eat(/[ \\t]/)) {\n    if (stream.match(/^.*?:/)) {\n      return \"atom\";\n    } else {\n      stream.skipToEnd();\n      return \"error\";\n    }\n  } else {\n    stream.skipToEnd();\n    return \"string\";\n  }\n}\n\nfunction body(stream) {\n  stream.skipToEnd();\n  return null;\n}\n\nexport const http = {\n  name: \"http\",\n  token: function(stream, state) {\n    var cur = state.cur;\n    if (cur != header && cur != body && stream.eatSpace()) return null;\n    return cur(stream, state);\n  },\n\n  blankLine: function(state) {\n    state.cur = body;\n  },\n\n  startState: function() {\n    return {cur: start};\n  }\n};\n"],"names":["failFirstLine","stream","state","skipToEnd","cur","header","start","match","responseStatusCode","test","peek","requestPath","code","responseStatusText","status","Number","eatWhile","requestProtocol","sol","eat","body","http","name","token","eatSpace","blankLine","startState"],"sourceRoot":""}