{"version":3,"file":"static/chunks/2675.9a5766223a0b8e5a.js","mappings":"iJAAA,IAAAA,EAAA,WAAAC,KAAA,KAcO,IAAAC,EAAA,CACPC,KAAA,YACAC,WAAA,WACA,OACAC,YAAA,GACAC,KAAA,EACAC,MAAA,EACAC,YAAA,EACA,CACA,EACAC,MAAA,SAAAC,CAAA,CAAAC,CAAA,EACA,GAAAD,EAAAE,QAAA,eACAF,EAAAG,GAAA,IACAF,CAAAA,EAAAN,WAAA,KAEA,IAAAS,EAAAJ,EAAAK,IAAA,GAAAC,QAAA,UACA,KAAAhB,EAAAiB,OAAA,CAAAH,IA2BAH,EAAAN,WAAA,IACAK,EAAAQ,GAAA,IACAP,CAAAA,EAAAN,WAAA,KAEA,WA9BAM,CAAA,IAAAA,EAAAN,WAAA,EACAK,EAAAQ,GAAA,IACAP,CAAAA,EAAAN,WAAA,KAEA,WAEAS,MAAAA,GAAAA,MAAAA,GACAA,MAAAA,EACAH,EAAAL,IAAA,GAGAK,EAAAJ,KAAA,GAEA,WAEAO,MAAAA,GAAAA,MAAAA,EACA,UAEAA,MAAAA,GAAAA,MAAAA,EACA,OAEAA,MAAAA,GAAAA,MAAAA,EACA,WAUAJ,EAAAQ,GAAA,IACAP,CAAAA,EAAAN,WAAA,KAFA,CAKA","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/brainfuck.js","webpack://_N_E/<anon>"],"sourcesContent":["var reserve = \"><+-.,[]\".split(\"\");\n/*\n  comments can be either:\n  placed behind lines\n\n  +++    this is a comment\n\n  where reserved characters cannot be used\n  or in a loop\n  [\n  this is ok to use [ ] and stuff\n  ]\n  or preceded by #\n*/\nexport const brainfuck = {\n  name: \"brainfuck\",\n  startState: function() {\n    return {\n      commentLine: false,\n      left: 0,\n      right: 0,\n      commentLoop: false\n    }\n  },\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null\n    if(stream.sol()){\n      state.commentLine = false;\n    }\n    var ch = stream.next().toString();\n    if(reserve.indexOf(ch) !== -1){\n      if(state.commentLine === true){\n        if(stream.eol()){\n          state.commentLine = false;\n        }\n        return \"comment\";\n      }\n      if(ch === \"]\" || ch === \"[\"){\n        if(ch === \"[\"){\n          state.left++;\n        }\n        else{\n          state.right++;\n        }\n        return \"bracket\";\n      }\n      else if(ch === \"+\" || ch === \"-\"){\n        return \"keyword\";\n      }\n      else if(ch === \"<\" || ch === \">\"){\n        return \"atom\";\n      }\n      else if(ch === \".\" || ch === \",\"){\n        return \"def\";\n      }\n    }\n    else{\n      state.commentLine = true;\n      if(stream.eol()){\n        state.commentLine = false;\n      }\n      return \"comment\";\n    }\n    if(stream.eol()){\n      state.commentLine = false;\n    }\n  }\n};\n"],"names":["reserve","split","brainfuck","name","startState","commentLine","left","right","commentLoop","token","stream","state","eatSpace","sol","ch","next","toString","indexOf","eol"],"sourceRoot":""}