{"version":3,"file":"static/chunks/2877.9cde1236e676b7e2.js","mappings":"6IACA,IAAAA,EAAA,yDAEO,IAAAC,EAAA,CACPC,KAAA,OACAC,MAAA,SAAAC,CAAA,CAAAC,CAAA,EACA,IAAAC,EAAAF,EAAAG,IAAA,GACAC,EAAAH,EAAAI,OAAA,CAGA,GAFAJ,EAAAI,OAAA,IAEAH,KAAAA,GAAAF,CAAAA,GAAAA,EAAAM,GAAA,OAAAC,IAAA,CAAAP,EAAAQ,MAAA,CAAAC,MAAA,CAAAT,EAAAM,GAAA,MAEA,OADAN,EAAAU,SAAA,GACA,SACA,CAEA,GAAAV,EAAAW,KAAA,qCACA,eAEA,GAAAV,EAAAW,OAAA,EAAAZ,EAAAa,WAAA,GAAAZ,EAAAa,MAAA,CAC0B,OAA1Bd,EAAAU,SAAA,GAA0B,QACM,CAChC,GADMT,EAAAW,OAAA,EAA0BX,CAAAA,EAAAW,OAAA,KAChCZ,EAAAe,GAAA,IAKA,GAJAd,EAAAa,MAAA,GACAb,EAAAe,IAAA,IACAf,EAAAgB,SAAA,IAEAjB,EAAAW,KAAA,SAEAX,EAAAW,KAAA,QAFgC,YAIhC,GAAAX,EAAAW,KAAA,aAAsC,aACtC,GAEAX,EAAAW,KAAA,mBASA,MARAT,KAAAA,EACAD,EAAAiB,WAAA,GACAhB,KAAAA,EACAD,EAAAiB,WAAA,GACAhB,KAAAA,EACAD,EAAAkB,UAAA,GAEAlB,EAAAkB,UAAA,GACA,MACA,CAGA,GAAAlB,EAAAkB,UAAA,KAAAf,GAAAF,KAAAA,EAEA,OADAF,EAAAoB,IAAA,GACA,MACA,CAEA,GAAAnB,EAAAiB,WAAA,KAAAd,GAAAF,KAAAA,EAKA,OAJAD,EAAAa,MAAA,GACAb,EAAAe,IAAA,IACAf,EAAAgB,SAAA,IACAjB,EAAAoB,IAAA,GACA,MACA,CAGA,GAAAnB,EAAAgB,SAAA,EAEA,GAAAjB,EAAAW,KAAA,mBAAkE,OAAtBV,EAAAW,OAAA,IAAsB,OAElE,GAAAZ,EAAAW,KAAA,gCAAyD,iBAEzD,MAAAV,EAAAiB,WAAA,EAAAlB,EAAAW,KAAA,0BACAV,EAAAiB,WAAA,IAAAlB,EAAAW,KAAA,iCAD4E,eAG5E,GAAAX,EAAAW,KAAA,CAAAf,GAAwC,gBACxC,MAGA,CAAAK,EAAAe,IAAA,EAAAhB,EAAAW,KAAA,mFACAV,EAAAe,IAAA,IACAf,EAAAa,MAAA,CAAAd,EAAAa,WAAA,GACA,QAEAZ,EAAAe,IAAA,EAAAhB,EAAAW,KAAA,WAA+CV,EAAAgB,SAAA,IAAwB,SAGvEhB,EAAAgB,SAAA,IACAhB,EAAAI,OAAA,CAAAH,MAAAA,EACAF,EAAAoB,IAAA,GACA,KAPA,EASAC,WAAA,WACA,OACAL,KAAA,GACAC,UAAA,GACAH,OAAA,EACAI,YAAA,EACAC,WAAA,EACAP,QAAA,GACAP,QAAA,EACA,CACA,EACAiB,aAAA,CACAC,cAAA,CAAoBC,KAAA,IACpB,CACA","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/yaml.js","webpack://_N_E/<anon>"],"sourcesContent":["var cons = ['true', 'false', 'on', 'off', 'yes', 'no'];\nvar keywordRegex = new RegExp(\"\\\\b((\"+cons.join(\")|(\")+\"))$\", 'i');\n\nexport const yaml = {\n  name: \"yaml\",\n  token: function(stream, state) {\n    var ch = stream.peek();\n    var esc = state.escaped;\n    state.escaped = false;\n    /* comments */\n    if (ch == \"#\" && (stream.pos == 0 || /\\s/.test(stream.string.charAt(stream.pos - 1)))) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    if (stream.match(/^('([^']|\\\\.)*'?|\"([^\"]|\\\\.)*\"?)/))\n      return \"string\";\n\n    if (state.literal && stream.indentation() > state.keyCol) {\n      stream.skipToEnd(); return \"string\";\n    } else if (state.literal) { state.literal = false; }\n    if (stream.sol()) {\n      state.keyCol = 0;\n      state.pair = false;\n      state.pairStart = false;\n      /* document start */\n      if(stream.match('---')) { return \"def\"; }\n      /* document end */\n      if (stream.match('...')) { return \"def\"; }\n      /* array list item */\n      if (stream.match(/^\\s*-\\s+/)) { return 'meta'; }\n    }\n    /* inline pairs/lists */\n    if (stream.match(/^(\\{|\\}|\\[|\\])/)) {\n      if (ch == '{')\n        state.inlinePairs++;\n      else if (ch == '}')\n        state.inlinePairs--;\n      else if (ch == '[')\n        state.inlineList++;\n      else\n        state.inlineList--;\n      return 'meta';\n    }\n\n    /* list separator */\n    if (state.inlineList > 0 && !esc && ch == ',') {\n      stream.next();\n      return 'meta';\n    }\n    /* pairs separator */\n    if (state.inlinePairs > 0 && !esc && ch == ',') {\n      state.keyCol = 0;\n      state.pair = false;\n      state.pairStart = false;\n      stream.next();\n      return 'meta';\n    }\n\n    /* start of value of a pair */\n    if (state.pairStart) {\n      /* block literals */\n      if (stream.match(/^\\s*(\\||\\>)\\s*/)) { state.literal = true; return 'meta'; };\n      /* references */\n      if (stream.match(/^\\s*(\\&|\\*)[a-z0-9\\._-]+\\b/i)) { return 'variable'; }\n      /* numbers */\n      if (state.inlinePairs == 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?$/)) { return 'number'; }\n      if (state.inlinePairs > 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?(?=(,|}))/)) { return 'number'; }\n      /* keywords */\n      if (stream.match(keywordRegex)) { return 'keyword'; }\n    }\n\n    /* pairs (associative arrays) -> key */\n    if (!state.pair && stream.match(/^\\s*(?:[,\\[\\]{}&*!|>'\"%@`][^\\s'\":]|[^,\\[\\]{}#&*!|>'\"%@`])[^#]*?(?=\\s*:($|\\s))/)) {\n      state.pair = true;\n      state.keyCol = stream.indentation();\n      return \"atom\";\n    }\n    if (state.pair && stream.match(/^:\\s*/)) { state.pairStart = true; return 'meta'; }\n\n    /* nothing found, continue */\n    state.pairStart = false;\n    state.escaped = (ch == '\\\\');\n    stream.next();\n    return null;\n  },\n  startState: function() {\n    return {\n      pair: false,\n      pairStart: false,\n      keyCol: 0,\n      inlinePairs: 0,\n      inlineList: 0,\n      literal: false,\n      escaped: false\n    };\n  },\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n};\n"],"names":["keywordRegex","yaml","name","token","stream","state","ch","peek","esc","escaped","pos","test","string","charAt","skipToEnd","match","literal","indentation","keyCol","sol","pair","pairStart","inlinePairs","inlineList","next","startState","languageData","commentTokens","line"],"sourceRoot":""}