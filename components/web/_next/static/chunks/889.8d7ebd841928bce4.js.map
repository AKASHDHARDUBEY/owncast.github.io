{"version":3,"file":"static/chunks/889.8d7ebd841928bce4.js","mappings":"6IAAA,IAAAA,EAAA,wBAEA,SAAAC,EAAAC,CAAA,CAAAC,CAAA,EAEA,IADA,IAAAC,EAAAC,EAAAC,EAAA,GACA,CAAAJ,EAAAK,GAAA,KAAAH,EAAAF,EAAAM,IAAA,KAAAL,EAAAM,OAAA,GACA,GAAAL,MAAAA,GAAAC,MAAAA,GAAAF,KAAAA,EAAAM,OAAA,EACAH,EAAA,GACA,MACA,EACAF,CACA,CASA,OARAE,GACAJ,EAAAQ,MAAA,IAEAN,GAAAD,EAAAM,OAAA,CACAN,EAAAQ,cAAA,IAEAR,EAAAQ,cAAA,IAEA,QACA,CA4CO,IAAAC,EAAA,CACPC,KAAA,QACAC,WAAA,WACA,IAAAX,EAAA,GAKA,OAJAA,EAAAY,YAAA,IACAZ,EAAAa,SAAA,IACAb,EAAAQ,cAAA,IACAR,EAAAM,OAAA,IACAN,CACA,EACAc,MAAA,SAAAf,CAAA,CAAAC,CAAA,MApDAA,EACAe,SAoDA,EAAAC,QAAA,SArDAhB,EAsDAA,EAlDA,OAHAe,EAAAhB,EAAAM,IAAA,IAIA,EAAAY,KAAA,CAAApB,GACA,uBAEA,UADA,CAIA,EAAAW,cAAA,EAEAT,EAAAQ,MAAA,IACAT,EAwCAC,EAxCAC,IAIAD,EAAAkB,KAAA,iBAAAlB,EAAAkB,KAAA,mBACAlB,EAAAQ,MAAA,IACA,OAEAQ,KAAAA,GACAhB,EAAAmB,SAAA,GACA,WAGAH,KAAAA,GAAAA,KAAAA,GAEAf,EAAAM,OAAA,CAAAS,EAEAjB,EAuBAC,EAvBAC,IAEAe,KAAAA,GAAAA,KAAAA,EACA,UAEAA,EAAAE,KAAA,UACA,UAEAlB,EAAAoB,QAAA,UACA,KAzBA,CAsCA,CAGA","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/cmake.js","webpack://_N_E/<anon>"],"sourcesContent":["var variable_regex = /({)?[a-zA-Z0-9_]+(})?/;\n\nfunction tokenString(stream, state) {\n  var current, prev, found_var = false;\n  while (!stream.eol() && (current = stream.next()) != state.pending) {\n    if (current === '$' && prev != '\\\\' && state.pending == '\"') {\n      found_var = true;\n      break;\n    }\n    prev = current;\n  }\n  if (found_var) {\n    stream.backUp(1);\n  }\n  if (current == state.pending) {\n    state.continueString = false;\n  } else {\n    state.continueString = true;\n  }\n  return \"string\";\n}\n\nfunction tokenize(stream, state) {\n  var ch = stream.next();\n\n  // Have we found a variable?\n  if (ch === '$') {\n    if (stream.match(variable_regex)) {\n      return 'variableName.special';\n    }\n    return 'variable';\n  }\n  // Should we still be looking for the end of a string?\n  if (state.continueString) {\n    // If so, go through the loop again\n    stream.backUp(1);\n    return tokenString(stream, state);\n  }\n  // Do we just have a function on our hands?\n  // In 'cmake_minimum_required (VERSION 2.8.8)', 'cmake_minimum_required' is matched\n  if (stream.match(/(\\s+)?\\w+\\(/) || stream.match(/(\\s+)?\\w+\\ \\(/)) {\n    stream.backUp(1);\n    return 'def';\n  }\n  if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  // Have we found a string?\n  if (ch == \"'\" || ch == '\"') {\n    // Store the type (single or double)\n    state.pending = ch;\n    // Perform the looping function to find the end\n    return tokenString(stream, state);\n  }\n  if (ch == '(' || ch == ')') {\n    return 'bracket';\n  }\n  if (ch.match(/[0-9]/)) {\n    return 'number';\n  }\n  stream.eatWhile(/[\\w-]/);\n  return null;\n}\nexport const cmake = {\n  name: \"cmake\",\n  startState: function () {\n    var state = {};\n    state.inDefinition = false;\n    state.inInclude = false;\n    state.continueString = false;\n    state.pending = false;\n    return state;\n  },\n  token: function (stream, state) {\n    if (stream.eatSpace()) return null;\n    return tokenize(stream, state);\n  }\n};\n\n"],"names":["variable_regex","tokenString","stream","state","current","prev","found_var","eol","next","pending","backUp","continueString","cmake","name","startState","inDefinition","inInclude","token","ch","eatSpace","match","skipToEnd","eatWhile"],"sourceRoot":""}