{"version":3,"file":"static/chunks/4439.e594953a35a4e7bd.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/ruby.js","webpack://_N_E/<anon>"],"sourcesContent":["function wordObj(words) {\n  var o = {};\n  for (var i = 0, e = words.length; i < e; ++i) o[words[i]] = true;\n  return o;\n}\n\nvar keywordList = [\n  \"alias\", \"and\", \"BEGIN\", \"begin\", \"break\", \"case\", \"class\", \"def\", \"defined?\", \"do\", \"else\",\n  \"elsif\", \"END\", \"end\", \"ensure\", \"false\", \"for\", \"if\", \"in\", \"module\", \"next\", \"not\", \"or\",\n  \"redo\", \"rescue\", \"retry\", \"return\", \"self\", \"super\", \"then\", \"true\", \"undef\", \"unless\",\n  \"until\", \"when\", \"while\", \"yield\", \"nil\", \"raise\", \"throw\", \"catch\", \"fail\", \"loop\", \"callcc\",\n  \"caller\", \"lambda\", \"proc\", \"public\", \"protected\", \"private\", \"require\", \"load\",\n  \"require_relative\", \"extend\", \"autoload\", \"__END__\", \"__FILE__\", \"__LINE__\", \"__dir__\"\n], keywords = wordObj(keywordList);\n\nvar indentWords = wordObj([\"def\", \"class\", \"case\", \"for\", \"while\", \"until\", \"module\",\n                           \"catch\", \"loop\", \"proc\", \"begin\"]);\nvar dedentWords = wordObj([\"end\", \"until\"]);\nvar opening = {\"[\": \"]\", \"{\": \"}\", \"(\": \")\"};\nvar closing = {\"]\": \"[\", \"}\": \"{\", \")\": \"(\"};\n\nvar curPunc;\n\nfunction chain(newtok, stream, state) {\n  state.tokenize.push(newtok);\n  return newtok(stream, state);\n}\n\nfunction tokenBase(stream, state) {\n  if (stream.sol() && stream.match(\"=begin\") && stream.eol()) {\n    state.tokenize.push(readBlockComment);\n    return \"comment\";\n  }\n  if (stream.eatSpace()) return null;\n  var ch = stream.next(), m;\n  if (ch == \"`\" || ch == \"'\" || ch == '\"') {\n    return chain(readQuoted(ch, \"string\", ch == '\"' || ch == \"`\"), stream, state);\n  } else if (ch == \"/\") {\n    if (regexpAhead(stream))\n      return chain(readQuoted(ch, \"string.special\", true), stream, state);\n    else\n      return \"operator\";\n  } else if (ch == \"%\") {\n    var style = \"string\", embed = true;\n    if (stream.eat(\"s\")) style = \"atom\";\n    else if (stream.eat(/[WQ]/)) style = \"string\";\n    else if (stream.eat(/[r]/)) style = \"string.special\";\n    else if (stream.eat(/[wxq]/)) { style = \"string\"; embed = false; }\n    var delim = stream.eat(/[^\\w\\s=]/);\n    if (!delim) return \"operator\";\n    if (opening.propertyIsEnumerable(delim)) delim = opening[delim];\n    return chain(readQuoted(delim, style, embed, true), stream, state);\n  } else if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  } else if (ch == \"<\" && (m = stream.match(/^<([-~])[\\`\\\"\\']?([a-zA-Z_?]\\w*)[\\`\\\"\\']?(?:;|$)/))) {\n    return chain(readHereDoc(m[2], m[1]), stream, state);\n  } else if (ch == \"0\") {\n    if (stream.eat(\"x\")) stream.eatWhile(/[\\da-fA-F]/);\n    else if (stream.eat(\"b\")) stream.eatWhile(/[01]/);\n    else stream.eatWhile(/[0-7]/);\n    return \"number\";\n  } else if (/\\d/.test(ch)) {\n    stream.match(/^[\\d_]*(?:\\.[\\d_]+)?(?:[eE][+\\-]?[\\d_]+)?/);\n    return \"number\";\n  } else if (ch == \"?\") {\n    while (stream.match(/^\\\\[CM]-/)) {}\n    if (stream.eat(\"\\\\\")) stream.eatWhile(/\\w/);\n    else stream.next();\n    return \"string\";\n  } else if (ch == \":\") {\n    if (stream.eat(\"'\")) return chain(readQuoted(\"'\", \"atom\", false), stream, state);\n    if (stream.eat('\"')) return chain(readQuoted('\"', \"atom\", true), stream, state);\n\n    // :> :>> :< :<< are valid symbols\n    if (stream.eat(/[\\<\\>]/)) {\n      stream.eat(/[\\<\\>]/);\n      return \"atom\";\n    }\n\n    // :+ :- :/ :* :| :& :! are valid symbols\n    if (stream.eat(/[\\+\\-\\*\\/\\&\\|\\:\\!]/)) {\n      return \"atom\";\n    }\n\n    // Symbols can't start by a digit\n    if (stream.eat(/[a-zA-Z$@_\\xa1-\\uffff]/)) {\n      stream.eatWhile(/[\\w$\\xa1-\\uffff]/);\n      // Only one ? ! = is allowed and only as the last character\n      stream.eat(/[\\?\\!\\=]/);\n      return \"atom\";\n    }\n    return \"operator\";\n  } else if (ch == \"@\" && stream.match(/^@?[a-zA-Z_\\xa1-\\uffff]/)) {\n    stream.eat(\"@\");\n    stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n    return \"propertyName\";\n  } else if (ch == \"$\") {\n    if (stream.eat(/[a-zA-Z_]/)) {\n      stream.eatWhile(/[\\w]/);\n    } else if (stream.eat(/\\d/)) {\n      stream.eat(/\\d/);\n    } else {\n      stream.next(); // Must be a special global like $: or $!\n    }\n    return \"variableName.special\";\n  } else if (/[a-zA-Z_\\xa1-\\uffff]/.test(ch)) {\n    stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n    stream.eat(/[\\?\\!]/);\n    if (stream.eat(\":\")) return \"atom\";\n    return \"variable\";\n  } else if (ch == \"|\" && (state.varList || state.lastTok == \"{\" || state.lastTok == \"do\")) {\n    curPunc = \"|\";\n    return null;\n  } else if (/[\\(\\)\\[\\]{}\\\\;]/.test(ch)) {\n    curPunc = ch;\n    return null;\n  } else if (ch == \"-\" && stream.eat(\">\")) {\n    return \"operator\";\n  } else if (/[=+\\-\\/*:\\.^%<>~|]/.test(ch)) {\n    var more = stream.eatWhile(/[=+\\-\\/*:\\.^%<>~|]/);\n    if (ch == \".\" && !more) curPunc = \".\";\n    return \"operator\";\n  } else {\n    return null;\n  }\n}\n\nfunction regexpAhead(stream) {\n  var start = stream.pos, depth = 0, next, found = false, escaped = false\n  while ((next = stream.next()) != null) {\n    if (!escaped) {\n      if (\"[{(\".indexOf(next) > -1) {\n        depth++\n      } else if (\"]})\".indexOf(next) > -1) {\n        depth--\n        if (depth < 0) break\n      } else if (next == \"/\" && depth == 0) {\n        found = true\n        break\n      }\n      escaped = next == \"\\\\\"\n    } else {\n      escaped = false\n    }\n  }\n  stream.backUp(stream.pos - start)\n  return found\n}\n\nfunction tokenBaseUntilBrace(depth) {\n  if (!depth) depth = 1;\n  return function(stream, state) {\n    if (stream.peek() == \"}\") {\n      if (depth == 1) {\n        state.tokenize.pop();\n        return state.tokenize[state.tokenize.length-1](stream, state);\n      } else {\n        state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth - 1);\n      }\n    } else if (stream.peek() == \"{\") {\n      state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth + 1);\n    }\n    return tokenBase(stream, state);\n  };\n}\nfunction tokenBaseOnce() {\n  var alreadyCalled = false;\n  return function(stream, state) {\n    if (alreadyCalled) {\n      state.tokenize.pop();\n      return state.tokenize[state.tokenize.length-1](stream, state);\n    }\n    alreadyCalled = true;\n    return tokenBase(stream, state);\n  };\n}\nfunction readQuoted(quote, style, embed, unescaped) {\n  return function(stream, state) {\n    var escaped = false, ch;\n\n    if (state.context.type === 'read-quoted-paused') {\n      state.context = state.context.prev;\n      stream.eat(\"}\");\n    }\n\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && (unescaped || !escaped)) {\n        state.tokenize.pop();\n        break;\n      }\n      if (embed && ch == \"#\" && !escaped) {\n        if (stream.eat(\"{\")) {\n          if (quote == \"}\") {\n            state.context = {prev: state.context, type: 'read-quoted-paused'};\n          }\n          state.tokenize.push(tokenBaseUntilBrace());\n          break;\n        } else if (/[@\\$]/.test(stream.peek())) {\n          state.tokenize.push(tokenBaseOnce());\n          break;\n        }\n      }\n      escaped = !escaped && ch == \"\\\\\";\n    }\n    return style;\n  };\n}\nfunction readHereDoc(phrase, mayIndent) {\n  return function(stream, state) {\n    if (mayIndent) stream.eatSpace()\n    if (stream.match(phrase)) state.tokenize.pop();\n    else stream.skipToEnd();\n    return \"string\";\n  };\n}\nfunction readBlockComment(stream, state) {\n  if (stream.sol() && stream.match(\"=end\") && stream.eol())\n    state.tokenize.pop();\n  stream.skipToEnd();\n  return \"comment\";\n}\n\nexport const ruby = {\n  name: \"ruby\",\n  startState: function(indentUnit) {\n    return {tokenize: [tokenBase],\n            indented: 0,\n            context: {type: \"top\", indented: -indentUnit},\n            continuedLine: false,\n            lastTok: null,\n            varList: false};\n  },\n\n  token: function(stream, state) {\n    curPunc = null;\n    if (stream.sol()) state.indented = stream.indentation();\n    var style = state.tokenize[state.tokenize.length-1](stream, state), kwtype;\n    var thisTok = curPunc;\n    if (style == \"variable\") {\n      var word = stream.current();\n      style = state.lastTok == \".\" ? \"property\"\n        : keywords.propertyIsEnumerable(stream.current()) ? \"keyword\"\n        : /^[A-Z]/.test(word) ? \"tag\"\n        : (state.lastTok == \"def\" || state.lastTok == \"class\" || state.varList) ? \"def\"\n        : \"variable\";\n      if (style == \"keyword\") {\n        thisTok = word;\n        if (indentWords.propertyIsEnumerable(word)) kwtype = \"indent\";\n        else if (dedentWords.propertyIsEnumerable(word)) kwtype = \"dedent\";\n        else if ((word == \"if\" || word == \"unless\") && stream.column() == stream.indentation())\n          kwtype = \"indent\";\n        else if (word == \"do\" && state.context.indented < state.indented)\n          kwtype = \"indent\";\n      }\n    }\n    if (curPunc || (style && style != \"comment\")) state.lastTok = thisTok;\n    if (curPunc == \"|\") state.varList = !state.varList;\n\n    if (kwtype == \"indent\" || /[\\(\\[\\{]/.test(curPunc))\n      state.context = {prev: state.context, type: curPunc || style, indented: state.indented};\n    else if ((kwtype == \"dedent\" || /[\\)\\]\\}]/.test(curPunc)) && state.context.prev)\n      state.context = state.context.prev;\n\n    if (stream.eol())\n      state.continuedLine = (curPunc == \"\\\\\" || style == \"operator\");\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    if (state.tokenize[state.tokenize.length-1] != tokenBase) return null;\n    var firstChar = textAfter && textAfter.charAt(0);\n    var ct = state.context;\n    var closed = ct.type == closing[firstChar] ||\n        ct.type == \"keyword\" && /^(?:end|until|else|elsif|when|rescue)\\b/.test(textAfter);\n    return ct.indented + (closed ? 0 : cx.unit) +\n      (state.continuedLine ? cx.unit : 0);\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*(?:end|rescue|elsif|else|\\})$/,\n    commentTokens: {line: \"#\"},\n    autocomplete: keywordList\n  }\n};\n\n"],"names":["wordObj","words","o","i","e","length","curPunc","keywordList","keywords","indentWords","dedentWords","opening","closing","chain","newtok","stream","state","tokenize","push","tokenBase","sol","match","eol","readBlockComment","eatSpace","phrase","mayIndent","m","ch","next","readQuoted","regexpAhead","start","pos","depth","found","escaped","indexOf","backUp","style","embed","eat","delim","propertyIsEnumerable","skipToEnd","pop","eatWhile","test","varList","lastTok","more","quote","unescaped","context","type","prev","tokenBaseUntilBrace","peek","tokenBaseOnce","alreadyCalled","ruby","name","startState","indentUnit","indented","continuedLine","token","indentation","kwtype","thisTok","word","current","column","indent","textAfter","cx","firstChar","charAt","ct","closed","unit","languageData","indentOnInput","commentTokens","line","autocomplete"],"sourceRoot":""}