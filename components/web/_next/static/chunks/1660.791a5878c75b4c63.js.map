{"version":3,"file":"static/chunks/1660.791a5878c75b4c63.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/d.js","webpack://_N_E/<anon>"],"sourcesContent":["function words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\n\nvar blockKeywordsStr = \"body catch class do else enum for foreach foreach_reverse if in interface mixin \" +\n    \"out scope struct switch try union unittest version while with\";\n\nconst parserConfig = {\n  keywords: words(\"abstract alias align asm assert auto break case cast cdouble cent cfloat const continue \" +\n                  \"debug default delegate delete deprecated export extern final finally function goto immutable \" +\n                  \"import inout invariant is lazy macro module new nothrow override package pragma private \" +\n                  \"protected public pure ref return shared short static super synchronized template this \" +\n                  \"throw typedef typeid typeof volatile __FILE__ __LINE__ __gshared __traits __vector __parameters \" +\n                  blockKeywordsStr),\n  blockKeywords: words(blockKeywordsStr),\n  builtin: words(\"bool byte char creal dchar double float idouble ifloat int ireal long real short ubyte \" +\n                 \"ucent uint ulong ushort wchar wstring void size_t sizediff_t\"),\n  atoms: words(\"exit failure success true false null\"),\n  hooks: {\n    \"@\": function(stream, _state) {\n      stream.eatWhile(/[\\w\\$_]/);\n      return \"meta\";\n    }\n  }\n}\n\nvar statementIndentUnit = parserConfig.statementIndentUnit,\n    keywords = parserConfig.keywords,\n    builtin = parserConfig.builtin,\n    blockKeywords = parserConfig.blockKeywords,\n    atoms = parserConfig.atoms,\n    hooks = parserConfig.hooks,\n    multiLineStrings = parserConfig.multiLineStrings;\nvar isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\n\nvar curPunc;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (hooks[ch]) {\n    var result = hooks[ch](stream, state);\n    if (result !== false) return result;\n  }\n  if (ch == '\"' || ch == \"'\" || ch == \"`\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n  if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n    curPunc = ch;\n    return null;\n  }\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n  if (ch == \"/\") {\n    if (stream.eat(\"+\")) {\n      state.tokenize = tokenNestedComment;\n      return tokenNestedComment(stream, state);\n    }\n    if (stream.eat(\"*\")) {\n      state.tokenize = tokenComment;\n      return tokenComment(stream, state);\n    }\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n  if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n  var cur = stream.current();\n  if (keywords.propertyIsEnumerable(cur)) {\n    if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n    return \"keyword\";\n  }\n  if (builtin.propertyIsEnumerable(cur)) {\n    if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n    return \"builtin\";\n  }\n  if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n  return \"variable\";\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {end = true; break;}\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !(escaped || multiLineStrings))\n      state.tokenize = null;\n    return \"string\";\n  };\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize = null;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction tokenNestedComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize = null;\n      break;\n    }\n    maybeEnd = (ch == \"+\");\n  }\n  return \"comment\";\n}\n\nfunction Context(indented, column, type, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.align = align;\n  this.prev = prev;\n}\nfunction pushContext(state, col, type) {\n  var indent = state.indented;\n  if (state.context && state.context.type == \"statement\")\n    indent = state.context.indented;\n  return state.context = new Context(indent, col, type, null, state.context);\n}\nfunction popContext(state) {\n  var t = state.context.type;\n  if (t == \")\" || t == \"]\" || t == \"}\")\n    state.indented = state.context.indented;\n  return state.context = state.context.prev;\n}\n\n// Interface\n\nexport const d = {\n  name: \"d\",\n  startState: function(indentUnit) {\n    return {\n      tokenize: null,\n      context: new Context(-indentUnit, 0, \"top\", false),\n      indented: 0,\n      startOfLine: true\n    };\n  },\n\n  token: function(stream, state) {\n    var ctx = state.context;\n    if (stream.sol()) {\n      if (ctx.align == null) ctx.align = false;\n      state.indented = stream.indentation();\n      state.startOfLine = true;\n    }\n    if (stream.eatSpace()) return null;\n    curPunc = null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\" || style == \"meta\") return style;\n    if (ctx.align == null) ctx.align = true;\n\n    if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\") && ctx.type == \"statement\") popContext(state);\n    else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n    else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n    else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n    else if (curPunc == \"}\") {\n      while (ctx.type == \"statement\") ctx = popContext(state);\n      if (ctx.type == \"}\") ctx = popContext(state);\n      while (ctx.type == \"statement\") ctx = popContext(state);\n    }\n    else if (curPunc == ctx.type) popContext(state);\n    else if (((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';') || (ctx.type == \"statement\" && curPunc == \"newstatement\"))\n      pushContext(state, stream.column(), \"statement\");\n    state.startOfLine = false;\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    if (state.tokenize != tokenBase && state.tokenize != null) return null;\n    var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);\n    if (ctx.type == \"statement\" && firstChar == \"}\") ctx = ctx.prev;\n    var closing = firstChar == ctx.type;\n    if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : statementIndentUnit || cx.unit);\n    else if (ctx.align) return ctx.column + (closing ? 0 : 1);\n    else return ctx.indented + (closing ? 0 : cx.unit);\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*[{}]$/,\n    commentTokens: {line: \"//\", block: {open: \"/*\", close: \"*/\"}}\n  }\n};\n"],"names":["words","str","obj","split","i","length","curPunc","blockKeywordsStr","parserConfig","keywords","blockKeywords","builtin","atoms","hooks","stream","_state","eatWhile","statementIndentUnit","multiLineStrings","isOperatorChar","tokenBase","state","ch","next","result","tokenize","escaped","end","test","eat","tokenNestedComment","tokenComment","skipToEnd","cur","current","propertyIsEnumerable","maybeEnd","Context","indented","column","type","align","prev","pushContext","col","indent","context","popContext","t","d","name","startState","indentUnit","startOfLine","token","ctx","sol","indentation","eatSpace","style","textAfter","cx","firstChar","charAt","closing","unit","languageData","indentOnInput","commentTokens","line","block","open","close"],"sourceRoot":""}