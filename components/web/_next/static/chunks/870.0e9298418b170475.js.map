{"version":3,"file":"static/chunks/870.0e9298418b170475.js","mappings":"2IAAA,IAAAA,EAAA,CACA,wBACA,0BACA,6BACA,+BACA,4BACA,yBACA,2BACA,gCACA,oBACA,oCACA,kCACA,gCACA,6BACA,qCACA,sBACA,6BACA,oBACA,yBACA,gCACA,sBACA,sBACA,sBACA,4BACA,kBACA,uBACA,0BACA,sBACA,gBACA,iBACA,iBACA,kBACA,0BACA,yBACA,+BACA,yBACA,mCACA,uBACA,qBACA,kBACA,oCACA,uBACA,mBACA,qBACA,uBACA,oBACA,oBACA,iCACA,qBACA,oBACA,sBAGAC,EAAA,aACAC,EAAA,IACAC,EAAA,yDACAC,EAAA,IACAC,EAAA,UAEAC,EAAA,SAAAC,CAAA,EACA,IAAAC,EAEA,OADAA,EAAA,GACA,SAAAC,CAAA,SAEA,EADAA,EACAA,IAAAF,GACAC,OAAAA,CACA,CAGA,EAEO,IAAAE,EAAA,CACPC,KAAA,MACAC,WAAA,WACA,OACAJ,KAAA,GACAK,KAAA,GACAC,GAAA,GACAC,OAAA,GACAC,OAAA,EACA,CACA,EACAC,MAAA,SAAAC,CAAA,CAAAC,CAAA,EACA,IAAAC,SACA,EAAAC,QAAA,GACA,KAGAD,MADAA,CAAAA,EAAAF,EAAAI,IAAA,KACAF,MAAAA,GACAF,EAAAK,QAAA,CAAAjB,EAAAc,IACAF,EAAAI,IAAA,GACAH,EAAAX,IAAA,IACA,UAEA,UAAagB,IAAA,CAAAJ,IACbD,EAAAX,IAAA,IACA,MAEA,UAAagB,IAAA,CAAAJ,IACbD,EAAAX,IAAA,IACA,MAEAN,EAAAsB,IAAA,CAAAJ,IACAD,EAAAX,IAAA,IACA,QAEA,QAAAgB,IAAA,CAAAJ,IACAD,EAAAN,IAAA,EACAM,EAAAN,IAAA,IACAM,EAAAX,IAAA,KAEAW,EAAAX,IAAA,IAEAU,EAAAK,QAAA,WACA,UAEAtB,EAAAuB,IAAA,CAAAJ,IAGAhB,EAAAoB,IAAA,CAAAJ,GAFA,WAKAjB,EAAAqB,IAAA,CAAAJ,IACAD,EAAAN,IAAA,IACAM,EAAAX,IAAA,IACAR,CAAA,CAAAoB,EAAA,2DAEAf,EAAAmB,IAAA,CAAAJ,IACAF,EAAAO,SAAA,GACA,WAEAL,MAAAA,GAAAF,MAAAA,EAAAQ,IAAA,IACAR,EAAAI,IAAA,GACA,0BAEAJ,EAAAK,QAAA,YACAJ,EAAAX,IAAA,IACA,UAnDA,CAqDA","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/apl.js","webpack://_N_E/<anon>"],"sourcesContent":["var builtInFuncs = {\n  \"+\": [\"conjugate\", \"add\"],\n  \"−\": [\"negate\", \"subtract\"],\n  \"×\": [\"signOf\", \"multiply\"],\n  \"÷\": [\"reciprocal\", \"divide\"],\n  \"⌈\": [\"ceiling\", \"greaterOf\"],\n  \"⌊\": [\"floor\", \"lesserOf\"],\n  \"∣\": [\"absolute\", \"residue\"],\n  \"⍳\": [\"indexGenerate\", \"indexOf\"],\n  \"?\": [\"roll\", \"deal\"],\n  \"⋆\": [\"exponentiate\", \"toThePowerOf\"],\n  \"⍟\": [\"naturalLog\", \"logToTheBase\"],\n  \"○\": [\"piTimes\", \"circularFuncs\"],\n  \"!\": [\"factorial\", \"binomial\"],\n  \"⌹\": [\"matrixInverse\", \"matrixDivide\"],\n  \"<\": [null, \"lessThan\"],\n  \"≤\": [null, \"lessThanOrEqual\"],\n  \"=\": [null, \"equals\"],\n  \">\": [null, \"greaterThan\"],\n  \"≥\": [null, \"greaterThanOrEqual\"],\n  \"≠\": [null, \"notEqual\"],\n  \"≡\": [\"depth\", \"match\"],\n  \"≢\": [null, \"notMatch\"],\n  \"∈\": [\"enlist\", \"membership\"],\n  \"⍷\": [null, \"find\"],\n  \"∪\": [\"unique\", \"union\"],\n  \"∩\": [null, \"intersection\"],\n  \"∼\": [\"not\", \"without\"],\n  \"∨\": [null, \"or\"],\n  \"∧\": [null, \"and\"],\n  \"⍱\": [null, \"nor\"],\n  \"⍲\": [null, \"nand\"],\n  \"⍴\": [\"shapeOf\", \"reshape\"],\n  \",\": [\"ravel\", \"catenate\"],\n  \"⍪\": [null, \"firstAxisCatenate\"],\n  \"⌽\": [\"reverse\", \"rotate\"],\n  \"⊖\": [\"axis1Reverse\", \"axis1Rotate\"],\n  \"⍉\": [\"transpose\", null],\n  \"↑\": [\"first\", \"take\"],\n  \"↓\": [null, \"drop\"],\n  \"⊂\": [\"enclose\", \"partitionWithAxis\"],\n  \"⊃\": [\"diclose\", \"pick\"],\n  \"⌷\": [null, \"index\"],\n  \"⍋\": [\"gradeUp\", null],\n  \"⍒\": [\"gradeDown\", null],\n  \"⊤\": [\"encode\", null],\n  \"⊥\": [\"decode\", null],\n  \"⍕\": [\"format\", \"formatByExample\"],\n  \"⍎\": [\"execute\", null],\n  \"⊣\": [\"stop\", \"left\"],\n  \"⊢\": [\"pass\", \"right\"]\n};\n\nvar isOperator = /[\\.\\/⌿⍀¨⍣]/;\nvar isNiladic = /⍬/;\nvar isFunction = /[\\+−×÷⌈⌊∣⍳\\?⋆⍟○!⌹<≤=>≥≠≡≢∈⍷∪∩∼∨∧⍱⍲⍴,⍪⌽⊖⍉↑↓⊂⊃⌷⍋⍒⊤⊥⍕⍎⊣⊢]/;\nvar isArrow = /←/;\nvar isComment = /[⍝#].*$/;\n\nvar stringEater = function(type) {\n  var prev;\n  prev = false;\n  return function(c) {\n    prev = c;\n    if (c === type) {\n      return prev === \"\\\\\";\n    }\n    return true;\n  };\n};\n\nexport const apl = {\n  name: \"apl\",\n  startState: function() {\n    return {\n      prev: false,\n      func: false,\n      op: false,\n      string: false,\n      escape: false\n    };\n  },\n  token: function(stream, state) {\n    var ch;\n    if (stream.eatSpace()) {\n      return null;\n    }\n    ch = stream.next();\n    if (ch === '\"' || ch === \"'\") {\n      stream.eatWhile(stringEater(ch));\n      stream.next();\n      state.prev = true;\n      return \"string\";\n    }\n    if (/[\\[{\\(]/.test(ch)) {\n      state.prev = false;\n      return null;\n    }\n    if (/[\\]}\\)]/.test(ch)) {\n      state.prev = true;\n      return null;\n    }\n    if (isNiladic.test(ch)) {\n      state.prev = false;\n      return \"atom\";\n    }\n    if (/[¯\\d]/.test(ch)) {\n      if (state.func) {\n        state.func = false;\n        state.prev = false;\n      } else {\n        state.prev = true;\n      }\n      stream.eatWhile(/[\\w\\.]/);\n      return \"number\";\n    }\n    if (isOperator.test(ch)) {\n      return \"operator\"\n    }\n    if (isArrow.test(ch)) {\n      return \"operator\";\n    }\n    if (isFunction.test(ch)) {\n      state.func = true;\n      state.prev = false;\n      return builtInFuncs[ch] ? \"variableName.function.standard\" : \"variableName.function\"\n    }\n    if (isComment.test(ch)) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    if (ch === \"∘\" && stream.peek() === \".\") {\n      stream.next();\n      return \"variableName.function\";\n    }\n    stream.eatWhile(/[\\w\\$_]/);\n    state.prev = true;\n    return \"keyword\";\n  }\n}\n"],"names":["builtInFuncs","isOperator","isNiladic","isFunction","isArrow","isComment","stringEater","type","prev","c","apl","name","startState","func","op","string","escape","token","stream","state","ch","eatSpace","next","eatWhile","test","skipToEnd","peek"],"sourceRoot":""}