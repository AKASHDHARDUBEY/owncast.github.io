{"version":3,"file":"static/chunks/9232.4cdcb0c38273757b.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/yacas.js","webpack://_N_E/<anon>"],"sourcesContent":["function words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\n\nvar bodiedOps = words(\"Assert BackQuote D Defun Deriv For ForEach FromFile \" +\n                      \"FromString Function Integrate InverseTaylor Limit \" +\n                      \"LocalSymbols Macro MacroRule MacroRulePattern \" +\n                      \"NIntegrate Rule RulePattern Subst TD TExplicitSum \" +\n                      \"TSum Taylor Taylor1 Taylor2 Taylor3 ToFile \" +\n                      \"ToStdout ToString TraceRule Until While\");\n\n// patterns\nvar pFloatForm  = \"(?:(?:\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)(?:[eE][+-]?\\\\d+)?)\";\nvar pIdentifier = \"(?:[a-zA-Z\\\\$'][a-zA-Z0-9\\\\$']*)\";\n\n// regular expressions\nvar reFloatForm    = new RegExp(pFloatForm);\nvar reIdentifier   = new RegExp(pIdentifier);\nvar rePattern      = new RegExp(pIdentifier + \"?_\" + pIdentifier);\nvar reFunctionLike = new RegExp(pIdentifier + \"\\\\s*\\\\(\");\n\nfunction tokenBase(stream, state) {\n  var ch;\n\n  // get next character\n  ch = stream.next();\n\n  // string\n  if (ch === '\"') {\n    state.tokenize = tokenString;\n    return state.tokenize(stream, state);\n  }\n\n  // comment\n  if (ch === '/') {\n    if (stream.eat('*')) {\n      state.tokenize = tokenComment;\n      return state.tokenize(stream, state);\n    }\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n\n  // go back one character\n  stream.backUp(1);\n\n  // update scope info\n  var m = stream.match(/^(\\w+)\\s*\\(/, false);\n  if (m !== null && bodiedOps.hasOwnProperty(m[1]))\n    state.scopes.push('bodied');\n\n  var scope = currentScope(state);\n\n  if (scope === 'bodied' && ch === '[')\n    state.scopes.pop();\n\n  if (ch === '[' || ch === '{' || ch === '(')\n    state.scopes.push(ch);\n\n  scope = currentScope(state);\n\n  if (scope === '[' && ch === ']' ||\n      scope === '{' && ch === '}' ||\n      scope === '(' && ch === ')')\n    state.scopes.pop();\n\n  if (ch === ';') {\n    while (scope === 'bodied') {\n      state.scopes.pop();\n      scope = currentScope(state);\n    }\n  }\n\n  // look for ordered rules\n  if (stream.match(/\\d+ *#/, true, false)) {\n    return 'qualifier';\n  }\n\n  // look for numbers\n  if (stream.match(reFloatForm, true, false)) {\n    return 'number';\n  }\n\n  // look for placeholders\n  if (stream.match(rePattern, true, false)) {\n    return 'variableName.special';\n  }\n\n  // match all braces separately\n  if (stream.match(/(?:\\[|\\]|{|}|\\(|\\))/, true, false)) {\n    return 'bracket';\n  }\n\n  // literals looking like function calls\n  if (stream.match(reFunctionLike, true, false)) {\n    stream.backUp(1);\n    return 'variableName.function';\n  }\n\n  // all other identifiers\n  if (stream.match(reIdentifier, true, false)) {\n    return 'variable';\n  }\n\n  // operators; note that operators like @@ or /; are matched separately for each symbol.\n  if (stream.match(/(?:\\\\|\\+|\\-|\\*|\\/|,|;|\\.|:|@|~|=|>|<|&|\\||_|`|'|\\^|\\?|!|%|#)/, true, false)) {\n    return 'operator';\n  }\n\n  // everything else is an error\n  return 'error';\n}\n\nfunction tokenString(stream, state) {\n  var next, end = false, escaped = false;\n  while ((next = stream.next()) != null) {\n    if (next === '\"' && !escaped) {\n      end = true;\n      break;\n    }\n    escaped = !escaped && next === '\\\\';\n  }\n  if (end && !escaped) {\n    state.tokenize = tokenBase;\n  }\n  return 'string';\n};\n\nfunction tokenComment(stream, state) {\n  var prev, next;\n  while((next = stream.next()) != null) {\n    if (prev === '*' && next === '/') {\n      state.tokenize = tokenBase;\n      break;\n    }\n    prev = next;\n  }\n  return 'comment';\n}\n\nfunction currentScope(state) {\n  var scope = null;\n  if (state.scopes.length > 0)\n    scope = state.scopes[state.scopes.length - 1];\n  return scope;\n}\n\nexport const yacas = {\n  name: \"yacas\",\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      scopes: []\n    };\n  },\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    return state.tokenize(stream, state);\n  },\n  indent: function(state, textAfter, cx) {\n    if (state.tokenize !== tokenBase && state.tokenize !== null)\n      return null;\n\n    var delta = 0;\n    if (textAfter === ']' || textAfter === '];' ||\n        textAfter === '}' || textAfter === '};' ||\n        textAfter === ');')\n      delta = -1;\n\n    return (state.scopes.length + delta) * cx.unit;\n  },\n\n  languageData: {\n    electricInput: /[{}\\[\\]()\\;]/,\n    commentTokens: {line: \"//\", block: {open: \"/*\", close: \"*/\"}}\n  }\n};\n"],"names":["bodiedOps","words","str","obj","split","i","length","pIdentifier","reFloatForm","reIdentifier","rePattern","reFunctionLike","tokenBase","stream","state","ch","next","tokenize","tokenString","eat","tokenComment","skipToEnd","backUp","m","match","hasOwnProperty","scopes","push","scope","currentScope","pop","end","escaped","prev","yacas","name","startState","token","eatSpace","indent","textAfter","cx","delta","unit","languageData","electricInput","commentTokens","line","block","open","close"],"sourceRoot":""}