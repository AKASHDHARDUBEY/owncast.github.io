{"version":3,"file":"static/chunks/7001.d89855ffb5255fd3.js","mappings":"8JAEO,IAAAA,EAAe,GAAAC,EAAAC,CAAA,EAAU,CAChCC,MAAA,CAEA,CAAOC,MAAA,QAAAC,MAAA,WAEP,CAAOD,MAAA,MAAAC,MAAA,SAAAC,KAAA,WACP,CAAOF,MAAA,gBAAAC,MAAA,iBAAAC,KAAA,WACP,CAAOF,MAAA,QAAAC,MAAA,SAAAC,KAAA,UAEP,CAAOF,MAAA,kEAAAC,MAAA,UAGP,CAAOD,MAAA,yCAAAC,MAAA,sCAAAC,KAAA,SAEP,CAAOF,MAAA,4BAAAC,MAAA,mCAEP,CAAOD,MAAA,UAAAC,MAAA,UAAAC,KAAA,cAEP,CAAOF,MAAA,iCAAAC,MAAA,wBAEP,CAAOD,MAAA,4BAAAC,MAAA,wBAEP,CAAOD,MAAA,qFAAiFC,MAAA,WAExF,CAAOD,MAAA,0BAAAC,MAAA,WACP,CAAOD,MAAA,qBAAAC,MAAA,WAEP,CAAOD,MAAA,6BAAAC,MAAA,WAEP,CAAOD,MAAA,MAAAC,MAAA,YACP,CAAOD,MAAA,QAAAC,MAAA,MACP,CACAE,WAAA,CACA,CAAOH,MAAA,IAASC,MAAA,UAAAC,KAAA,SAChB,CAAOF,MAAA,MAAAC,MAAA,OACP,CAAOD,MAAA,QAAAC,MAAA,MACP,CACAG,OAAA,CACA,CAAOJ,MAAA,mBAAAC,MAAA,SAAAC,KAAA,SACP,CAAOF,MAAA,KAAAC,MAAA,UACP,CACAI,QAAA,CACA,CAAOL,MAAA,KAAUC,MAAA,UAAAC,KAAA,SACjB,CAAOF,MAAA,KAAAC,MAAA,UACP,CACAK,QAAA,CACA,CAAON,MAAA,qBAAAC,MAAA,SAAAC,KAAA,SACP,CAAOF,MAAA,KAAAC,MAAA,UACP,CACAM,MAAA,CACA,CAAOP,MAAA,KAAAC,MAAA,UAAAC,KAAA,SACP,CAAOF,MAAA,KAAAC,MAAA,WACP,CAAOD,MAAA,MAAAC,MAAA,QACP,CAAOD,MAAA,QAAAC,MAAA,MACP,CACAO,aAAA,CACAC,KAAA,SACAC,iBAAA,kDACAC,cAAA,CAAsBC,KAAA,IACtB,CACA,0BC9DO,SAAAC,EAAAC,CAAA,EACPC,EAAAD,EAAA,SACA,IAAAE,EAAA,GAAkBC,EAAAH,EAAAN,YAAA,KAAkCU,EAAA,GACpD,QAAAC,KAAAL,EAAA,GAAAK,GAAAF,GAAAH,EAAAM,cAAA,CAAAD,GAEA,QADAE,EAAAL,CAAA,CAAAG,EAAA,IAAAG,EAAAR,CAAA,CAAAK,EAAA,CACAI,EAAA,EAAoBA,EAAAD,EAAAE,MAAA,CAAiBD,IAAA,CACrC,IAAAE,EAAAH,CAAA,CAAAC,EAAA,CACAF,EAAAK,IAAA,KAAAC,EAAAF,EAAAX,IACAW,CAAAA,EAAAG,MAAA,EAAAH,EAAAI,MAAA,GAAAX,CAAAA,EAAA,GACA,CACA,MACA,CACAT,KAAAQ,EAAAR,IAAA,CACAqB,WAAA,WACA,OAAcX,MAAA,QAAAY,QAAA,KAAAH,OAAAV,EAAA,QACd,EACAc,UAAA,SAAAb,CAAA,EACA,IAAAc,EAAA,CAAed,MAAAA,EAAAA,KAAA,CAAAY,QAAAZ,EAAAY,OAAA,CAAAH,OAAAT,EAAAS,MAAA,EAAAT,EAAAS,MAAA,CAAAM,KAAA,KAGf,OAFAf,EAAAZ,KAAA,EACA0B,CAAAA,EAAA1B,KAAA,CAAAY,EAAAZ,KAAA,CAAA2B,KAAA,KACAD,CACA,EACAhC,MAyCA,SAAAkC,CAAA,CAAAhB,CAAA,EACA,GAAAA,EAAAY,OAAA,EACA,IAAAK,EAAAjB,EAAAY,OAAA,CAAAM,KAAA,GAGA,OAFA,GAAAlB,EAAAY,OAAA,CAAAP,MAAA,EAAAL,CAAAA,EAAAY,OAAA,OACAI,EAAAG,GAAA,EAAAF,EAAAG,IAAA,CAAAf,MAAA,CACAY,EAAAnC,KAAA,CACA,IAGA,IADAuC,EAAA1B,CAAA,CAAAK,EAAAA,KAAA,EACAI,EAAA,EAAoBA,EAAAiB,EAAAhB,MAAA,CAAqBD,IAAA,CACzC,IAAAkB,EAAAD,CAAA,CAAAjB,EAAA,CACAmB,EAAA,EAAAD,EAAAhB,IAAA,CAAAkB,GAAA,EAAAR,EAAAQ,GAAA,KAAAR,EAAAS,KAAA,CAAAH,EAAAzC,KAAA,EACA,GAAA0C,EAAA,CACAD,EAAAhB,IAAA,CAAAvB,IAAA,CACAiB,EAAAA,KAAA,CAAAsB,EAAAhB,IAAA,CAAAvB,IAAA,CACUuC,EAAAhB,IAAA,CAAAC,IAAA,EACV,CAAAP,EAAAZ,KAAA,EAAAY,CAAAA,EAAAZ,KAAA,MAAAmB,IAAA,CAAAP,EAAAA,KAAA,EACAA,EAAAA,KAAA,CAAAsB,EAAAhB,IAAA,CAAAC,IAAA,EACUe,EAAAhB,IAAA,CAAAoB,GAAA,EAAA1B,EAAAZ,KAAA,EAAAY,EAAAZ,KAAA,CAAAiB,MAAA,EACVL,CAAAA,EAAAA,KAAA,CAAAA,EAAAZ,KAAA,CAAAsC,GAAA,IAGAJ,EAAAhB,IAAA,CAAAG,MAAA,EACAT,EAAAS,MAAA,CAAAF,IAAA,CAAAS,EAAAW,WAAA,GAAAX,EAAAY,UAAA,EACAN,EAAAhB,IAAA,CAAAI,MAAA,EACAV,EAAAS,MAAA,CAAAiB,GAAA,GACA,IAAA5C,EAAAwC,EAAAxC,KAAA,CAEA,GADAA,GAAAA,EAAA+C,KAAA,EAAA/C,CAAAA,EAAAA,EAAAyC,EAAA,EACAA,EAAAlB,MAAA,IAAAiB,EAAAxC,KAAA,mBAAAwC,EAAAxC,KAAA,EACAkB,EAAAY,OAAA,IACA,QAAAkB,EAAA,EAA0BA,EAAAP,EAAAlB,MAAA,CAAoByB,IAC9CP,CAAA,CAAAO,EAAA,EACA9B,EAAAY,OAAA,CAAAL,IAAA,EAAkCa,KAAAG,CAAA,CAAAO,EAAA,CAAAhD,MAAAwC,EAAAxC,KAAA,CAAAgD,EAAA,KAElC,OADAd,EAAAe,MAAA,CAAAR,CAAA,IAAAlB,MAAA,CAAAkB,CAAAA,CAAA,IAAAA,CAAA,IAAAlB,MAAA,KACAvB,CAAA,IAKA,GAJUA,GAAAA,EAAAkD,IAAA,CACV,OAAAlD,CAAA,IAEA,OAAAA,CAEA,EAGA,OADAkC,EAAAjC,IAAA,GACA,MAnFA0B,OAwFA,SAAAT,CAAA,CAAAiC,CAAA,EACA,GAAAjC,IAAA,EAAAA,EAAAS,MAAA,EAAAX,EAAAP,gBAAA,EAAAO,EAAAoC,eAAA,CAAAC,OAAA,CAAAnC,EAAAA,KAAA,KACA,YAEA,IAAAmB,EAAAnB,EAAAS,MAAA,CAAAJ,MAAA,GAAA+B,EAAAzC,CAAA,CAAAK,EAAAA,KAAA,EACAqC,EAAA,OAAiB,CACjB,QAAAjC,EAAA,EAAsBA,EAAAgC,EAAA/B,MAAA,CAAkBD,IAAA,CACxC,IAAAkB,EAAAc,CAAA,CAAAhC,EAAA,CACA,GAAAkB,EAAAhB,IAAA,CAAAI,MAAA,EAAAY,CAAA,IAAAA,EAAAhB,IAAA,CAAAgC,iBAAA,EACA,IAAAC,EAAAjB,EAAAzC,KAAA,CAAA2D,IAAA,CAAAP,GACA,GAAAM,GAAAA,CAAA,KACApB,IACAG,CAAAA,EAAAvC,IAAA,EAAAuC,EAAAf,IAAA,GAAA6B,CAAAA,EAAAzC,CAAA,CAAA2B,EAAAvC,IAAA,EAAAuC,EAAAf,IAAA,GACA0B,EAAAA,EAAAlB,KAAA,CAAAwB,CAAA,IAAAlC,MAAA,EACA,SAAAgC,CAAA,CACA,CACA,CAEA,MAEA,OAAAlB,EAAA,IAAAnB,EAAAS,MAAA,CAAAU,EAAA,EA3GA9B,aAAAS,CACA,CACA,CAEA,SAAAF,EAAAD,CAAA,CAAAL,CAAA,EACA,IAAAK,EAAAM,cAAA,CAAAX,GACA,+BAAAA,EAAA,mBAyBA,SAAAkB,EAAAF,CAAA,CAAAX,CAAA,EACAW,CAAAA,EAAAvB,IAAA,EAAAuB,EAAAC,IAAA,GAAAX,EAAAD,EAAAW,EAAAvB,IAAA,EAAAuB,EAAAC,IAAA,EACA,KAAA1B,KAAA,CAAA4D,SAxBAC,CAAA,CAAAC,CAAA,EACA,IAAAD,EAAA,aACA,IAAAE,EAAA,GAOA,OANAF,aAAAG,QACAH,EAAAI,UAAA,EAAAF,CAAAA,EAAA,KACAF,EAAAA,EAAAK,MAAA,EAEAL,EAAAM,OAAAN,GAEA,cAAAA,EAAA,IAAAE,EACA,EAcAtC,EAAAzB,KAAA,EACA,KAAAC,KAAA,CAAAmE,SAbAP,CAAA,EACA,IAAAA,EAAA,YACA,GAAAA,EAAAb,KAAA,QAAAa,CAAA,CACA,oBAAAA,EAAA,OAAAA,EAAAQ,OAAA,YAEA,QADAC,EAAA,GACA/C,EAAA,EAAkBA,EAAAsC,EAAArC,MAAA,CAAgBD,IAClC+C,EAAA5C,IAAA,CAAAmC,CAAA,CAAAtC,EAAA,EAAAsC,CAAA,CAAAtC,EAAA,CAAA8C,OAAA,aACA,OAAAC,CACA,EAKA7C,EAAAxB,KAAA,EACA,KAAAwB,IAAA,CAAAA,CACA","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/factor.js","webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/simple-mode.js","webpack://_N_E/<anon>"],"sourcesContent":["import {simpleMode} from \"./simple-mode.js\"\n\nexport const factor = simpleMode({\n    start: [\n      // comments\n      {regex: /#?!.*/, token: \"comment\"},\n      // strings \"\"\", multiline --> state\n      {regex: /\"\"\"/, token: \"string\", next: \"string3\"},\n      {regex: /(STRING:)(\\s)/, token: [\"keyword\", null], next: \"string2\"},\n      {regex: /\\S*?\"/, token: \"string\", next: \"string\"},\n      // numbers: dec, hex, unicode, bin, fractional, complex\n      {regex: /(?:0x[\\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\\-?\\d+.?\\d*)(?=\\s)/, token: \"number\"},\n      //{regex: /[+-]?/} //fractional\n      // definition: defining word, defined word, etc\n      {regex: /((?:GENERIC)|\\:?\\:)(\\s+)(\\S+)(\\s+)(\\()/, token: [\"keyword\", null, \"def\", null, \"bracket\"], next: \"stack\"},\n      // method definition: defining word, type, defined word, etc\n      {regex: /(M\\:)(\\s+)(\\S+)(\\s+)(\\S+)/, token: [\"keyword\", null, \"def\", null, \"tag\"]},\n      // vocabulary using --> state\n      {regex: /USING\\:/, token: \"keyword\", next: \"vocabulary\"},\n      // vocabulary definition/use\n      {regex: /(USE\\:|IN\\:)(\\s+)(\\S+)(?=\\s|$)/, token: [\"keyword\", null, \"tag\"]},\n      // definition: a defining word, defined word\n      {regex: /(\\S+\\:)(\\s+)(\\S+)(?=\\s|$)/, token: [\"keyword\", null, \"def\"]},\n      // \"keywords\", incl. ; t f . [ ] { } defining words\n      {regex: /(?:;|\\\\|t|f|if|loop|while|until|do|PRIVATE>|<PRIVATE|\\.|\\S*\\[|\\]|\\S*\\{|\\})(?=\\s|$)/, token: \"keyword\"},\n      // <constructors> and the like\n      {regex: /\\S+[\\)>\\.\\*\\?]+(?=\\s|$)/, token: \"builtin\"},\n      {regex: /[\\)><]+\\S+(?=\\s|$)/, token: \"builtin\"},\n      // operators\n      {regex: /(?:[\\+\\-\\=\\/\\*<>])(?=\\s|$)/, token: \"keyword\"},\n      // any id (?)\n      {regex: /\\S+/, token: \"variable\"},\n      {regex: /\\s+|./, token: null}\n    ],\n    vocabulary: [\n      {regex: /;/, token: \"keyword\", next: \"start\"},\n      {regex: /\\S+/, token: \"tag\"},\n      {regex: /\\s+|./, token: null}\n    ],\n    string: [\n      {regex: /(?:[^\\\\]|\\\\.)*?\"/, token: \"string\", next: \"start\"},\n      {regex: /.*/, token: \"string\"}\n    ],\n    string2: [\n      {regex: /^;/, token: \"keyword\", next: \"start\"},\n      {regex: /.*/, token: \"string\"}\n    ],\n    string3: [\n      {regex: /(?:[^\\\\]|\\\\.)*?\"\"\"/, token: \"string\", next: \"start\"},\n      {regex: /.*/, token: \"string\"}\n    ],\n    stack: [\n      {regex: /\\)/, token: \"bracket\", next: \"start\"},\n      {regex: /--/, token: \"bracket\"},\n      {regex: /\\S+/, token: \"meta\"},\n      {regex: /\\s+|./, token: null}\n    ],\n    languageData: {\n      name: \"factor\",\n      dontIndentStates: [\"start\", \"vocabulary\", \"string\", \"string3\", \"stack\"],\n      commentTokens: {line: \"!\"}\n    }\n  });\n","export function simpleMode(states) {\n  ensureState(states, \"start\");\n  var states_ = {}, meta = states.languageData || {}, hasIndentation = false;\n  for (var state in states) if (state != meta && states.hasOwnProperty(state)) {\n    var list = states_[state] = [], orig = states[state];\n    for (var i = 0; i < orig.length; i++) {\n      var data = orig[i];\n      list.push(new Rule(data, states));\n      if (data.indent || data.dedent) hasIndentation = true;\n    }\n  }\n  return {\n    name: meta.name,\n    startState: function() {\n      return {state: \"start\", pending: null, indent: hasIndentation ? [] : null};\n    },\n    copyState: function(state) {\n      var s = {state: state.state, pending: state.pending, indent: state.indent && state.indent.slice(0)};\n      if (state.stack)\n        s.stack = state.stack.slice(0);\n      return s;\n    },\n    token: tokenFunction(states_),\n    indent: indentFunction(states_, meta),\n    languageData: meta\n  }\n};\n\nfunction ensureState(states, name) {\n  if (!states.hasOwnProperty(name))\n    throw new Error(\"Undefined state \" + name + \" in simple mode\");\n}\n\nfunction toRegex(val, caret) {\n  if (!val) return /(?:)/;\n  var flags = \"\";\n  if (val instanceof RegExp) {\n    if (val.ignoreCase) flags = \"i\";\n    val = val.source;\n  } else {\n    val = String(val);\n  }\n  return new RegExp((caret === false ? \"\" : \"^\") + \"(?:\" + val + \")\", flags);\n}\n\nfunction asToken(val) {\n  if (!val) return null;\n  if (val.apply) return val\n  if (typeof val == \"string\") return val.replace(/\\./g, \" \");\n  var result = [];\n  for (var i = 0; i < val.length; i++)\n    result.push(val[i] && val[i].replace(/\\./g, \" \"));\n  return result;\n}\n\nfunction Rule(data, states) {\n  if (data.next || data.push) ensureState(states, data.next || data.push);\n  this.regex = toRegex(data.regex);\n  this.token = asToken(data.token);\n  this.data = data;\n}\n\nfunction tokenFunction(states) {\n  return function(stream, state) {\n    if (state.pending) {\n      var pend = state.pending.shift();\n      if (state.pending.length == 0) state.pending = null;\n      stream.pos += pend.text.length;\n      return pend.token;\n    }\n\n    var curState = states[state.state];\n    for (var i = 0; i < curState.length; i++) {\n      var rule = curState[i];\n      var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);\n      if (matches) {\n        if (rule.data.next) {\n          state.state = rule.data.next;\n        } else if (rule.data.push) {\n          (state.stack || (state.stack = [])).push(state.state);\n          state.state = rule.data.push;\n        } else if (rule.data.pop && state.stack && state.stack.length) {\n          state.state = state.stack.pop();\n        }\n\n        if (rule.data.indent)\n          state.indent.push(stream.indentation() + stream.indentUnit);\n        if (rule.data.dedent)\n          state.indent.pop();\n        var token = rule.token\n        if (token && token.apply) token = token(matches)\n        if (matches.length > 2 && rule.token && typeof rule.token != \"string\") {\n          state.pending = [];\n          for (var j = 2; j < matches.length; j++)\n            if (matches[j])\n              state.pending.push({text: matches[j], token: rule.token[j - 1]});\n          stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));\n          return token[0];\n        } else if (token && token.join) {\n          return token[0];\n        } else {\n          return token;\n        }\n      }\n    }\n    stream.next();\n    return null;\n  };\n}\n\nfunction indentFunction(states, meta) {\n  return function(state, textAfter) {\n    if (state.indent == null || meta.dontIndentStates && meta.doneIndentState.indexOf(state.state) > -1)\n      return null\n\n    var pos = state.indent.length - 1, rules = states[state.state];\n    scan: for (;;) {\n      for (var i = 0; i < rules.length; i++) {\n        var rule = rules[i];\n        if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {\n          var m = rule.regex.exec(textAfter);\n          if (m && m[0]) {\n            pos--;\n            if (rule.next || rule.push) rules = states[rule.next || rule.push];\n            textAfter = textAfter.slice(m[0].length);\n            continue scan;\n          }\n        }\n      }\n      break;\n    }\n    return pos < 0 ? 0 : state.indent[pos];\n  };\n}\n"],"names":["factor","_simple_mode_js__WEBPACK_IMPORTED_MODULE_0__","Q","start","regex","token","next","vocabulary","string","string2","string3","stack","languageData","name","dontIndentStates","commentTokens","line","simpleMode","states","ensureState","states_","meta","hasIndentation","state","hasOwnProperty","list","orig","i","length","data","push","Rule","indent","dedent","startState","pending","copyState","s","slice","stream","pend","shift","pos","text","curState","rule","matches","sol","match","pop","indentation","indentUnit","apply","j","backUp","join","textAfter","doneIndentState","indexOf","rules","scan","dedentIfLineStart","m","exec","toRegex","val","caret","flags","RegExp","ignoreCase","source","String","asToken","replace","result"],"sourceRoot":""}