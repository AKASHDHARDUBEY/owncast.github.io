{"version":3,"file":"static/chunks/4879.940b1fc822754a8d.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/shell.js","webpack://_N_E/<anon>"],"sourcesContent":["var words = {};\nfunction define(style, dict) {\n  for(var i = 0; i < dict.length; i++) {\n    words[dict[i]] = style;\n  }\n};\n\nvar commonAtoms = [\"true\", \"false\"];\nvar commonKeywords = [\"if\", \"then\", \"do\", \"else\", \"elif\", \"while\", \"until\", \"for\", \"in\", \"esac\", \"fi\",\n                      \"fin\", \"fil\", \"done\", \"exit\", \"set\", \"unset\", \"export\", \"function\"];\nvar commonCommands = [\"ab\", \"awk\", \"bash\", \"beep\", \"cat\", \"cc\", \"cd\", \"chown\", \"chmod\", \"chroot\", \"clear\",\n                      \"cp\", \"curl\", \"cut\", \"diff\", \"echo\", \"find\", \"gawk\", \"gcc\", \"get\", \"git\", \"grep\", \"hg\", \"kill\", \"killall\",\n                      \"ln\", \"ls\", \"make\", \"mkdir\", \"openssl\", \"mv\", \"nc\", \"nl\", \"node\", \"npm\", \"ping\", \"ps\", \"restart\", \"rm\",\n                      \"rmdir\", \"sed\", \"service\", \"sh\", \"shopt\", \"shred\", \"source\", \"sort\", \"sleep\", \"ssh\", \"start\", \"stop\",\n                      \"su\", \"sudo\", \"svn\", \"tee\", \"telnet\", \"top\", \"touch\", \"vi\", \"vim\", \"wall\", \"wc\", \"wget\", \"who\", \"write\",\n                      \"yes\", \"zsh\"];\n\ndefine('atom', commonAtoms);\ndefine('keyword', commonKeywords);\ndefine('builtin', commonCommands);\n\nfunction tokenBase(stream, state) {\n  if (stream.eatSpace()) return null;\n\n  var sol = stream.sol();\n  var ch = stream.next();\n\n  if (ch === '\\\\') {\n    stream.next();\n    return null;\n  }\n  if (ch === '\\'' || ch === '\"' || ch === '`') {\n    state.tokens.unshift(tokenString(ch, ch === \"`\" ? \"quote\" : \"string\"));\n    return tokenize(stream, state);\n  }\n  if (ch === '#') {\n    if (sol && stream.eat('!')) {\n      stream.skipToEnd();\n      return 'meta'; // 'comment'?\n    }\n    stream.skipToEnd();\n    return 'comment';\n  }\n  if (ch === '$') {\n    state.tokens.unshift(tokenDollar);\n    return tokenize(stream, state);\n  }\n  if (ch === '+' || ch === '=') {\n    return 'operator';\n  }\n  if (ch === '-') {\n    stream.eat('-');\n    stream.eatWhile(/\\w/);\n    return 'attribute';\n  }\n  if (ch == \"<\") {\n    if (stream.match(\"<<\")) return \"operator\"\n    var heredoc = stream.match(/^<-?\\s*['\"]?([^'\"]*)['\"]?/)\n    if (heredoc) {\n      state.tokens.unshift(tokenHeredoc(heredoc[1]))\n      return 'string.special'\n    }\n  }\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/\\d/);\n    if(stream.eol() || !/\\w/.test(stream.peek())) {\n      return 'number';\n    }\n  }\n  stream.eatWhile(/[\\w-]/);\n  var cur = stream.current();\n  if (stream.peek() === '=' && /\\w+/.test(cur)) return 'def';\n  return words.hasOwnProperty(cur) ? words[cur] : null;\n}\n\nfunction tokenString(quote, style) {\n  var close = quote == \"(\" ? \")\" : quote == \"{\" ? \"}\" : quote\n  return function(stream, state) {\n    var next, escaped = false;\n    while ((next = stream.next()) != null) {\n      if (next === close && !escaped) {\n        state.tokens.shift();\n        break;\n      } else if (next === '$' && !escaped && quote !== \"'\" && stream.peek() != close) {\n        escaped = true;\n        stream.backUp(1);\n        state.tokens.unshift(tokenDollar);\n        break;\n      } else if (!escaped && quote !== close && next === quote) {\n        state.tokens.unshift(tokenString(quote, style))\n        return tokenize(stream, state)\n      } else if (!escaped && /['\"]/.test(next) && !/['\"]/.test(quote)) {\n        state.tokens.unshift(tokenStringStart(next, \"string\"));\n        stream.backUp(1);\n        break;\n      }\n      escaped = !escaped && next === '\\\\';\n    }\n    return style;\n  };\n};\n\nfunction tokenStringStart(quote, style) {\n  return function(stream, state) {\n    state.tokens[0] = tokenString(quote, style)\n    stream.next()\n    return tokenize(stream, state)\n  }\n}\n\nvar tokenDollar = function(stream, state) {\n  if (state.tokens.length > 1) stream.eat('$');\n  var ch = stream.next()\n  if (/['\"({]/.test(ch)) {\n    state.tokens[0] = tokenString(ch, ch == \"(\" ? \"quote\" : ch == \"{\" ? \"def\" : \"string\");\n    return tokenize(stream, state);\n  }\n  if (!/\\d/.test(ch)) stream.eatWhile(/\\w/);\n  state.tokens.shift();\n  return 'def';\n};\n\nfunction tokenHeredoc(delim) {\n  return function(stream, state) {\n    if (stream.sol() && stream.string == delim) state.tokens.shift()\n    stream.skipToEnd()\n    return \"string.special\"\n  }\n}\n\nfunction tokenize(stream, state) {\n  return (state.tokens[0] || tokenBase) (stream, state);\n};\n\nexport const shell = {\n  name: \"shell\",\n  startState: function() {return {tokens:[]};},\n  token: function(stream, state) {\n    return tokenize(stream, state);\n  },\n  languageData: {\n    autocomplete: commonAtoms.concat(commonKeywords, commonCommands),\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"`\"]},\n    commentTokens: {line: \"#\"}\n  }\n};\n"],"names":["words","define","style","dict","i","length","commonAtoms","commonKeywords","commonCommands","tokenBase","stream","state","eatSpace","sol","ch","next","tokens","unshift","tokenString","tokenize","eat","skipToEnd","tokenDollar","eatWhile","match","delim","heredoc","string","shift","test","eol","peek","cur","current","hasOwnProperty","quote","close","escaped","tokenStringStart","backUp","shell","name","startState","token","languageData","autocomplete","concat","closeBrackets","brackets","commentTokens","line"],"sourceRoot":""}