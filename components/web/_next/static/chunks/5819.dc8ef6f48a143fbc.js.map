{"version":3,"file":"static/chunks/5819.dc8ef6f48a143fbc.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/vhdl.js","webpack://_N_E/<anon>"],"sourcesContent":["function words(str) {\n  var obj = {}, words = str.split(\",\");\n  for (var i = 0; i < words.length; ++i) {\n    var allCaps = words[i].toUpperCase();\n    var firstCap = words[i].charAt(0).toUpperCase() + words[i].slice(1);\n    obj[words[i]] = true;\n    obj[allCaps] = true;\n    obj[firstCap] = true;\n  }\n  return obj;\n}\n\nfunction metaHook(stream) {\n  stream.eatWhile(/[\\w\\$_]/);\n  return \"meta\";\n}\n\nvar atoms = words(\"null\"),\n    hooks = {\"`\": metaHook, \"$\": metaHook},\n    multiLineStrings = false;\n\nvar keywords = words(\"abs,access,after,alias,all,and,architecture,array,assert,attribute,begin,block,\" +\n                     \"body,buffer,bus,case,component,configuration,constant,disconnect,downto,else,elsif,end,end block,end case,\" +\n                     \"end component,end for,end generate,end if,end loop,end process,end record,end units,entity,exit,file,for,\" +\n                     \"function,generate,generic,generic map,group,guarded,if,impure,in,inertial,inout,is,label,library,linkage,\" +\n                     \"literal,loop,map,mod,nand,new,next,nor,null,of,on,open,or,others,out,package,package body,port,port map,\" +\n                     \"postponed,procedure,process,pure,range,record,register,reject,rem,report,return,rol,ror,select,severity,signal,\" +\n                     \"sla,sll,sra,srl,subtype,then,to,transport,type,unaffected,units,until,use,variable,wait,when,while,with,xnor,xor\");\n\nvar blockKeywords = words(\"architecture,entity,begin,case,port,else,elsif,end,for,function,if\");\n\nvar isOperatorChar = /[&|~><!\\)\\(*#%@+\\/=?\\:;}{,\\.\\^\\-\\[\\]]/;\nvar curPunc;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (hooks[ch]) {\n    var result = hooks[ch](stream, state);\n    if (result !== false) return result;\n  }\n  if (ch == '\"') {\n    state.tokenize = tokenString2(ch);\n    return state.tokenize(stream, state);\n  }\n  if (ch == \"'\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n  if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n    curPunc = ch;\n    return null;\n  }\n  if (/[\\d']/.test(ch)) {\n    stream.eatWhile(/[\\w\\.']/);\n    return \"number\";\n  }\n  if (ch == \"-\") {\n    if (stream.eat(\"-\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n  if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_]/);\n  var cur = stream.current();\n  if (keywords.propertyIsEnumerable(cur.toLowerCase())) {\n    if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n    return \"keyword\";\n  }\n  if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n  return \"variable\";\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {end = true; break;}\n      escaped = !escaped && next == \"--\";\n    }\n    if (end || !(escaped || multiLineStrings))\n      state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\nfunction tokenString2(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {end = true; break;}\n      escaped = !escaped && next == \"--\";\n    }\n    if (end || !(escaped || multiLineStrings))\n      state.tokenize = tokenBase;\n    return \"string.special\";\n  };\n}\n\nfunction Context(indented, column, type, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.align = align;\n  this.prev = prev;\n}\nfunction pushContext(state, col, type) {\n  return state.context = new Context(state.indented, col, type, null, state.context);\n}\nfunction popContext(state) {\n  var t = state.context.type;\n  if (t == \")\" || t == \"]\" || t == \"}\")\n    state.indented = state.context.indented;\n  return state.context = state.context.prev;\n}\n\n// Interface\nexport const vhdl = {\n  name: \"vhdl\",\n  startState: function(indentUnit) {\n    return {\n      tokenize: null,\n      context: new Context(-indentUnit, 0, \"top\", false),\n      indented: 0,\n      startOfLine: true\n    };\n  },\n\n  token: function(stream, state) {\n    var ctx = state.context;\n    if (stream.sol()) {\n      if (ctx.align == null) ctx.align = false;\n      state.indented = stream.indentation();\n      state.startOfLine = true;\n    }\n    if (stream.eatSpace()) return null;\n    curPunc = null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\" || style == \"meta\") return style;\n    if (ctx.align == null) ctx.align = true;\n\n    if ((curPunc == \";\" || curPunc == \":\") && ctx.type == \"statement\") popContext(state);\n    else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n    else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n    else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n    else if (curPunc == \"}\") {\n      while (ctx.type == \"statement\") ctx = popContext(state);\n      if (ctx.type == \"}\") ctx = popContext(state);\n      while (ctx.type == \"statement\") ctx = popContext(state);\n    }\n    else if (curPunc == ctx.type) popContext(state);\n    else if (ctx.type == \"}\" || ctx.type == \"top\" || (ctx.type == \"statement\" && curPunc == \"newstatement\"))\n      pushContext(state, stream.column(), \"statement\");\n    state.startOfLine = false;\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    if (state.tokenize != tokenBase && state.tokenize != null) return 0;\n    var firstChar = textAfter && textAfter.charAt(0), ctx = state.context, closing = firstChar == ctx.type;\n    if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : cx.unit);\n    else if (ctx.align) return ctx.column + (closing ? 0 : 1);\n    else return ctx.indented + (closing ? 0 : cx.unit);\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*[{}]$/,\n    commentTokens: {line: \"--\"}\n  }\n}\n"],"names":["words","str","obj","split","i","length","allCaps","toUpperCase","firstCap","charAt","slice","metaHook","stream","eatWhile","curPunc","atoms","hooks","keywords","blockKeywords","isOperatorChar","tokenBase","state","ch","next","result","tokenize","escaped","end","test","eat","skipToEnd","cur","current","propertyIsEnumerable","toLowerCase","Context","indented","column","type","align","prev","pushContext","col","context","popContext","t","vhdl","name","startState","indentUnit","startOfLine","token","ctx","sol","indentation","eatSpace","style","indent","textAfter","cx","firstChar","closing","unit","languageData","indentOnInput","commentTokens","line"],"sourceRoot":""}