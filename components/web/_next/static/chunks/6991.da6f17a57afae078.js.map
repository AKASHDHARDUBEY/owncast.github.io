{"version":3,"file":"static/chunks/6991.da6f17a57afae078.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/dtd.js","webpack://_N_E/<anon>"],"sourcesContent":["var type;\nfunction ret(style, tp) {type = tp; return style;}\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n\n  if (ch == \"<\" && stream.eat(\"!\") ) {\n    if (stream.eatWhile(/[\\-]/)) {\n      state.tokenize = tokenSGMLComment;\n      return tokenSGMLComment(stream, state);\n    } else if (stream.eatWhile(/[\\w]/)) return ret(\"keyword\", \"doindent\");\n  } else if (ch == \"<\" && stream.eat(\"?\")) { //xml declaration\n    state.tokenize = inBlock(\"meta\", \"?>\");\n    return ret(\"meta\", ch);\n  } else if (ch == \"#\" && stream.eatWhile(/[\\w]/)) return ret(\"atom\", \"tag\");\n  else if (ch == \"|\") return ret(\"keyword\", \"separator\");\n  else if (ch.match(/[\\(\\)\\[\\]\\-\\.,\\+\\?>]/)) return ret(null, ch);//if(ch === \">\") return ret(null, \"endtag\"); else\n  else if (ch.match(/[\\[\\]]/)) return ret(\"rule\", ch);\n  else if (ch == \"\\\"\" || ch == \"'\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  } else if (stream.eatWhile(/[a-zA-Z\\?\\+\\d]/)) {\n    var sc = stream.current();\n    if( sc.substr(sc.length-1,sc.length).match(/\\?|\\+/) !== null )stream.backUp(1);\n    return ret(\"tag\", \"tag\");\n  } else if (ch == \"%\" || ch == \"*\" ) return ret(\"number\", \"number\");\n  else {\n    stream.eatWhile(/[\\w\\\\\\-_%.{,]/);\n    return ret(null, null);\n  }\n}\n\nfunction tokenSGMLComment(stream, state) {\n  var dashes = 0, ch;\n  while ((ch = stream.next()) != null) {\n    if (dashes >= 2 && ch == \">\") {\n      state.tokenize = tokenBase;\n      break;\n    }\n    dashes = (ch == \"-\") ? dashes + 1 : 0;\n  }\n  return ret(\"comment\", \"comment\");\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, ch;\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && !escaped) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && ch == \"\\\\\";\n    }\n    return ret(\"string\", \"tag\");\n  };\n}\n\nfunction inBlock(style, terminator) {\n  return function(stream, state) {\n    while (!stream.eol()) {\n      if (stream.match(terminator)) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      stream.next();\n    }\n    return style;\n  };\n}\n\nexport const dtd = {\n  name: \"dtd\",\n  startState: function() {\n    return {tokenize: tokenBase,\n            baseIndent: 0,\n            stack: []};\n  },\n\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n\n    var context = state.stack[state.stack.length-1];\n    if (stream.current() == \"[\" || type === \"doindent\" || type == \"[\") state.stack.push(\"rule\");\n    else if (type === \"endtag\") state.stack[state.stack.length-1] = \"endtag\";\n    else if (stream.current() == \"]\" || type == \"]\" || (type == \">\" && context == \"rule\")) state.stack.pop();\n    else if (type == \"[\") state.stack.push(\"[\");\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    var n = state.stack.length;\n\n    if( textAfter.charAt(0) === ']' )n--;\n    else if(textAfter.substr(textAfter.length-1, textAfter.length) === \">\"){\n      if(textAfter.substr(0,1) === \"<\") {}\n      else if( type == \"doindent\" && textAfter.length > 1 ) {}\n      else if( type == \"doindent\")n--;\n      else if( type == \">\" && textAfter.length > 1) {}\n      else if( type == \"tag\" && textAfter !== \">\") {}\n      else if( type == \"tag\" && state.stack[state.stack.length-1] == \"rule\")n--;\n      else if( type == \"tag\")n++;\n      else if( textAfter === \">\" && state.stack[state.stack.length-1] == \"rule\" && type === \">\")n--;\n      else if( textAfter === \">\" && state.stack[state.stack.length-1] == \"rule\") {}\n      else if( textAfter.substr(0,1) !== \"<\" && textAfter.substr(0,1) === \">\" )n=n-1;\n      else if( textAfter === \">\") {}\n      else n=n-1;\n      //over rule them all\n      if(type == null || type == \"]\")n--;\n    }\n\n    return state.baseIndent + n * cx.unit;\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*[\\]>]$/\n  }\n};\n\n"],"names":["type","tokenBase","stream","state","ch","next","eat","eatWhile","tokenize","tokenSGMLComment","eol","match","escaped","sc","current","substr","length","backUp","dashes","dtd","name","startState","baseIndent","stack","token","eatSpace","style","context","push","pop","indent","textAfter","cx","n","charAt","unit","languageData","indentOnInput"],"sourceRoot":""}