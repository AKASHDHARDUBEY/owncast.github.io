{"version":3,"file":"static/chunks/8770.3b0f51a00f422d43.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/elm.js","webpack://_N_E/<anon>"],"sourcesContent":["function switchState(source, setState, f)\n{\n  setState(f);\n  return f(source, setState);\n}\n\nvar lowerRE = /[a-z]/;\nvar upperRE = /[A-Z]/;\nvar innerRE = /[a-zA-Z0-9_]/;\n\nvar digitRE = /[0-9]/;\nvar hexRE = /[0-9A-Fa-f]/;\nvar symbolRE = /[-&*+.\\\\/<>=?^|:]/;\nvar specialRE = /[(),[\\]{}]/;\nvar spacesRE = /[ \\v\\f]/; // newlines are handled in tokenizer\n\nfunction normal()\n{\n  return function(source, setState)\n  {\n    if (source.eatWhile(spacesRE))\n    {\n      return null;\n    }\n\n    var char = source.next();\n\n    if (specialRE.test(char))\n    {\n      return (char === '{' && source.eat('-'))\n        ? switchState(source, setState, chompMultiComment(1))\n        : (char === '[' && source.match('glsl|'))\n        ? switchState(source, setState, chompGlsl)\n        : 'builtin';\n    }\n\n    if (char === '\\'')\n    {\n      return switchState(source, setState, chompChar);\n    }\n\n    if (char === '\"')\n    {\n      return source.eat('\"')\n        ? source.eat('\"')\n        ? switchState(source, setState, chompMultiString)\n        : 'string'\n      : switchState(source, setState, chompSingleString);\n    }\n\n    if (upperRE.test(char))\n    {\n      source.eatWhile(innerRE);\n      return 'type';\n    }\n\n    if (lowerRE.test(char))\n    {\n      var isDef = source.pos === 1;\n      source.eatWhile(innerRE);\n      return isDef ? \"def\" : \"variable\";\n    }\n\n    if (digitRE.test(char))\n    {\n      if (char === '0')\n      {\n        if (source.eat(/[xX]/))\n        {\n          source.eatWhile(hexRE); // should require at least 1\n          return \"number\";\n        }\n      }\n      else\n      {\n        source.eatWhile(digitRE);\n      }\n      if (source.eat('.'))\n      {\n        source.eatWhile(digitRE); // should require at least 1\n      }\n      if (source.eat(/[eE]/))\n      {\n        source.eat(/[-+]/);\n        source.eatWhile(digitRE); // should require at least 1\n      }\n      return \"number\";\n    }\n\n    if (symbolRE.test(char))\n    {\n      if (char === '-' && source.eat('-'))\n      {\n        source.skipToEnd();\n        return \"comment\";\n      }\n      source.eatWhile(symbolRE);\n      return \"keyword\";\n    }\n\n    if (char === '_')\n    {\n      return \"keyword\";\n    }\n\n    return \"error\";\n  }\n}\n\nfunction chompMultiComment(nest)\n{\n  if (nest == 0)\n  {\n    return normal();\n  }\n  return function(source, setState)\n  {\n    while (!source.eol())\n    {\n      var char = source.next();\n      if (char == '{' && source.eat('-'))\n      {\n        ++nest;\n      }\n      else if (char == '-' && source.eat('}'))\n      {\n        --nest;\n        if (nest === 0)\n        {\n          setState(normal());\n          return 'comment';\n        }\n      }\n    }\n    setState(chompMultiComment(nest));\n    return 'comment';\n  }\n}\n\nfunction chompMultiString(source, setState)\n{\n  while (!source.eol())\n  {\n    var char = source.next();\n    if (char === '\"' && source.eat('\"') && source.eat('\"'))\n    {\n      setState(normal());\n      return 'string';\n    }\n  }\n  return 'string';\n}\n\nfunction chompSingleString(source, setState)\n{\n  while (source.skipTo('\\\\\"')) { source.next(); source.next(); }\n  if (source.skipTo('\"'))\n  {\n    source.next();\n    setState(normal());\n    return 'string';\n  }\n  source.skipToEnd();\n  setState(normal());\n  return 'error';\n}\n\nfunction chompChar(source, setState)\n{\n  while (source.skipTo(\"\\\\'\")) { source.next(); source.next(); }\n  if (source.skipTo(\"'\"))\n  {\n    source.next();\n    setState(normal());\n    return 'string';\n  }\n  source.skipToEnd();\n  setState(normal());\n  return 'error';\n}\n\nfunction chompGlsl(source, setState)\n{\n  while (!source.eol())\n  {\n    var char = source.next();\n    if (char === '|' && source.eat(']'))\n    {\n      setState(normal());\n      return 'string';\n    }\n  }\n  return 'string';\n}\n\nvar wellKnownWords = {\n  case: 1,\n  of: 1,\n  as: 1,\n  if: 1,\n  then: 1,\n  else: 1,\n  let: 1,\n    in: 1,\n  type: 1,\n  alias: 1,\n  module: 1,\n  where: 1,\n  import: 1,\n  exposing: 1,\n  port: 1\n};\n\nexport const elm = {\n  name: \"elm\",\n  startState: function ()  { return { f: normal() }; },\n  copyState:  function (s) { return { f: s.f }; },\n\n  token: function(stream, state) {\n    var type = state.f(stream, function(s) { state.f = s; });\n    var word = stream.current();\n    return (wellKnownWords.hasOwnProperty(word)) ? 'keyword' : type;\n  },\n\n  languageData: {\n    commentTokens: {line: \"--\"}\n  }\n};\n"],"names":["switchState","source","setState","f","lowerRE","upperRE","innerRE","digitRE","hexRE","symbolRE","specialRE","spacesRE","normal","eatWhile","char","next","test","eat","chompMultiComment","nest","eol","match","chompGlsl","chompChar","chompMultiString","chompSingleString","isDef","pos","skipToEnd","skipTo","wellKnownWords","case","of","as","if","then","else","let","in","type","alias","module","where","import","exposing","port","elm","name","startState","copyState","s","token","stream","state","word","current","hasOwnProperty","languageData","commentTokens","line"],"sourceRoot":""}