{"version":3,"file":"static/chunks/3883.6ea15ceea125c51d.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@codemirror/legacy-modes/mode/groovy.js","webpack://_N_E/<anon>"],"sourcesContent":["function words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\nvar keywords = words(\n  \"abstract as assert boolean break byte case catch char class const continue def default \" +\n    \"do double else enum extends final finally float for goto if implements import in \" +\n    \"instanceof int interface long native new package private protected public return \" +\n    \"short static strictfp super switch synchronized threadsafe throw throws trait transient \" +\n    \"try void volatile while\");\nvar blockKeywords = words(\"catch class def do else enum finally for if interface switch trait try while\");\nvar standaloneKeywords = words(\"return break continue\");\nvar atoms = words(\"null true false this\");\n\nvar curPunc;\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (ch == '\"' || ch == \"'\") {\n    return startString(ch, stream, state);\n  }\n  if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n    curPunc = ch;\n    return null;\n  }\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    if (stream.eat(/eE/)) { stream.eat(/\\+\\-/); stream.eatWhile(/\\d/); }\n    return \"number\";\n  }\n  if (ch == \"/\") {\n    if (stream.eat(\"*\")) {\n      state.tokenize.push(tokenComment);\n      return tokenComment(stream, state);\n    }\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    if (expectExpression(state.lastToken, false)) {\n      return startString(ch, stream, state);\n    }\n  }\n  if (ch == \"-\" && stream.eat(\">\")) {\n    curPunc = \"->\";\n    return null;\n  }\n  if (/[+\\-*&%=<>!?|\\/~]/.test(ch)) {\n    stream.eatWhile(/[+\\-*&%=<>|~]/);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_]/);\n  if (ch == \"@\") { stream.eatWhile(/[\\w\\$_\\.]/); return \"meta\"; }\n  if (state.lastToken == \".\") return \"property\";\n  if (stream.eat(\":\")) { curPunc = \"proplabel\"; return \"property\"; }\n  var cur = stream.current();\n  if (atoms.propertyIsEnumerable(cur)) { return \"atom\"; }\n  if (keywords.propertyIsEnumerable(cur)) {\n    if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n    else if (standaloneKeywords.propertyIsEnumerable(cur)) curPunc = \"standalone\";\n    return \"keyword\";\n  }\n  return \"variable\";\n}\ntokenBase.isBase = true;\n\nfunction startString(quote, stream, state) {\n  var tripleQuoted = false;\n  if (quote != \"/\" && stream.eat(quote)) {\n    if (stream.eat(quote)) tripleQuoted = true;\n    else return \"string\";\n  }\n  function t(stream, state) {\n    var escaped = false, next, end = !tripleQuoted;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        if (!tripleQuoted) { break; }\n        if (stream.match(quote + quote)) { end = true; break; }\n      }\n      if (quote == '\"' && next == \"$\" && !escaped) {\n        if (stream.eat(\"{\")) {\n          state.tokenize.push(tokenBaseUntilBrace());\n          return \"string\";\n        } else if (stream.match(/^\\w/, false)) {\n          state.tokenize.push(tokenVariableDeref);\n          return \"string\";\n        }\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end) state.tokenize.pop();\n    return \"string\";\n  }\n  state.tokenize.push(t);\n  return t(stream, state);\n}\n\nfunction tokenBaseUntilBrace() {\n  var depth = 1;\n  function t(stream, state) {\n    if (stream.peek() == \"}\") {\n      depth--;\n      if (depth == 0) {\n        state.tokenize.pop();\n        return state.tokenize[state.tokenize.length-1](stream, state);\n      }\n    } else if (stream.peek() == \"{\") {\n      depth++;\n    }\n    return tokenBase(stream, state);\n  }\n  t.isBase = true;\n  return t;\n}\n\nfunction tokenVariableDeref(stream, state) {\n  var next = stream.match(/^(\\.|[\\w\\$_]+)/)\n  if (!next) {\n    state.tokenize.pop()\n    return state.tokenize[state.tokenize.length-1](stream, state)\n  }\n  return next[0] == \".\" ? null : \"variable\"\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize.pop();\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction expectExpression(last, newline) {\n  return !last || last == \"operator\" || last == \"->\" || /[\\.\\[\\{\\(,;:]/.test(last) ||\n    last == \"newstatement\" || last == \"keyword\" || last == \"proplabel\" ||\n    (last == \"standalone\" && !newline);\n}\n\nfunction Context(indented, column, type, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.align = align;\n  this.prev = prev;\n}\nfunction pushContext(state, col, type) {\n  return state.context = new Context(state.indented, col, type, null, state.context);\n}\nfunction popContext(state) {\n  var t = state.context.type;\n  if (t == \")\" || t == \"]\" || t == \"}\")\n    state.indented = state.context.indented;\n  return state.context = state.context.prev;\n}\n\n// Interface\n\nexport const groovy = {\n  name: \"groovy\",\n  startState: function(indentUnit) {\n    return {\n      tokenize: [tokenBase],\n      context: new Context(-indentUnit, 0, \"top\", false),\n      indented: 0,\n      startOfLine: true,\n      lastToken: null\n    };\n  },\n\n  token: function(stream, state) {\n    var ctx = state.context;\n    if (stream.sol()) {\n      if (ctx.align == null) ctx.align = false;\n      state.indented = stream.indentation();\n      state.startOfLine = true;\n      // Automatic semicolon insertion\n      if (ctx.type == \"statement\" && !expectExpression(state.lastToken, true)) {\n        popContext(state); ctx = state.context;\n      }\n    }\n    if (stream.eatSpace()) return null;\n    curPunc = null;\n    var style = state.tokenize[state.tokenize.length-1](stream, state);\n    if (style == \"comment\") return style;\n    if (ctx.align == null) ctx.align = true;\n\n    if ((curPunc == \";\" || curPunc == \":\") && ctx.type == \"statement\") popContext(state);\n    // Handle indentation for {x -> \\n ... }\n    else if (curPunc == \"->\" && ctx.type == \"statement\" && ctx.prev.type == \"}\") {\n      popContext(state);\n      state.context.align = false;\n    }\n    else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n    else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n    else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n    else if (curPunc == \"}\") {\n      while (ctx.type == \"statement\") ctx = popContext(state);\n      if (ctx.type == \"}\") ctx = popContext(state);\n      while (ctx.type == \"statement\") ctx = popContext(state);\n    }\n    else if (curPunc == ctx.type) popContext(state);\n    else if (ctx.type == \"}\" || ctx.type == \"top\" || (ctx.type == \"statement\" && curPunc == \"newstatement\"))\n      pushContext(state, stream.column(), \"statement\");\n    state.startOfLine = false;\n    state.lastToken = curPunc || style;\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    if (!state.tokenize[state.tokenize.length-1].isBase) return null;\n    var firstChar = textAfter && textAfter.charAt(0), ctx = state.context;\n    if (ctx.type == \"statement\" && !expectExpression(state.lastToken, true)) ctx = ctx.prev;\n    var closing = firstChar == ctx.type;\n    if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : cx.unit);\n    else if (ctx.align) return ctx.column + (closing ? 0 : 1);\n    else return ctx.indented + (closing ? 0 : cx.unit);\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*[{}]$/,\n    commentTokens: {line: \"//\", block: {open: \"/*\", close: \"*/\"}},\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"'''\", '\"\"\"']}\n  }\n};\n"],"names":["words","str","obj","split","i","length","curPunc","keywords","blockKeywords","standaloneKeywords","atoms","tokenBase","stream","state","ch","next","startString","test","eatWhile","eat","tokenize","push","tokenComment","skipToEnd","expectExpression","lastToken","cur","current","propertyIsEnumerable","quote","tripleQuoted","t","escaped","end","match","tokenBaseUntilBrace","depth","peek","pop","isBase","tokenVariableDeref","maybeEnd","last","newline","Context","indented","column","type","align","prev","pushContext","col","context","popContext","groovy","name","startState","indentUnit","startOfLine","token","ctx","sol","indentation","eatSpace","style","indent","textAfter","cx","firstChar","charAt","closing","unit","languageData","indentOnInput","commentTokens","line","block","open","close","closeBrackets","brackets"],"sourceRoot":""}